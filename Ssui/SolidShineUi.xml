<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SolidShineUi</name>
    </assembly>
    <members>
        <member name="T:SolidShineUi.ArithmeticParser">
            <summary>
            Contains functionality to parse and evaluate math arithmetic expressions.
            </summary>
        </member>
        <member name="M:SolidShineUi.ArithmeticParser.Evaluate(System.String)">
            <summary>
            Evaluate an arithmetic expression and output the result (i.e. "2+5" will output "7"). See remarks for more info on supported functions.
            </summary>
            <param name="input">The arithmetic expression to evaluate.</param>
            <exception cref="T:System.FormatException">Thrown if the expression is not valid (contains unrecognized characters or a mismatched number of parantheses).</exception>
            <returns>The result of the expression.</returns>
            <remarks>Supports addition, subtraction, multiplication, division, and exponents. Also supports parantheses (with implied multiplcation) and negative numbers.<para/>
            Uses order of operations: exponents, division, multiplication, subtraction, addition.<para/>
            Whitespace and new-line characters are removed prior to evaluation, and the literal characters ×, ⋅, and ÷ are replaced with their representations *, *, and /.</remarks>
        </member>
        <member name="M:SolidShineUi.ArithmeticParser.IsValidString(System.String)">
            <summary>
            Check if a string can be parsed as an expression.
            </summary>
            <param name="input">The string to parse.</param>
            <returns>True if it is a string that can be parsed. False if it contains invalid characters.</returns>
        </member>
        <member name="T:SolidShineUi.AutoCompleteBehavior">
            <summary>
            Adds basic auto-complete behavior to text boxes via attached properties. Created by Nimgoble.
            </summary>
        </member>
        <member name="F:SolidShineUi.AutoCompleteBehavior.AutoCompleteItemsSource">
            <summary>
            The collection to search for auto-complete matches from.
            </summary>
        </member>
        <member name="F:SolidShineUi.AutoCompleteBehavior.AutoCompleteStringComparison">
            <summary>
            The string comparison method to utilize when supplying auto-completion suggestions.
            </summary>
        </member>
        <member name="F:SolidShineUi.AutoCompleteBehavior.AutoCompleteIndicator">
            <summary>
            The string that, when typed, activates the auto-completion suggestions, such as "@". If this is null or empty,
            auto-complete suggestions will be supplied once any text is typed into the TextBox.
            </summary>
        </member>
        <member name="M:SolidShineUi.AutoCompleteBehavior.GetAutoCompleteItemsSource(System.Windows.DependencyObject)">
            <summary>
            Return the string list/enumerable associated with a specified object; this list is used as the source for the auto complete list.
            </summary>
        </member>
        <member name="M:SolidShineUi.AutoCompleteBehavior.SetAutoCompleteItemsSource(System.Windows.DependencyObject,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the string list/enumerable used for the auto complete list for the specified object.
            </summary>
        </member>
        <member name="M:SolidShineUi.AutoCompleteBehavior.GetAutoCompleteStringComparison(System.Windows.DependencyObject)">
            <summary>
            Get the string comparison method to utilize when supplying auto-completion suggestions.
            </summary>
        </member>
        <member name="M:SolidShineUi.AutoCompleteBehavior.SetAutoCompleteStringComparison(System.Windows.DependencyObject,System.StringComparison)">
            <summary>
            Set the string comparison method to utilize when supplying auto-completion suggestions.
            </summary>
        </member>
        <member name="M:SolidShineUi.AutoCompleteBehavior.GetAutoCompleteIndicator(System.Windows.DependencyObject)">
            <summary>
            Get the string that, when typed, activates the auto-completion suggestions, such as "@". If this is null or empty,
            auto-complete suggestions will be supplied once any text is typed into the TextBox.
            </summary>
        </member>
        <member name="M:SolidShineUi.AutoCompleteBehavior.SetAutoCompleteIndicator(System.Windows.DependencyObject,System.String)">
            <summary>
            Set the string that, when typed, activates the auto-completion suggestions, such as "@". If this is null or empty,
            auto-complete suggestions will be supplied once any text is typed into the TextBox.
            </summary>
        </member>
        <member name="M:SolidShineUi.AutoCompleteBehavior.OnPreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Used for moving the caret to the end of the suggested auto-completion text.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SolidShineUi.AutoCompleteBehavior.OnTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Search for auto-completion suggestions.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SolidShineUi.BindableChild">
            <summary>
            Add the ability to set a child to an object via WPF binding.
            </summary>
        </member>
        <member name="M:SolidShineUi.BindableChild.GetBindableChild(System.Windows.DependencyObject)">
            <summary>
            Get the bindable child element for this object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.BindableChild.SetBindableChild(System.Windows.DependencyObject,System.Windows.UIElement)">
            <summary>
            Set the bindable child element for this object.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="T:SolidShineUi.BindableChildConverter">
            <summary>
            A converter used to set the child of a control to a bound element.
            </summary>
        </member>
        <member name="M:SolidShineUi.BindableChildConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert an UIElement to be the child of a Border.
            </summary>
        </member>
        <member name="M:SolidShineUi.BindableChildConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a Border's child to get the UIElement it represents.
            </summary>
        </member>
        <member name="T:SolidShineUi.BindableHighContrast">
            <summary>
            When set up properly, allows a WPF control style to be triggered when the Windows High Contrast mode setting is changed. See remarks for details.
            </summary>
            <remarks>
            For the control or style in question that you want to monitor changes to high contrast in, set the property 
            <c>flat:BindableHighContrast.HighContrast = "{DynamicResource ResourceKey={x:Static Member=SystemParameters.HighContrastKey}}"</c> in the control or style.
            Then you can use the trigger as such: <c>&lt;Trigger Property="flat:BindableHighContrast.HighContrast" Value="True"&gt; ... &lt;/Trigger&gt;</c>.
            Visit <a href="https://stackoverflow.com/questions/18708794/how-can-i-fall-back-to-a-high-contrast-color-in-wpf">this StackOverflow question</a> for more information and source.
            This class is identical to the "SystemParameterProperties" class in the accepted answer.
            </remarks>
        </member>
        <member name="M:SolidShineUi.BindableHighContrast.GetHighContrast(System.Windows.DependencyObject)">
            <summary>
            Get whether a Windows High Contrast mode is currently activated.
            </summary>
            <param name="obj">The object to get the property value for.</param>
        </member>
        <member name="M:SolidShineUi.BindableHighContrast.SetHighContrast(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Set whether a Windows High Contrast mode is currently activated. This shouldn't be directly used in your code. Please see the remarks for <see cref="T:SolidShineUi.BindableHighContrast"/>.
            </summary>
        </member>
        <member name="T:SolidShineUi.BrushFactory">
            <summary>
            A class that creates various brushes conveniently.
            </summary>
        </member>
        <member name="M:SolidShineUi.BrushFactory.Create(System.Windows.Media.Color)">
            <summary>
            Create a brush based upon a single color.
            </summary>
            <param name="color">The color to use.</param>
            <returns>A SolidColorBrush that includes the color.</returns>
        </member>
        <member name="M:SolidShineUi.BrushFactory.Create(System.String)">
            <summary>
            Create a brush based upon a single color.
            </summary>
            <param name="hex">The hex value of the color to use.</param>
            <returns>A SolidColorBrush that includes the color.</returns>
        </member>
        <member name="M:SolidShineUi.BrushFactory.Create(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>
            Create a brush based upon two colors, made into a linear gradient.
            </summary>
            <param name="col1">The first color.</param>
            <param name="col2">The second color.</param>
            <param name="angle">The angle of the gradient to be made.</param>
            <returns>A LinearGradientBrush that includes the two colors.</returns>
        </member>
        <member name="M:SolidShineUi.BrushFactory.CreateFromImage(System.Windows.Media.ImageSource)">
            <summary>
            Create a brush based upon an image.
            </summary>
            <param name="image">The image to use.</param>
            <returns>An ImageBrush containing this image.</returns>
        </member>
        <member name="M:SolidShineUi.BrushFactory.CreateFromImage(System.Uri)">
            <summary>
            Create a brush based upon an image.
            </summary>
            <param name="location">The location, such as a web address or file location, of the image to use.</param>
            <returns>An ImageBrush containing this image.</returns>
        </member>
        <member name="M:SolidShineUi.BrushFactory.CreateFromImage(System.Windows.Media.ImageSource,System.Windows.Media.TileMode)">
            <summary>
            Create a brush based upon an image, with tiling.
            </summary>
            <param name="image">The image to use.</param>
            <param name="tile">The tiling mode to use for tiling this image.</param>
            <returns>An ImageBrush containing this image.</returns>
        </member>
        <member name="M:SolidShineUi.BrushFactory.CreateFromImage(System.Uri,System.Windows.Media.TileMode)">
            <summary>
            Create a brush based upon an image, with tiling.
            </summary>
            <param name="location">The location, such as a web address or file location, of the image to use.</param>
            <param name="tile">The tiling mode to use for tiling this image.</param>
            <returns>An ImageBrush containing this image.</returns>
        </member>
        <member name="M:SolidShineUi.BrushFactory.CreateCheckerboardBrush(System.Double,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Create a brush with a checkerboard pattern, where the size and colors of the squares are customizable.
            </summary>
            <param name="squareSize">The size of each square in the pattern. A size of 4 will create a pattern of 4x4 squares, each of alternating colors.</param>
            <param name="color1">The color to use for the first set of squares.</param>
            <param name="color2">The color to use for the second, alternating set of squares.</param>
        </member>
        <member name="M:SolidShineUi.BrushFactory.CreateCheckerboardBrush(System.Double,System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            Create a brush with a checkerboard pattern, where the size and colors of the squares are customizable.
            </summary>
            <param name="squareSize">The size of each square in the pattern. A size of 4 will create a pattern of 4x4 squares, each of alternating colors.</param>
            <param name="brush1">The brush to use for the first set of squares.</param>
            <param name="brush2">The brush to use for the second, alternating set of squares.</param>
        </member>
        <member name="T:SolidShineUi.CheckBox">
            <summary>
            A CheckBox control with more customization over the appearance, and a larger box for a more touch-friendly UI.
            </summary>
        </member>
        <member name="M:SolidShineUi.CheckBox.#ctor">
            <summary>
            Create a new CheckBox control.
            </summary>
        </member>
        <member name="F:SolidShineUi.CheckBox.CheckBoxClickCommand">
            <summary>
            The command that activates when the box of the checkbox itself has been clicked.
            </summary>
        </member>
        <member name="E:SolidShineUi.CheckBox.CheckBoxClick">
            <summary>
            An event that raises only when the checkbox itself is clicked.
            </summary>
        </member>
        <member name="E:SolidShineUi.CheckBox.CheckChanged">
            <summary>
            Raised when the CheckState property is changed, either to Checked, Indeterminate, or Unchecked.
            </summary>
        </member>
        <member name="E:SolidShineUi.CheckBox.Checked">
            <summary>
            Raised when the CheckState property is changed to Checked.
            </summary>
        </member>
        <member name="E:SolidShineUi.CheckBox.Unchecked">
            <summary>
            Raised when the CheckState property is changed to Unchecked.
            </summary>
        </member>
        <member name="E:SolidShineUi.CheckBox.Indeterminate">
            <summary>
            Raised when the CheckState property is changed to Indeterminate.
            </summary>
        </member>
        <member name="E:SolidShineUi.CheckBox.InternalIsCheckedChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.CheckBox.InternalIsIndeterminateChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.IsChecked">
            <summary>
            Get or set if the check box is checked. (Note: if in the Indeterminate state, it will still return true as checked.)
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.IsIndeterminate">
            <summary>
            Get or set if the check box is in the Indeterminate state. 
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.CheckState">
            <summary>
            Get or set the state of the checkbox, via a CheckState enum. Can be set via this property or via the IsChecked and IsIndeterminate properties.
            </summary>
        </member>
        <member name="E:SolidShineUi.CheckBox.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.CheckBox.ColorSchemeProperty">
            <summary>
            A dependency property object backing the related ColorScheme property. See <see cref="P:SolidShineUi.CheckBox.ColorScheme"/> for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.CheckBox.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.CheckBox.ColorScheme">
            <summary>
            Get or set the color scheme used for this checkbox. For easier color scheme management, bind this to the window or larger control you're using.
            </summary>
        </member>
        <member name="M:SolidShineUi.CheckBox.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.CheckBox.CheckBackground">
            <summary>
            Get or set the brush used for the background of the checkbox's box. This is not set via a color scheme.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.CheckForeground">
            <summary>
            Get or set the brush used for the check mark in the checkbox's box.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.BackgroundDisabledBrush">
            <summary>
            Get or set the brush to use for the background of the checkbox's box when it is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.BorderDisabledBrush">
            <summary>
            Get or set the brush used for the border of the checkbox's box when it is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.CheckDisabledBrush">
            <summary>
            Get or set the brush used for the check mark when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.BorderBrush">
            <summary>
            Get or set the brush used for the border of the checkbox's box.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.BorderHighlightBrush">
            <summary>
            Get or set the brush used for the border of the checkbox's box, while the mouse is over the control or it has keyboard focus.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.BorderThickness">
            <summary>
            Get or set the thickness of the border of the check box.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.BorderSelectionThickness">
            <summary>
            Get or set the thickness of the border of the check box, while the check box's IsChecked property is true.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.CornerRadius">
            <summary>
            Get or set the corner radius of the check box.
            </summary>
        </member>
        <member name="E:SolidShineUi.CheckBox.Click">
            <summary>
            Raised when the check box is clicked.
            </summary>
        </member>
        <member name="E:SolidShineUi.CheckBox.RightClick">
            <summary>
            Raised when the check box is right-clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.ClickOnPress">
            <summary>
            Gets or sets whether the Click event should be raised when the checkbox is pressed, rather than when it is released.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.TriStateClick">
            <summary>
            Gets or sets whether the checkbox should cycle through three states (rather than two) when clicked. The third state is the "Indeterminate" state, which can be checked via the IsIndeterminate property.
            </summary>
        </member>
        <member name="F:SolidShineUi.CheckBox.TriStateClickProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.CheckBox.OnlyAllowCheckBoxClick">
            <summary>
            Gets or sets whether clicking should only occur when the checkbox's box is clicked, and not the rest of the control.
            </summary>
        </member>
        <member name="F:SolidShineUi.CheckBox.OnlyAllowCheckBoxClickProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.CheckBox.PerformPress(System.Boolean)">
            <summary>
            Sets up the button to be clicked. This must be run before PerformClick.
            </summary>
            <param name="rightClick">Determine whether this should be treated as a right click (which usually invokes a context menu).</param>
        </member>
        <member name="M:SolidShineUi.CheckBox.PerformClick(System.Boolean)">
            <summary>
            If the button is prepared by PerformPress, perform the Click actions, including raising the Click event.
            </summary>
            <param name="rightClick">Determine whether this should be treated as a right click (which usually invokes a context menu).</param>
        </member>
        <member name="M:SolidShineUi.CheckBox.DoClick">
            <summary>
            Perform a click programattically. The checkbox responds the same way as if it was clicked by the user.
            </summary>
        </member>
        <member name="T:SolidShineUi.CheckState">
            <summary>
            Represents the current state of a CheckBox.
            </summary>
        </member>
        <member name="F:SolidShineUi.CheckState.Unchecked">
            <summary>
            The CheckBox is unchecked. Nothing is displayed in the box.
            </summary>
        </member>
        <member name="F:SolidShineUi.CheckState.Checked">
            <summary>
            The CheckBox is checked. A check mark is displayed in the box.
            </summary>
        </member>
        <member name="F:SolidShineUi.CheckState.Indeterminate">
            <summary>
            The CheckBox is indeterminate. A square is displayed in the box.
            </summary>
        </member>
        <member name="T:SolidShineUi.ChromeButtons">
            <summary>
            A control that hosts the caption buttons for a <see cref="T:SolidShineUi.FlatWindow"/>.
            These buttons are the Minimize, Maximize/Restore, and Close buttons visible at the top corner of most windows.
            </summary>
            <summary>
            ChromeButtons
            </summary>
        </member>
        <member name="M:SolidShineUi.ChromeButtons.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidShineUi.ChromeButtons"/> class.
            </summary>
        </member>
        <member name="P:SolidShineUi.ChromeButtons.ButtonPadding">
            <summary>
            Gets or sets the internal padding in each of the caption buttons.
            </summary>
        </member>
        <member name="P:SolidShineUi.ChromeButtons.MarginButton">
            <summary>
            Gets or sets the margin (spacing) around each of the caption buttons.
            </summary>
        </member>
        <member name="T:SolidShineUi.ChromeButtons.CaptionType">
            <summary>
            Determines which caption buttons will appear on a window.
            </summary>
        </member>
        <member name="F:SolidShineUi.ChromeButtons.CaptionType.Full">
            <summary>
            Display the close, maximize/restore, and minimize buttons.
            </summary>
        </member>
        <member name="F:SolidShineUi.ChromeButtons.CaptionType.Close">
            <summary>
            Display only the close button.
            </summary>
        </member>
        <member name="F:SolidShineUi.ChromeButtons.CaptionType.MinimizeClose">
            <summary>
            Display only the close and minimize buttons.
            </summary>
        </member>
        <member name="F:SolidShineUi.ChromeButtons.CaptionType.MaximizeClose">
            <summary>
            Display only the close and maximize/restore buttons.
            </summary>
        </member>
        <member name="F:SolidShineUi.ChromeButtons.CaptionType.None">
            <summary>
            Do not display any caption buttons.
            (Note that hiding caption buttons alone doesn't prevent users from being able to perform their actions via other methods.)
            </summary>
        </member>
        <member name="P:SolidShineUi.ChromeButtons.DisplayType">
            <summary>
            Gets or sets the visibility of the caption buttons, specifically which buttons should be visible.
            </summary>
            <value>The visible buttons.</value>
            <remarks>
            Note that this does not disable these functions from being possible with a window, it only hides the buttons in the top corner.
            Please use <see cref="M:SolidShineUi.FlatWindow.DisableMaximizeAction"/> and <see cref="M:SolidShineUi.FlatWindow.DisableMinimizeAction"/> to disable actions in a window.
            </remarks>
        </member>
        <member name="P:SolidShineUi.ChromeButtons.SelectionBrush">
            <summary>
            Get or set the brush used when a button is being clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.ChromeButtons.HighlightBrush">
            <summary>
            Get or set the brush used when a button is being highlighted.
            </summary>
        </member>
        <member name="M:SolidShineUi.ChromeButtons.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.ClickSelectTextBox">
            <summary>
            A TextBox where all the text is automatically selected when the text box gets focus (i.e. mouse click or keyboard focus).
            </summary>
        </member>
        <member name="M:SolidShineUi.ClickSelectTextBox.#ctor">
            <summary>
            Creates a new ClickSelectTextBox and defines the default event handlers.
            </summary>
        </member>
        <member name="P:SolidShineUi.ClickSelectTextBox.SelectOnFocus">
            <summary>
            Get or set whether all text will be selected when the text box receives focus.
            </summary>
        </member>
        <member name="F:SolidShineUi.ClickSelectTextBox.SelectOnFocusProperty">
            <summary>
            The dependency property backing its related property. See <see cref="P:SolidShineUi.ClickSelectTextBox.SelectOnFocus"/> for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.ClickSelectTextBox.MouseButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handler for when the left mouse button is pressed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">Event arguments representing the mouse button being pressed.</param>
        </member>
        <member name="M:SolidShineUi.ClickSelectTextBox.SelectAllText(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Locate the TextBox and have it select all text.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">Event arguments providing details about the event.</param>
        </member>
        <member name="T:SolidShineUi.ColorPaletteFileReader">
            <summary>
            A class containing methods that can be used to load colors from various color palette file formats.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.LoadPalFilePalette(System.String)">
            <summary>
            Loads colors from a .pal color palette file. Supports JASC and RIFF file types.
            </summary>
            <param name="filename">The file to load.</param>
            <exception cref="T:System.FormatException">Thrown if the file format doesn't match the JASC or RIFF types.</exception>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.LoadRiffPalette(System.String)">
            <summary>
            Loads colors from a color palette file formatted using the RIFF format.
            </summary>
            <param name="filename">The file to load.</param>
            <exception cref="T:System.FormatException">Thrown if the file doesn't match the expected format.</exception>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.LoadJascPalette(System.String)">
            <summary>
            Loads colors from a color palette file formatted using the JASC format.
            </summary>
            <param name="filename">The file to load.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the file cannot be opened for reading.</exception>
            <exception cref="T:System.FormatException">Thrown if the file doesn't match the expected format.</exception>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.LoadRawPalette(System.String)">
            <summary>
            Loads colors from a color palette file, reading from raw binary bytes.
            </summary>
            <param name="filename">The file to load.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the file cannot be opened for reading.</exception>
            <exception cref="T:System.FormatException">Thrown if the file doesn't match the expected format.</exception>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.ReadInt16(System.IO.Stream)">
            <summary>
            Reads a 16bit unsigned integer in big-endian format.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <returns>The unsigned 16bit integer cast to an <c>Int32</c>.</returns>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.ReadInt32(System.IO.Stream)">
            <summary>
            Reads a 32bit unsigned integer in big-endian format.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <returns>The unsigned 32bit integer cast to an <c>Int32</c>.</returns>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.LoadPhotoshopPalette(System.String)">
            <summary>
            Loads colors from a Photoshop color palette file (.aco). Note that Adobe Swatch Exchange files (.ase) are not supported.
            </summary>
            <param name="filename">The file to load.</param>
            <exception cref="T:System.FormatException">Thrown if the file doesn't match the expected format.</exception>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.ReadString(System.IO.Stream,System.Int32)">
            <summary>
            Reads a unicode string of the specified length.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <param name="length">The number of characters in the string.</param>
            <returns>The string read from the stream.</returns>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.LoadPaintNetPalette(System.String)">
            <summary>
            Loads colors from a PAINT.NET or basic HEX color palette file (.txt;.hex).
            </summary>
            <param name="filename">The file to load.</param>
            <exception cref="T:System.ArgumentException">Thrown if the file cannot be opened.</exception>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.LoadGimpPalette(System.String)">
            <summary>
            Loads colors from a GIMP color palette file (.gpl).
            </summary>
            <param name="filename">The file to load.</param>
            <exception cref="T:System.FormatException">Thrown if the file doesn't match the GIMP file format (the first line must say "gimp palette").</exception>
            <exception cref="T:System.ArgumentException">Thrown if the file cannot be opened.</exception>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.LoadPowerToysColorList(System.String)">
            <summary>
            Load a color palette from a text file (.txt) that was exported by the Microsoft PowerToys Color Picker tool.
            </summary>
            <param name="filename">The name of the file to read.</param>
            <returns>A list of colors, if the formats in the palette could be read. Otherwise, an empty list if there were no compatible formats.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the file could not be opened for reading.</exception>
            <remarks>
            Only the color formats HEX, RGB, and HSV are understood; if an exported file does not contain one of these formats,
            then no colors will be read and empty list will be returned.
            This function will not throw an exception for a file that could not be parsed or if there were no understood formats; if these issues occur,
            then you'll see an empty list returned. A non-empty list will be returned if the file could be parsed and a format understood.
            <para></para>
            This is built to support the files exported by PowerToys version 0.57.
            </remarks>
        </member>
        <member name="M:SolidShineUi.ColorPaletteFileReader.LoadBitmapImagePalette(System.String)">
            <summary>
            Loads colors from the palette present in TIFF and GIF image files (.tif;.tiff;.gif). Only the first 256 colors are loaded.
            </summary>
            <param name="filename">The file to load.</param>
            <exception cref="T:System.ArgumentException">Thrown if the file cannot be opened.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if a null value is passed in or if the file cannot be opened.</exception>
            <exception cref="T:System.UriFormatException">Thrown if the file string does not appear to be a path or URL.</exception>
        </member>
        <member name="T:SolidShineUi.HighContrastOption">
            <summary>
            Available options for creating high-contrast color schemes. These are based upon color schemes available through Windows's High Contrast options.
            </summary>
        </member>
        <member name="F:SolidShineUi.HighContrastOption.WhiteOnBlack">
            <summary>
            A white foreground on a black background.
            </summary>
        </member>
        <member name="F:SolidShineUi.HighContrastOption.GreenOnBlack">
            <summary>
            A green (and white) foreground on a black background.
            </summary>
        </member>
        <member name="F:SolidShineUi.HighContrastOption.BlackOnWhite">
            <summary>
            A black foreground on a white background.
            </summary>
        </member>
        <member name="T:SolidShineUi.ColorScheme">
            <summary>
            A collection of colors and other settings that can be used to set the color and appearance of various Solid Shine UI controls.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorScheme.#ctor">
            <summary>
            Create a color scheme with no colors preset; default values are all grey. Can be used to custom build a scheme color by color.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorScheme.#ctor(System.Windows.Media.Color)">
            <summary>
            Create a color scheme with a single preset color as the basis. All other colors in the scheme are based off this color.
            </summary>
            <param name="mainColor">The main base color for this color scheme.</param>
        </member>
        <member name="M:SolidShineUi.ColorScheme.#ctor(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Create a color scheme with a preset color for the basis, and an additional preset color to use as a secondary accent. All other colors are based off one of these two colors.
            </summary>
            <param name="mainColor">The main base color for this color scheme.</param>
            <param name="accentColor">The base color to use as the accent color for this color scheme.</param>
        </member>
        <member name="P:SolidShineUi.ColorScheme.IsHighContrast">
            <summary>
            Get or set whether this is a high-contrast color scheme. Some controls will differ their appearnce if this color scheme is a high contrast one.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.MainColor">
            <summary>
            This is the main interface color, and generally the most vibrant. Despite the name, this color should not be used too commonly. With High Contrast color schemes, this will be the same as BackgroundColor.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.SecondaryColor">
            <summary>
            This is the secondary interface color, which can be used to differentiate regions of a user interface by color.
            Do not use this with High Contrast color schemes (use <see cref="P:SolidShineUi.ColorScheme.IsHighContrast"/> to check if this color scheme is a high contrast theme.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.BackgroundColor">
            <summary>
            The primary background color of a window or pane.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.SelectionColor">
            <summary>
            The color used for when certain elements are being clicked on; this a darker color than the main color, and is generally used for the caption buttons of a window.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.HighlightColor">
            <summary>
            The color used for when certain elements have focus or have the mouse over them; this is a darker color than the main color, and is generally used for the caption buttons of a window.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.BorderColor">
            <summary>
            The color used for the borders of elements and windows.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.SecondHighlightColor">
            <summary>
            The color used for when certain elements have focus or have the mouse over them; this is a lighter color than the main color, and is generally used by many UI elements.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.ThirdHighlightColor">
            <summary>
            The color used for when certain elements are being clicked on; this is a lighter color than the main color, and is generally used by many UI elements.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.LightBackgroundColor">
            <summary>
            The color used for the background of certain elements. This background color is lighter than the main background color.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.ForegroundColor">
            <summary>
            The main color used for foreground elements, such as text. Ideally, this color should contrast greatly against the background colors and also the main color.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.ItemColor">
            <summary>
            This color is not used in Solid Shine UI, and is included for backwards compatibility reasons. You can utilize this color for your own custom needs, if desired.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.LightDisabledColor">
            <summary>
            The color to display for items that are disabled or not usable. This color is primarily used for the backgrounds of disabled elements.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.DarkDisabledColor">
            <summary>
            The color to display for items that are disabled or not usable. This color is primarily used for the borders and foregrounds of disabled elements.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.AccentMainColor">
            <summary>
            This is the main interface accent color, and generally the most vibrant. With High Contrast color schemes, this will be the same as AccentBackgroundColor.
            Accent colors can be used wherever you wish to add more contrasting color to your UI.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.AccentSecondaryColor">
            <summary>
            This is the secondary interface accent color, which can be used to differentiate regions of a user interface by color.
            Do not use this with High Contrast color schemes (use <see cref="P:SolidShineUi.ColorScheme.IsHighContrast"/> to check if this color scheme is a high contrast theme.
            Accent colors can be used wherever you wish to add more contrasting color to your UI.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.AccentBackgroundColor">
            <summary>
            The primary background accent color of a window or pane.
            Accent colors can be used wherever you wish to add more contrasting color to your UI.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.AccentHighlightColor">
            <summary>
            The accent color used for when certain elements have focus or have the mouse over them; this is a darker color than the main color, and is generally used for the caption buttons of a window.
            Accent colors can be used wherever you wish to add more contrasting color to your UI.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.AccentSelectionColor">
            <summary>
            The accent color used for when certain elements are being clicked on; this a darker color than the main color, and is generally used for the caption buttons of a window.
            Accent colors can be used wherever you wish to add more contrasting color to your UI.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.AccentBorderColor">
            <summary>
            The accent color used for the borders of elements and windows.
            Accent colors can be used wherever you wish to add more contrasting color to your UI.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.AccentSecondHighlightColor">
            <summary>
            The accent color used for when certain elements have focus or have the mouse over them; this is a lighter color than the main color, and is generally used by many UI elements.
            Accent colors can be used wherever you wish to add more contrasting color to your UI.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.AccentThirdHighlightColor">
            <summary>
            The accent color used for when certain elements are being clicked on; this is a lighter color than the main color, and is generally used by many UI elements.
            Accent colors can be used wherever you wish to add more contrasting color to your UI.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.AccentLightBackgroundColor">
            <summary>
            The accent color used for the background of certain elements. This background color is lighter than the main background color.
            Accent colors can be used wherever you wish to add more contrasting color to your UI.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.WindowTitleBarColor">
            <summary>
            This color is used for the title bar of windows, while they are active (as in, in the foreground and with focus).
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.WindowTitleBarTextColor">
            <summary>
            This color is used for the text in the title bar of windows, as well as for the caption buttons' icons.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.WindowInactiveColor">
            <summary>
            This color is used for the titlebar of windows, while they are inactive (as in, does not have focus).
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorScheme.MenusUseAccent">
            <summary>
            Determine if menus should use some accent colors while highlighting items.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorScheme.CreateLightTheme">
            <summary>
            Create a premade light theme color scheme. Lighter gray colors are used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.ColorScheme.CreateLightTheme(System.Windows.Media.Color)">
            <summary>
            Create a premade light theme color scheme. Lighter gray colors are used, and a custom accent color can be provided to add some more color.
            </summary>
            <param name="accentColor">The accent color to use with the light theme, to add more color to certain elements.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.ColorScheme.CreateDarkTheme">
            <summary>
            Create a premade dark theme color scheme. Darker gray colors are used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.ColorScheme.CreateDarkTheme(System.Windows.Media.Color)">
            <summary>
            Create a premade dark theme color scheme. Darker gray colors are used, and a custom accent color can be provided to add some more color.
            </summary>
            <param name="accentColor">The accent color to use with the dark theme, to add more color to certain elements.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.ColorScheme.GetHighContrastScheme(SolidShineUi.HighContrastOption)">
            <summary>
            Create a color scheme with high-contrast colors, based upon one of the available options.
            </summary>
            <param name="hco">The high-contrast scheme option to create.</param>
            <returns></returns>
        </member>
        <member name="T:SolidShineUi.ColorsHelper">
            <summary>
            Contains a collection of helper functions in relation to colors.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.CreateFromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a color based upon RGB values.
            </summary>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.CreateFromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a color based upon RGB values, with alpha transparency as well.
            </summary>
            <param name="a">The alpha value (transparency) of the color.</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.CreateFromHex(System.String)">
            <summary>
            Create a color based upon a hex string.
            </summary>
            <param name="hex">The hex string. Should have 3, 6, or 8 characters (i.e. "FFF", "FF00FF", or "FF00FF00"). The starting hash is also allowed (such as "#FF00FF").</param>
            <exception cref="T:System.FormatException">Thrown if the string is not a hex string, or incorrectly formatted (including if the string is not of the length 3, 6, or 8).</exception>
            <remarks>
            Note that the expected format for the strings are RGB for 3-character and 6-character strings, and ARGB (with A first) for 8-character strings.
            RGBA strings will be read incorrectly, so verify the format that another location displays/exports hex strings if you're experiencing unexpected results.
            </remarks>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.CreateFromOle(System.Int32)">
            <summary>
            Create a color based upon an OLE color value.
            </summary>
            <param name="oleColor">The OLE color value to translate.</param>
            <returns>A color that is the translation of the OLE color value.</returns>
            <remarks>Most modern programs will not have much use or need for the OLE color value, but Microsoft Office does still use this in some areas/APIs.</remarks>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.ToHexString(System.Windows.Media.Color)">
            <summary>
            Returns an RGB hex triplet string that corresponds to this color. Note that A (alpha) is dropped, please use <see cref="M:SolidShineUi.ColorsHelper.ToHexStringWithAlpha(System.Windows.Media.Color)"/> to keep the A value as well..
            </summary>
            <param name="color">The color to convert to a hex string.</param>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.ToHexStringWithAlpha(System.Windows.Media.Color)">
            <summary>
            Returns an ARGB hex string that corresponds to this color. "A" refers to alpha, or transparency.
            </summary>
            <param name="color">The color to convert to a hex string.</param>
            <remarks>
            Note that this returns ARGB, which is the same format that <see cref="M:SolidShineUi.ColorsHelper.CreateFromHex(System.String)"/> supports.
            If using this string with another service, please make sure they import strings as ARGB, not RGBA.
            </remarks>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.ToOleColor(System.Windows.Media.Color)">
            <summary>
            Get the OLE color value that translates to this color.
            </summary>
            <param name="color">The color to translate to an OLE color value.</param>
            <returns>A color that is the translation of the OLE color value.</returns>
            <remarks>Most modern programs will not have much use or need for the OLE color value, but Microsoft Office does still use this in some areas/APIs.</remarks>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.Blend(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>Get a color by blending one color onto another color by a specified amount.</summary>
            <param name="color">The color to blend onto the background color.</param>
            <param name="backColor">The color that is the background or base (that is being blended onto).</param>
            <param name="amount">How much of <paramref name="color"/> to blend onto <paramref name="backColor"/>.
            Must be between 0 and 1: 0 leaves only the back color (new color blended in 0%), 0.5 is a perfect blend between the two colors, and 1 leaves only the new color (blended in 100%).</param>
            <returns>The color that is the result of blending the two colors together.</returns>
            <remarks>
            The alpha value of the new color will be 255 (opaque). No gamma correction is applied.
            </remarks>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.ToHSV(System.Windows.Media.Color,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get the HSV values for a particular color.
            </summary>
            <param name="color">The color to convert to HSV.</param>
            <param name="hue">The hue value of the color.</param>
            <param name="saturation">The saturation value of the color.</param>
            <param name="value">The value (also known as brightness) value of the color.</param>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.CreateFromHSV(System.Double,System.Double,System.Double)">
            <summary>
            Create a color based upon HSV values.
            </summary>
            <param name="hue">The hue of the color.</param>
            <param name="saturation">The saturation of the color.</param>
            <param name="value">The value of the color.</param>
            <returns>Return a color that corresponds to these HSV values.</returns>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Blue">
            <summary>A preselected color, good to use for a color scheme. Has hex string 168FE5.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Cyan">
            <summary>A preselected color, good to use for a color scheme. Has hex string 00AEDB.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.GrayBlue">
            <summary>A preselected color. Has hex string 5C8ED3.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Yellow">
            <summary>A preselected color, good to use for a color scheme. Has hex string FFBE00.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Orange">
            <summary>A preselected color, good to use for a color scheme. Has hex string FF7000.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Red">
            <summary>A preselected color, good to use for a color scheme. Has hex string E34234.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.SkyBlue">
            <summary>A preselected color, good to use for a color scheme. Has hex string 93D2FA.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Pink">
            <summary>A preselected color, good to use for a color scheme. Has hex string FDBCB9.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Green">
            <summary>A preselected color, good to use for a color scheme. Has hex string 228B22.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.DullGreen">
            <summary>A preselected color, good to use for a color scheme. Has hex string 21B17E.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.LightGreen">
            <summary>A preselected color, good to use for a color scheme. Has hex string 74C365.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.GrayGreen">
            <summary>A preselected color, good to use for a color scheme. Has hex string 6C7C59.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.LightViolet">
            <summary>A preselected color, good to use for a color scheme. Has hex string 947CFB.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Violet">
            <summary>A preselected color, good to use for a color scheme. Has hex string 7F66AF.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Purple">
            <summary>A preselected color, good to use for a color scheme. Has hex string B571C7.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Gray">
            <summary>A preselected color, good to use for a color scheme. Has hex string 808080.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.RedBrown">
            <summary>A preselected color, good to use for a color scheme. Has hex string 954535.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Salmon">
            <summary>A preselected color, good to use for a color scheme. Has hex string D95E40.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Brown">
            <summary>A preselected color, good to use for a color scheme. Has hex string B05010.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.White">
            <summary>A preselected color. Has hex string FFFFFF.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Black">
            <summary>A preselected color. Has hex string 000000.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.LightGray">
            <summary>A preselected color, good to use for a color scheme. Has hex string C0C0C0.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Olive">
            <summary>A preselected color. Has hex string 808000.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.DarkGray">
            <summary>A preselected color, good to use for a color scheme. Has hex string 666666.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.Gold">
            <summary>A preselected color. Has hex string FFC22C.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.HighContrastLightBlue">
            <summary>A color used in high contrast color schemes, which mirrors Windows's high contrast themes. Has hex string 1AEBFF.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.HighContrastPurple">
            <summary>A color used in high contrast color schemes, which mirrors Windows's high contrast themes. Has hex string 37006E.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.HighContrastLightPurple">
            <summary>A color used in high contrast color schemes, which mirrors Windows's high contrast themes. Has hex string 9B7FB6.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.HighContrastGreen">
            <summary>A color used in high contrast color schemes, which mirrors Windows's high contrast themes. Has hex string 00FF00.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.HighContrastLightGreen">
            <summary>A color used in high contrast color schemes, which mirrors Windows's high contrast themes. Has hex string 81FF81.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.HighContrastBlue">
            <summary>A color used in high contrast color schemes, which mirrors Windows's high contrast themes. Has hex string 0000FF.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.HighContrastGray">
            <summary>A color used in high contrast color schemes, which mirrors Windows's high contrast themes. Has hex string C0C0C0.</summary>
        </member>
        <member name="P:SolidShineUi.ColorsHelper.HighContrastRed">
            <summary>A color used in high contrast color schemes, which mirrors Windows's high contrast themes. Has hex string 900000.</summary>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.GetX11Color(System.String)">
            <summary>
            Get a color from the X11 Color table (<c>System.Windows.Media.Colors</c>) with a particular name.
            </summary>
            <param name="colorName">The name of the color to get.</param>
            <returns>A Color that corresponds to that name.</returns>
            <exception cref="T:System.ArgumentException">Thrown if there is no X11 color with that name.</exception>
            <remarks>Make sure to enter the name as it appears in the class <c>System.Windows.Media.Colors</c>, with no spaces or alternate spellings.</remarks>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.ToBrush(System.Windows.Media.Color)">
            <summary>
            Get a new SolidColorBrush with this color.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.GetHexString(System.Windows.Media.Color)">
            <summary>
            Get a hex triplet string for this color. Does not include the hash symbol, nor the alpha value.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.GetHexStringWithAlpha(System.Windows.Media.Color)">
            <summary>
            Get a hex string for this color, including the alpha value, as ARGB. Does not include the hash symbol.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorsHelper.GetInversion(System.Windows.Media.Color)">
            <summary>
            Get the color that is the invert of this color. The A (alpha) value of the color is also kept.
            </summary>
        </member>
        <member name="T:SolidShineUi.ColorToBrushConverter">
            <summary>
            Converts a Color into a SolidColorBrush.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a Color into a SolidColorBrush.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a SolidColorBrush to its Color. If the passed in value is not a SolidColorBrush, this returns null.
            </summary>
        </member>
        <member name="T:SolidShineUi.ContextMenu">
            <summary>
            A popup menu that can display items specific to the context it's invoked by, with a visual style that matches the rest of the Solid Shine UI controls.
            </summary>
        </member>
        <member name="E:SolidShineUi.ContextMenu.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="M:SolidShineUi.ContextMenu.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.ContextMenu.ColorScheme">
            <summary>
            Get or set the color scheme used for this control. The color scheme can quickly apply a whole visual style to your control.
            </summary>
        </member>
        <member name="M:SolidShineUi.ContextMenu.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="M:SolidShineUi.ContextMenu.ApplyColorScheme(SolidShineUi.HighContrastOption)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="hco">The high-contrast color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.ContextMenu.MenuBackground">
            <summary>
            Get or set the brush used for the background of the menu's drop-down area. This is different from the Background brush, which is not used in a ContextMenu.
            </summary>
        </member>
        <member name="P:SolidShineUi.ContextMenu.DisabledBrush">
            <summary>
            Get or set the brush used for the foreground/text of a child menu item when it is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.ContextMenu.BorderBrush">
            <summary>
            Get or set the brush used for the border of the menu's drop-down area.
            </summary>
        </member>
        <member name="P:SolidShineUi.ContextMenu.HighlightBrush">
            <summary>
            Get or set the brush used for the top-level menu items in the menu bar. This is not used in a ContextMenu; instead look at the HighlightSubitemBrush property.
            </summary>
        </member>
        <member name="P:SolidShineUi.ContextMenu.HighlightSubitemBrush">
            <summary>
            Get or set the brush used for menu items that aren't top-level on the menu bar, when the mouse is over them or they have keyboard focus.
            </summary>
        </member>
        <member name="P:SolidShineUi.ContextMenu.CheckedBrush">
            <summary>
            Get or set the brush to use for the check highlight for checked menu items.
            </summary>
        </member>
        <member name="P:SolidShineUi.ContextMenu.RoundedCorners">
            <summary>
            Get or set if the context menu has rounded corners. When true, each corner has a corner radius of 4.
            </summary>
        </member>
        <member name="P:SolidShineUi.ContextMenu.VerticalScrollBarVisibility">
            <summary>
            Get or set if a vertical scroll bar is visible for the context menu.
            If the context menu is longer than the screen, the scroll bar can be used.
            </summary>
        </member>
        <member name="T:SolidShineUi.ColorPickerDialog">
            <summary>
            A dialog for the user to be able to select a color, either from a preset list, or via sliders, an image source, or from a color palette file.
            </summary>
            <summary>
            ColorPickerDialog
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorPickerDialog.#ctor">
            <summary>
            Create a ColorPickerDialog. Please use the constructor with the ColorScheme argument.
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorPickerDialog.#ctor(SolidShineUi.ColorScheme)">
            <summary>
            Create a ColorPickerDialog.
            </summary>
            <param name="cs">The ColorScheme to use with this dialog.</param>
        </member>
        <member name="M:SolidShineUi.ColorPickerDialog.#ctor(SolidShineUi.ColorScheme,System.Windows.Media.Color)">
            <summary>
            Create a ColorPickerDialog.
            </summary>
            <param name="cs">The ColorScheme to use with this dialog.</param>
            <param name="color">The Color to preset as the selected color (i.e. as an existing or default value).</param>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.SelectedColor">
            <summary>
            Get or set the color that is selected in the dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.DialogResult">
            <summary>
            Get or set the result of this dialog when closed. Set to true when the user clicks OK.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.ShowSwatchesTab">
            <summary>
            Get or set if the Swatches tab is visible in the dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.ShowSlidersTab">
            <summary>
            Get or set if the Sliders tab is visible in the dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.ShowImageTab">
            <summary>
            Get or set if the From Image tab is visible in the dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.ShowPaletteFileTab">
            <summary>
            Get or set if the Palette File tab is visible in the dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.SwatchesTabTitle">
            <summary>
            Get or set the title of the Swatches tab. Default is "Swatches".
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.SlidersTabTitle">
            <summary>
            Get or set the title of the Sliders tab. Default is "Sliders".
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.ImageTabTitle">
            <summary>
            Get or set the title of the From Image tab. Default is "From Image".
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.PaletteFileTabTitle">
            <summary>
            Get or set the title of the Palette File tab. Default is "Palette File".
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.ShowTransparencyControls">
            <summary>
            Get or set if transparency controls should be shown in the dialog. If true, then the user will be able to select and change the transparency (alpha) value of the selected color.
            </summary>
        </member>
        <member name="F:SolidShineUi.ColorPickerDialog.ShowTransparencyControlsProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.SwatchesResetTransparency">
            <summary>
            Get or set if clicking on a swatch in the Swatches tab resets the transparency (alpha) value to 255, or totally opaque. If not, the transparency value remains unchanged.
            </summary>
        </member>
        <member name="F:SolidShineUi.ColorPickerDialog.SwatchesResetTransparencyProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.TransparencyLabel">
            <summary>
            Get or set the label to display next to the Transparency slider. Default is "Transparency:".
            </summary>
        </member>
        <member name="F:SolidShineUi.ColorPickerDialog.TransparencyLabelProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.SelectedColorLabel">
            <summary>
            Get or set the label to display next to the currently selected color. Default is "Selected Color:".
            </summary>
        </member>
        <member name="F:SolidShineUi.ColorPickerDialog.SelectedColorLabelProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.CurrentColorLabel">
            <summary>
            Get or set the label to display next to the current/preset color (as in, the color that the dialog was loaded with). Default is "Current Color:".
            </summary>
        </member>
        <member name="F:SolidShineUi.ColorPickerDialog.CurrentColorLabelProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.InvertButtonLabel">
            <summary>
            Get or set the label to display on the "Invert" button in the Sliders tab; clicking this button inverts the current color. Default is "Invert".
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.OkButtonLabel">
            <summary>
            Get or set the label to display on the "Invert" button in the Sliders tab; clicking this button inverts the current color. Default is "Invert".
            </summary>
        </member>
        <member name="P:SolidShineUi.ColorPickerDialog.CancelButtonLabel">
            <summary>
            Get or set the label to display on the "Invert" button in the Sliders tab; clicking this button inverts the current color. Default is "Invert".
            </summary>
        </member>
        <member name="M:SolidShineUi.ColorPickerDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.FontSelectDialog">
            <summary>
            A dialog for the user to select a font, as well as being able to choose a font size and styling if desired.
            </summary>
            <summary>
            FontSelectDialog
            </summary>
        </member>
        <member name="M:SolidShineUi.FontSelectDialog.#ctor">
            <summary>
            Create a FontSelectDialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.DialogResult">
            <summary>
            Get or set the result of the dialog. Set to true if the user clicked OK.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.PreserveFontFallback">
            <summary>
            If a font fallback sequence is defined in the FontFamily, preserve it even if the user changes the font. If preserved, only the first found font will be changed and the remaining values will be preserved.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.SelectedFontFamily">
            <summary>
            Get or set the font family selected in the dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.SelectedFontWeight">
            <summary>
            Get or set the selected font weight in the dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.SelectedFontSize">
            <summary>
            Get or set the selected font size in the dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.SelectedFontStyle">
            <summary>
            Get or set the selected font style in the dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.SelectedTextDecorations">
            <summary>
            Get or set the selected text decorations in the dialog.
            </summary>
        </member>
        <member name="M:SolidShineUi.FontSelectDialog.LoadFromControl(System.Windows.Controls.Control)">
            <summary>
            Load in the selected values of this dialog from a control.
            </summary>
            <param name="element">The control to load from.</param>
            <remarks>If the control is a TextBox, it will also load in the TextDecorations; otherwise, no text decorations are loaded.</remarks>
        </member>
        <member name="M:SolidShineUi.FontSelectDialog.LoadFromControl(System.Windows.Controls.TextBlock)">
            <summary>
            Load in the selected values of this dialog from a TextBlock control.
            </summary>
            <param name="element">The TextBlock to load from.</param>
        </member>
        <member name="M:SolidShineUi.FontSelectDialog.SetToControl(System.Windows.Controls.Control)">
            <summary>
            Set a control's font properties to match the selected values of the dialog.
            </summary>
            <param name="element">The control to set.</param>
            <remarks>If the control is a TextBox, it will also set the TextDecorations property.</remarks>
        </member>
        <member name="M:SolidShineUi.FontSelectDialog.SetToControl(System.Windows.Controls.TextBlock)">
            <summary>
            Set a TextBlock's font properties to match the selected values of the dialog.
            </summary>
            <param name="element">The TextBlock to set.</param>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.ShowStyles">
            <summary>
            Get or set if the font styles section of the dialog is visible.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.ShowDecorations">
            <summary>
            Get or set if the text decorations section of the dialog is visible.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.ShowWeights">
            <summary>
            Get or set if the font weights section of the dialog is visible.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.ShowSizes">
            <summary>
            Get or set if the font sizes section of the dialog is visible.
            </summary>
        </member>
        <member name="F:SolidShineUi.FontSelectDialog.AvailableFontWeights">
            <summary>
            The list of font weights that are displayed in the dialog. Note that there's a lot of repeats of FontWeights in the base enum.
            </summary>
        </member>
        <member name="P:SolidShineUi.FontSelectDialog.PreviewText">
            <summary>
            Get or set the preview text displayed at the bottom of the dialog, to allow the user to see how their font selections look.
            </summary>
        </member>
        <member name="M:SolidShineUi.FontSelectDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.MessageDialog">
            <summary>
            A dialog to display a message to the user, and potentially allowing them to select from a few options via selecting the appropriate button. Similar to the generic WPF MessageBox.
            </summary>
            <summary>
            MessageDialog
            </summary>
        </member>
        <member name="M:SolidShineUi.MessageDialog.#ctor">
            <summary>
            Create a new MessageDialog.
            </summary>
        </member>
        <member name="M:SolidShineUi.MessageDialog.#ctor(SolidShineUi.ColorScheme)">
            <summary>
            Create a new MessageDialog, with the ColorScheme property preset.
            </summary>
            <param name="cs">The ColorScheme to use for this MessageDialog.</param>
        </member>
        <member name="M:SolidShineUi.MessageDialog.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="M:SolidShineUi.MessageDialog.ApplyColorScheme(SolidShineUi.HighContrastOption)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="hco">The high-contast color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.MessageDialog.ColorScheme">
            <summary>
            The color scheme to use with the message dialog.
            </summary>
        </member>
        <member name="M:SolidShineUi.MessageDialog.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.MessageDialog.OkButtonText">
            <summary>Get or set the text to display in the OK button. If empty, the button will not be displayed (unless the other buttons are also not displayed, in which case this one will be).</summary>
        </member>
        <member name="P:SolidShineUi.MessageDialog.CancelButtonText">
            <summary>Get or set the text to display in the Cancel button. If empty, the button will not be displayed.</summary>
        </member>
        <member name="P:SolidShineUi.MessageDialog.DiscardButtonText">
            <summary>Get or set the text to display in the Discard button. If empty, the button will not be displayed.</summary>
        </member>
        <member name="P:SolidShineUi.MessageDialog.ExtraButton1Text">
            <summary>Get or set the text to display in the first extra button. If empty, the button will not be displayed.</summary>
        </member>
        <member name="P:SolidShineUi.MessageDialog.ExtraButton2Text">
            <summary>Get or set the text to display in the second extra button. If empty, the button will not be displayed.</summary>
        </member>
        <member name="P:SolidShineUi.MessageDialog.ExtraButton3Text">
            <summary>Get or set the text to display in the third extra button. If empty, the button will not be displayed.</summary>
        </member>
        <member name="P:SolidShineUi.MessageDialog.DialogResult">
            <summary>Get the result of the message dialog, indicating which button the user pressed.</summary>
        </member>
        <member name="P:SolidShineUi.MessageDialog.Message">
            <summary>Get or set the text to display for the message.</summary>
        </member>
        <member name="P:SolidShineUi.MessageDialog.CheckBoxText">
            <summary>Get or set the text to display with the checkbox. If empty, the checkbox will not be displayed.</summary>
        </member>
        <member name="P:SolidShineUi.MessageDialog.CheckBoxValue">
            <summary>Get or set the checked state of the checkbox. Use the checkbox to display a "Remember my choice"-style option.</summary>
        </member>
        <member name="P:SolidShineUi.MessageDialog.Image">
            <summary>Get or set the image to display with the message.</summary>
        </member>
        <member name="M:SolidShineUi.MessageDialog.ShowDialog">
            <summary>
            Display this message dialog. Use the properties such as <c>OkButtonText</c> or <c>CancelButtonText</c> and <c>Message</c> to control the appearance of the message dialog.
            </summary>
        </member>
        <member name="M:SolidShineUi.MessageDialog.ShowDialog(System.String,SolidShineUi.ColorScheme,System.Windows.Window,System.String,System.Boolean,SolidShineUi.MessageDialogImage,SolidShineUi.MessageDialogResult,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Display this message dialog. This is an obsolete method, please use one of the other ones.
            </summary>
            <param name="message">The message to display.</param>
            <param name="colorScheme">The color scheme to use with the dialog. Use <c>null</c> if already set via property.</param>
            <param name="owner">The owner window of this dialog. Use <c>null</c> if already set via property.</param>
            <param name="title">The window title for this dialog. Use <c>null</c> if already set via property.</param>
            <param name="showTwoBottomButtons">Determine if one or two buttons should be shown (either [OK], or [OK] and [Cancel]). If false, only OK button is displayed.</param>
            <param name="image">The image to display with this dialog.</param>
            <param name="defaultButton">The button to have selected by default when the dialog opens. (DOESN'T CURRENTLY WORK)</param>
            <param name="customOkButtonText">The text to use in the OK button. Use <c>null</c> if already set via property.</param>
            <param name="customCancelButtonText">The text to use in the Cancel button. Use <c>null</c> if already set via property.</param>
            <param name="extraButton1Text">The text to use in the first extra button. If this is set to a null or empty string, this button will not be displayed.</param>
            <param name="extraButton2Text">The text to use in the second extra button. If this is set to a null or empty string, this button will not be displayed.</param>
            <param name="extraButton3Text">The text to use in the third extra button. If this is set to a null or empty string, this button will not be displayed.</param>
            <param name="checkBoxText">The text to use in the check box. If this is set to a null or empty string, the check box will not be displayed.</param>
        </member>
        <member name="M:SolidShineUi.MessageDialog.ShowDialog(System.String,SolidShineUi.ColorScheme,System.Windows.Window,System.String,SolidShineUi.MessageDialogButtonDisplay,SolidShineUi.MessageDialogImage,SolidShineUi.MessageDialogResult,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Display this message dialog.
            </summary>
            <param name="message">The message to display.</param>
            <param name="colorScheme">The color scheme to use with the dialog. Use <c>null</c> if already set via property.</param>
            <param name="owner">The owner window of this dialog. Use <c>null</c> if already set via property.</param>
            <param name="title">The window title for this dialog. Use <c>null</c> if already set via property.</param>
            <param name="buttonDisplay">Determine how many buttons should be displayed at the bottom of the dialog, either [OK], [OK] and [Cancel], or [OK] [Discard] and [Cancel].</param>
            <param name="image">The image to display with this dialog.</param>
            <param name="defaultButton">The button to have selected by default when the dialog opens. (DOESN'T CURRENTLY WORK)</param>
            <param name="customOkButtonText">The text to use in the OK button. Use <c>null</c> if already set via property.</param>
            <param name="customCancelButtonText">The text to use in the Cancel button. Use <c>null</c> if already set via property.</param>
            <param name="customDiscardButtonText">The text to use in the Discard button. Use <c>null</c> if already set via property.</param>
            <param name="extraButton1Text">The text to use in the first extra button. If this is set to a null or empty string, this button will not be displayed.</param>
            <param name="extraButton2Text">The text to use in the second extra button. If this is set to a null or empty string, this button will not be displayed.</param>
            <param name="extraButton3Text">The text to use in the third extra button. If this is set to a null or empty string, this button will not be displayed.</param>
            <param name="checkBoxText">The text to use in the check box. If this is set to a null or empty string, the check box will not be displayed.</param>
        </member>
        <member name="M:SolidShineUi.MessageDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.MessageDialogImage">
            <summary>
            The image to use when displaying a message dialog.
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImage.None">
            <summary>No image is displayed. This may be good for generic messages, but is not recommended for situations where the user should pay attention to the message.</summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImage.Error">
            <summary>A white X on a red background is displayed. This is good for situations where an error or exception has occurred, or something isn't acting as intended.</summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImage.Warning">
            <summary>An exclamation point on a yellow triangle is displayed. This is good when informing the user about potential errors or unintended side effects.</summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImage.Question">
            <summary>A white question mark on a blue background is displayed. This is good when asking a question or when asking for confirmation for a routine task.</summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImage.Hand">
            <summary>A white exclamation point on a blue background is displayed. This is good for when wanting to alert the user about something that isn't considered a warning.</summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImage.Info">
            <summary>A white I on a blue background is displayed. This is good for generally informing the user about something, such as a task being completed or the response to a request.</summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImage.Stop">
            <summary>A red stop sign is displayed. This is good for informing the user that this action isn't valid in the current state, or that an unavoidable major issue has occurred.</summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImage.Lock">
            <summary>A yellow lock is displayed. This is good for situations where security or authentication are involved.</summary>
        </member>
        <member name="T:SolidShineUi.MessageDialogImageConverter">
            <summary>
            A helper class that can retrieve a BitmapImage from a MessageDialogImage.
            </summary>
        </member>
        <member name="M:SolidShineUi.MessageDialogImageConverter.GetImage(SolidShineUi.MessageDialogImage,SolidShineUi.MessageDialogImageConverter.MessageDialogImageColor)">
            <summary>
            Return a 32x32 image to use with a message dialog. If the MessageDialogImage argument is "None", then <c>null</c> is returned.
            </summary>
            <param name="image">The image to display. If "None", then <c>null</c> is returned.</param>
            <param name="color">The color to use for the image. Use black or white for high-contrast themes.</param>
            <returns></returns>
        </member>
        <member name="T:SolidShineUi.MessageDialogImageConverter.MessageDialogImageColor">
            <summary>
            The color to use with a message dialog image.
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImageConverter.MessageDialogImageColor.Black">
            <summary>
            Black monochrome icon
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImageConverter.MessageDialogImageColor.Color">
            <summary>
            Multicolored icon
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogImageConverter.MessageDialogImageColor.White">
            <summary>
            White monochrome icon
            </summary>
        </member>
        <member name="T:SolidShineUi.MessageDialogResult">
            <summary>
            Represents the result of the MessageDialog; specifically, which button that was clicked.
            </summary>
            <remarks>
            Note that since the buttons can be relabeled via the <see cref="P:SolidShineUi.MessageDialog.OkButtonText"/>, <see cref="P:SolidShineUi.MessageDialog.CancelButtonText"/>, and other properties,
            the button names here may not directly relate to the labels that were given.
            </remarks>
        </member>
        <member name="F:SolidShineUi.MessageDialogResult.OK">
            <summary>
            The OK button was clicked. This is the far-left button on the bottom of the dialog.
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogResult.Cancel">
            <summary>
            The Cancel button was clicked. This is the far-right button on the bottom of the dialog.
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogResult.Extra1">
            <summary>
            The first "extra" button was clicked. If visible, this is at the top of the list of buttons in the middle of the dialog.
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogResult.Extra2">
            <summary>
            The second "extra" button was clicked. If visible, this is at the middle of the list of buttons in the middle of the dialog.
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogResult.Extra3">
            <summary>
            The third "extra" button was clicked. If visible, this is at the bottom of the list of buttons in the middle of the dialog.
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogResult.Discard">
            <summary>
            The Discard button was clicked. If visible, this button is in between the OK and Cancel buttons on the bottom of the dialog.
            </summary>
        </member>
        <member name="T:SolidShineUi.MessageDialogButtonDisplay">
            <summary>
            Set how many buttons to display at the bottom of the dialog.
            </summary>
            <remarks>
            <see cref="F:SolidShineUi.MessageDialogButtonDisplay.Auto"/> is used by default; if <see cref="F:SolidShineUi.MessageDialogButtonDisplay.Auto"/> is used, the <see cref="P:SolidShineUi.MessageDialog.OkButtonText"/>, <see cref="P:SolidShineUi.MessageDialog.CancelButtonText"/>, 
            and <see cref="P:SolidShineUi.MessageDialog.DiscardButtonText"/> properties determine which buttons are displayed.
            </remarks>
        </member>
        <member name="F:SolidShineUi.MessageDialogButtonDisplay.Auto">
            <summary>
            If set, uses the OkButtonText, CancelButtonText, and DiscardButtonText properties to determine which buttons should be displayed. 
            If a property is null or empty, then the corresponding button isn't displayed.
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogButtonDisplay.One">
            <summary>
            Display only one button, the OK button. Outputs as <c>MessageDialogResult.OK</c> when clicked.
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogButtonDisplay.Two">
            <summary>
            Display two buttons, the OK and Cancel buttons. Outputs as <c>MessageDialogResult.OK</c> or <c>MessageDialogResult.Cancel</c> when clicked.
            </summary>
        </member>
        <member name="F:SolidShineUi.MessageDialogButtonDisplay.Three">
            <summary>
            Display three buttons, the OK, Discard, and Cancel buttons. Outputs as <c>MessageDialogResult.OK</c>, <c>MessageDialogResult.Discard</c> or <c>MessageDialogResult.Cancel</c> when clicked. 
            </summary>
        </member>
        <member name="T:SolidShineUi.StringInputDialog">
            <summary>
            A dialog for the user to enter in a string (in response to a message or prompt).
            </summary>
            <summary>
            StringInputDialog
            </summary>
        </member>
        <member name="M:SolidShineUi.StringInputDialog.#ctor">
            <summary>
            Create a StringInputDialog with nothing preset.
            </summary>
        </member>
        <member name="M:SolidShineUi.StringInputDialog.#ctor(SolidShineUi.ColorScheme)">
            <summary>
            Create a StringInputDialog with a color scheme.
            </summary>
            <param name="cs">The color scheme to use for the window.</param>
        </member>
        <member name="M:SolidShineUi.StringInputDialog.#ctor(SolidShineUi.ColorScheme,System.String,System.String,System.String)">
            <summary>
            Create a StringInputBox with prefilled values.
            </summary>
            <param name="cs">The color scheme to use for the window.</param>
            <param name="title">The title of the window.</param>
            <param name="desc">The description to give to the user.</param>
            <param name="value">The value to place in the text box. By default, the text box is empty.</param>
        </member>
        <member name="P:SolidShineUi.StringInputDialog.Value">
            <summary>
            Get or set the text value of the input dialog's text box.
            </summary>
        </member>
        <member name="P:SolidShineUi.StringInputDialog.Description">
            <summary>
            Get or set the description text to display above the text box. This text should describe what the user should enter into the text box.
            </summary>
            <remarks>Try to keep the description to about a sentence long. If you do have a lengthier description, you may need to resize the window to make it fit properly.
            Ideally, the overall design of the program should make it apparent what the user should enter into the text box without reading the description.
            However, the description is helpful to remind the user what is being asked of them here, and also to potentially clarify the types of values that are valid or invalid.</remarks>
        </member>
        <member name="F:SolidShineUi.StringInputDialog.DescriptionProperty">
            <summary>
            A dependency property backing the related property. See <see cref="P:SolidShineUi.StringInputDialog.Description"/> for details.
            </summary>
        </member>
        <member name="P:SolidShineUi.StringInputDialog.DialogResult">
            <summary>
            Get the result of the dialog when it is closed. "False" refers to the user cancelling the operation, while "True" refers to the user confirming, by clicking "OK" or pressing the Enter key.
            </summary>
        </member>
        <member name="P:SolidShineUi.StringInputDialog.EnterKeyConfirms">
            <summary>
            Get or set whether the Enter key can be used to confirm the dialog. If enabled, pressing down the Enter key will be treated as if the user pressed "OK".
            </summary>
        </member>
        <member name="F:SolidShineUi.StringInputDialog.EnterKeyConfirmsProperty">
            <summary>
            A dependency property backing the related property. Please see <see cref="P:SolidShineUi.StringInputDialog.EnterKeyConfirms"/> for details.
            </summary>
        </member>
        <member name="P:SolidShineUi.StringInputDialog.EscapeKeyCancels">
            <summary>
            Get or set whether the Escape key can be used to cancel the dialog. If enabled, pressing down the Escape key will be treated as if the user pressed "Cancel".
            </summary>
        </member>
        <member name="F:SolidShineUi.StringInputDialog.EscapeKeyCancelsProperty">
            <summary>
            A dependency property backing the related property. Please see <see cref="P:SolidShineUi.StringInputDialog.EscapeKeyCancels"/> for details.
            </summary>
        </member>
        <member name="P:SolidShineUi.StringInputDialog.SelectTextOnFocus">
            <summary>
            Get or set whether all of the text in the text box should be selected when the text box receives focus.
            </summary>
        </member>
        <member name="F:SolidShineUi.StringInputDialog.SelectTextOnFocusProperty">
            <summary>
            A dependency proeprty backing the related property. Please see <see cref="P:SolidShineUi.StringInputDialog.SelectTextOnFocus"/> for details.
            </summary>
        </member>
        <member name="P:SolidShineUi.StringInputDialog.ValidationFunction">
            <summary>
            Get or set the data validation function that should be used to make sure the inputted string matches an expected format.
            </summary>
            <remarks>
            Set this to <c>null</c> if you want to disable data validation.
            This function is called every time that the text in the text box is changed, so it's important to have a function that is relatively fast, so as
            to avoid blocking the UI thread.
            The function will be given the current text in the text box, and is asked to return a bool if it matches the expected validation
            (<c>true</c> for a good match, <c>false</c> for an invalid string).
            </remarks>
        </member>
        <member name="P:SolidShineUi.StringInputDialog.ValidationSuccessString">
            <summary>
            Get or set the string to display in the UI when the validation returns true (a success), indicating a good and valid string.
            </summary>
        </member>
        <member name="F:SolidShineUi.StringInputDialog.ValidationSuccessStringProperty">
            <summary>
            A dependency property backing the related property. See <see cref="P:SolidShineUi.StringInputDialog.ValidationSuccessString"/> for details.
            </summary>
        </member>
        <member name="P:SolidShineUi.StringInputDialog.ValidationFailureString">
            <summary>
            Get or set the string to display in the UI when the validation returns false (a failure), indicating an invalid or unusable string.
            </summary>
        </member>
        <member name="F:SolidShineUi.StringInputDialog.ValidationFailureStringProperty">
            <summary>
            A dependency property backing the related property. See <see cref="P:SolidShineUi.StringInputDialog.ValidationFailureString"/> for details.
            </summary>
        </member>
        <member name="M:SolidShineUi.StringInputDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.DoubleSpinner">
            <summary>
            A control for selecting a number, via typing in a number, an arithmetic expression, or using the up and down buttons.
            </summary>
            <summary>
            DoubleSpinner
            </summary>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.PropertyChanged">
            <summary>
            Raised when the Value, Decimals, MinValue, or MaxValue properties are changed. Used internally to trigger revalidating the value.
            </summary>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.ValueChanged">
            <summary>
            Raised when the Value property is changed.
            </summary>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.ValueValidated">
            <summary>
            Raised when the Value property is validated, and changed to a valid value if needed.
            </summary>
        </member>
        <member name="M:SolidShineUi.DoubleSpinner.#ctor">
            <summary>
            Create a DoubleSpinner.
            </summary>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.DoubleSpinner.ColorSchemeProperty">
            <summary>
            The backing dependency property for the <see cref="P:SolidShineUi.DoubleSpinner.ColorScheme"/> property. See that related property for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.DoubleSpinner.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.ColorScheme">
            <summary>
            Get or set the color scheme used for this spinner. For easier color scheme management, bind this to the window or larger control you're using.
            </summary>
        </member>
        <member name="M:SolidShineUi.DoubleSpinner.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.ButtonBackground">
            <summary>
            Get or set the brush used for the background of the buttons of the spinner.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.DisabledBrush">
            <summary>
            Get or set the brush used for the background of the buttons when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.BorderBrush">
            <summary>
            Get or set the brush of the border around the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.HighlightBrush">
            <summary>
            Get or set the brush used when a button is highlighted (i.e. has a mouse over it or keyboard focus).
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.ClickBrush">
            <summary>
            Get or set the brush used when a button is being clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.BorderDisabledBrush">
            <summary>
            Get or set the brush used for the border around the control, while the control is disabled.
            </summary>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.InternalValueChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.Value">
            <summary>
             Get or set the value of the spinner.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.Step">
            <summary>
             Get or set how much to change the value by when you press the up or down button.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.Decimals">
            <summary>
             Get or set how many decimal places to display. Values entered with a more precise decimal value will be rounded.
            </summary>
            <remarks>
             This must be a value between 0 (which means round up to an integer number) and 15, inclusive. The default value is 2.
            </remarks>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.MinValue">
            <summary>
             Get or set the minimum value allowed for this spinner (inclusive).
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.MaxValue">
            <summary>
             Get or set the maximum value allowed for this spinner (inclusive).
            </summary>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.InternalRepeatDelayChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.RepeatDelayChanged">
            <summary>
            Raised when the RepeatDelay property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.RepeatDelay">
            <summary>
            Get or set the delay period before starting the repeatedly stepping up or down while the button is held, in milliseconds. Default is 300 milliseconds.
            </summary>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.InternalCornerRadiusChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.CornerRadiusChanged">
            <summary>
            Raised when the CornerRadius property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.CornerRadius">
            <summary>
            Get or set the corner radius to use around the corners of this control. Setting the corner radius to a value other than 0 displays rounded corners.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.AcceptExpressions">
            <summary>
            Get or set if the spinner should evaluate arithmetic expressions (such as "2+5") to accept as a value.
            </summary>
            <remarks>
            See the <see cref="T:SolidShineUi.ArithmeticParser"/> class for more info about how expressions are parsed.
            </remarks>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.InternalShowArrowsChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.DoubleSpinner.ShowArrowsChanged">
            <summary>
            Raised when the ShowArrows property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.ShowArrows">
            <summary>
            Get or set whether the up and down arrow buttons are shown.
            </summary>
        </member>
        <member name="F:SolidShineUi.DoubleSpinner.MinimumDigitCountProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.DoubleSpinner.MinimumDigitCount">
            <summary>
            Get or set the minimum number of integral digits to display in the spinner. A value of 0 or lower will revert the display to using the standard double display format.
            </summary>
            <remarks>
            This modifies the number of digits being rendered via <see cref="M:System.Double.ToString(System.String)"/>.
            Setting this to <c>4</c> and then setting the Value to <c>16</c> will render the text <c>0016</c> in the display. The stored value isn't affected.
            This setting only modifies the integral (integer) part of the number; use the <see cref="P:SolidShineUi.DoubleSpinner.Decimals"/> property for modifying how many numbers to display after the decimal point.
            You should generally avoid setting this to numbers larger than 99, as larger numbers are only supported in newer versions of .NET.
            </remarks>
        </member>
        <member name="M:SolidShineUi.DoubleSpinner.ValidateValue">
            <summary>
            Validate the value and update the UI if needed.
            </summary>
        </member>
        <member name="M:SolidShineUi.DoubleSpinner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.EnumComboBox">
            <summary>
            A ComboBox where the items are populated from an Enum.
            </summary>
        </member>
        <member name="M:SolidShineUi.EnumComboBox.#ctor">
            <summary>
            Create an EnumComboBox.
            </summary>
        </member>
        <member name="E:SolidShineUi.EnumComboBox.InternalEnumChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.EnumComboBox.EnumChanged">
            <summary>
            Raised when the Enum property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.EnumComboBox.Enum">
            <summary>
            The enum to use with this EnumComboBox. When the Enum value is set, the ComboBox's items are changed to match the different values of the enum. 
            </summary>
        </member>
        <member name="P:SolidShineUi.EnumComboBox.SelectedEnumValue">
            <summary>
            Get or set the selected item of the EnumComboBox. To avoid casting, use the SelectedEnumValueAsEnum function.
            </summary>
        </member>
        <member name="M:SolidShineUi.EnumComboBox.SelectedEnumValueAsEnum``1">
            <summary>
            Get the selected item of the EnumComboBox, returned as a value of that enum.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:SolidShineUi.FileSelect">
            <summary>
            A control that provides a responsive and customizable UI for users to select files on their computer, similar to the "<c>input type="file"</c>" element in HTML.
            </summary>
        </member>
        <member name="M:SolidShineUi.FileSelect.#ctor">
            <summary>
            Create a new FileSelect control.
            </summary>
        </member>
        <member name="E:SolidShineUi.FileSelect.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.FileSelect.ColorSchemeProperty">
            <summary>
            A dependency property object backing the related ColorScheme property. See <see cref="P:SolidShineUi.FileSelect.ColorScheme"/> for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.FileSelect.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.FileSelect.ColorScheme">
            <summary>
            Get or set the color scheme used for this control. The color scheme can quickly apply a whole visual style to your control.
            </summary>
        </member>
        <member name="M:SolidShineUi.FileSelect.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.FileSelect.Background">
            <summary>
            Get or set the brush used for the background of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.ButtonBackground">
            <summary>
            Get or set the brush used for the background of the Browse button in the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.ButtonHighlightBrush">
            <summary>
            Get or set the brush used for the background of the Browse button while the mouse is over it.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.ButtonClickBrush">
            <summary>
            Get or set the brush used for the background of the Browse button while the mouse is clicking it.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.BackgroundDisabledBrush">
            <summary>
            Get or set the brush used for the background of the control (and button) when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.BorderDisabledBrush">
            <summary>
            Get or set the brush used for the border of the control (and button) when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.BorderBrush">
            <summary>
            Get or set the brush used for the border around the edges of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.CornerRadius">
            <summary>
            Get or set how much rounding to apply to the corners of the control. Setting the corners to 0 means no rounding is done; straight corners are shown.
            </summary>
        </member>
        <member name="E:SolidShineUi.FileSelect.InternalCornerRadiusChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.FileSelect.CornerRadiusChanged">
            <summary>
            Raised when the CornerRadius property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.ButtonCornerRadius">
            <summary>
            Get or set how much rounding to apply to the Browse button inside the control. Settings the corners to 0 means no rounding is done; straight corners are shown.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.BrowseButtonText">
            <summary>
            Get or set the text displayed in the Browse button. The default value is "Browse...".
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.NoFilesSelectedMessage">
            <summary>
            Get or set the message displayed when no files have been selected. The default value is "(no files selected)".
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.ShowIcon">
            <summary>
            Get or set if the file icons are shown for selected files.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.ButtonPlacement">
            <summary>
            Get or set the placement location of the Browse button. The button can be placed on any of the four edges of the control, or it can be hidden entirely.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.DisplayFilenames">
            <summary>
            Get or set if the filenames of the selected files are displayed. If true, then all selected files are displayed in a vertical list (with scrolling if needed).
            If false, then only a count is displayed (i.e. "3 file(s) selected").
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.HorizontalScrollBarVisibility">
            <summary>
            Get or set the appearance of the horizontal scroll bar when displaying the list of filenames. Does nothing if <c>DisplayFilenames</c> is set to false.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.VerticalScrollBarVisibility">
            <summary>
            Get or set the appearance of the vertical scroll bar when displaying the list of filenames. Does nothing if <c>DisplayFilenames</c> is set to false.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.FileListPadding">
            <summary>
            Get or set the padding to put around the file list portion of the control (the portion that actually has the files listed).
            </summary>
            <remarks>
            This can be used to add some space between the Browse button and the list of files, in situations where the two in contact may lead to undesirable results.
            </remarks>
        </member>
        <member name="F:SolidShineUi.FileSelect.BrowseForFile">
            <summary>A WPF command that when executed, displays the Browse for Files dialog so a user can select one (or more) files.</summary>
        </member>
        <member name="F:SolidShineUi.FileSelect.ClearSelectedFiles">
            <summary>A WPF command that when executed, clears all files from the SelectedFiles list. Only executable if there is one or more files currently selected.</summary>
        </member>
        <member name="F:SolidShineUi.FileSelect.CopyFilenames">
            <summary>A WPF command that when executed, copies a list of the selected files to the clipboard. Only executable if there is one or more files currently selected.</summary>
        </member>
        <member name="F:SolidShineUi.FileSelect.OpenContainingFolders">
            <summary>A WPF command that when executed, opens the containing folders of each selected file. Only executable if there is one or more files currently selected.</summary>
        </member>
        <member name="F:SolidShineUi.FileSelect.RemoveSelectedFile">
            <summary>A WPF command that when executed, removes the specific file passed in through the command parameter. Only executable if the file is present in the list of selected files.</summary>
        </member>
        <member name="M:SolidShineUi.FileSelect.ClearAllSelectedFiles">
            <summary>
            Clears all files from the SelectedFiles list. No files are then selected.
            </summary>
        </member>
        <member name="M:SolidShineUi.FileSelect.BrowseFiles">
            <summary>
            Display an OpenFileDialog for the user to select files.
            </summary>
        </member>
        <member name="M:SolidShineUi.FileSelect.CopyFilenamesToClipboard">
            <summary>
            Copy the filenames for all the selected files to the clipboard. Each file path is on its own separate line.
            </summary>
            <exception cref="T:System.InvalidOperationException">No files are currently selected.</exception>
        </member>
        <member name="M:SolidShineUi.FileSelect.OpenContainingFoldersOfSelectedFiles">
            <summary>
            Open the containing folder in Windows Explorer for each of the selected files. If multiple files are in the same folder, that folder may be opened multiple times.
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.SelectedFiles">
            <summary>
            Get the list of files selected in this FileSelect. You can add or remove items from the collection, or set the collection's max size via the <c>Capacity</c> property.
            </summary>
        </member>
        <member name="E:SolidShineUi.FileSelect.SelectionChanged">
            <summary>
            Raised when the list of selected files is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.FileSelect.ALL_FILES_FILTER">
            <summary>
            Defines the standard filter for displaying all files (as in, no filter is applied).
            </summary>
        </member>
        <member name="P:SolidShineUi.FileSelect.FileFilter">
            <summary>
            Get or set the file filter used when selecting files. Use semicolons (;) to separate multiple extensions/filters (i.e. <c>*.docx;*.xlsx;*.pptx</c>). Supports * and ? wildcards like Windows.
            </summary>
            <remarks>
            If the filter is changed after files have been selected, the existing selected files are not re-run against the new filter. This only applies to files added in afterwards.
            </remarks>
        </member>
        <member name="P:SolidShineUi.FileSelect.AllowMultipleFiles">
            <summary>
            Get or set if multiple files can be selected with the FileSelect. If false, only one file can be selected.
            </summary>
            <remarks>
            If you want to set a specific max number of files that can be selected, set this to "true" and then set the max value via the <c>SelectedFiles.Capacity</c> property.
            </remarks>
        </member>
        <member name="E:SolidShineUi.FileSelect.InternalAllowMultipleFilesChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.FileSelect.AllowMultipleFilesChanged">
            <summary>
            Raised when the AllowMultipleFiles property is changed.
            </summary>
        </member>
        <member name="M:SolidShineUi.FileSelect.SelectFiles(System.String)">
            <summary>
            Select a file.
            </summary>
            <param name="file">The full path to the file.</param>
            <remarks>If there is no file at the specified path, it is not selected.</remarks>
        </member>
        <member name="M:SolidShineUi.FileSelect.SelectFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Select a list of files.
            </summary>
            <param name="files">An enumeration of files, each string being a separate full path to a file.</param>
            <remarks>If there is no file at the specified path, it is not selected.</remarks>
        </member>
        <member name="M:SolidShineUi.FileSelect.FileMatchesFilter(System.String,System.String[])">
            <summary>
            Check if a file matches against a collection of filters.
            </summary>
            <param name="file">The file path to check.</param>
            <param name="filters">The filters to check against. If using the FileFilter property, split the string via the <c>Split</c> function, splitting with the ";" delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.FileSelect.OpenFilesForReading">
            <summary>
            Create a file stream for each selected file, which can be used for reading the files.
            </summary>
            <exception cref="T:System.InvalidOperationException">No files are currently selected.</exception>
        </member>
        <member name="M:SolidShineUi.FileSelect.OpenFilesForWriting">
            <summary>
            Create a file stream for each selected file, which can be used for reading or writing the files.
            </summary>
            <exception cref="T:System.InvalidOperationException">No files are currently selected.</exception>
        </member>
        <member name="T:SolidShineUi.PlacementDirection">
            <summary>
            Used to indicate the placement of a UI element within a larger UI element.
            </summary>
        </member>
        <member name="F:SolidShineUi.PlacementDirection.Hidden">
            <summary>
            Hide the UI element.
            </summary>
        </member>
        <member name="F:SolidShineUi.PlacementDirection.Top">
            <summary>
            Display the UI element at the top side of the larger UI element.
            </summary>
        </member>
        <member name="F:SolidShineUi.PlacementDirection.Left">
            <summary>
            Display the UI element at the left side of the larger UI element.
            </summary>
        </member>
        <member name="F:SolidShineUi.PlacementDirection.Right">
            <summary>
            Display the UI element at the right side of the larger UI element.
            </summary>
        </member>
        <member name="F:SolidShineUi.PlacementDirection.Bottom">
            <summary>
            Display the UI element at the bottom side of the larger UI element.
            </summary>
        </member>
        <member name="T:SolidShineUi.FlatButton">
            <summary>
            A button with a custom, flat style and additional funcionality. Use <c>SelectOnClick</c> to have the button act like a toggle button.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatButton.#ctor">
            <summary>
            Create a new FlatButton.
            </summary>
        </member>
        <member name="E:SolidShineUi.FlatButton.IsSelectedChanged">
            <summary>
            Raised if the button's IsSelected value is changed. This can be used to have the button act as a ToggleButton.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.Background">
            <summary>
            Get or set the brush used for the background of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.ClickBrush">
            <summary>
            Get or set the brush used for the background of the control while the mouse is clicking it.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.SelectedBrush">
            <summary>
            Get or set the brush used for the background of this button while it is selected
            (i.e. the <c>IsSelected</c> property is true).
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.HighlightBrush">
            <summary>
            Get or set the brush used for the background of the control while the mouse is over it, or it has keyboard focus.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.DisabledBrush">
            <summary>
            Get or set the brush used for the background of the control when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.BorderDisabledBrush">
            <summary>
            Get or set the brush used for the border of the control when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.BorderBrush">
            <summary>
            Get or set the brush used for the border around the edges of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.BorderHighlightBrush">
            <summary>
            Get or set the brush used for the border while the control has the mouse over it (or it has keyboard focus).
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.BorderSelectedBrush">
            <summary>
            Get or set the brush used for the border while the control is selected
            (i.e. the <c>IsSelected</c> property is true).
            </summary>
        </member>
        <member name="E:SolidShineUi.FlatButton.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatButton.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.FlatButton.ColorScheme">
            <summary>
            Get or set the color scheme to apply to this button. The color scheme can quickly apply a whole visual style to your control.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.TransparentBack">
            <summary>
            Get or set whether the button should have a transparent background when the button is not focused.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatButton.OnTransparentBackChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when a property of an object has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.FlatButton.UseAccentColors">
            <summary>
            Get or set if the button should use the accent colors of the color scheme, rather than the standard colors.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatButton.OnUseAccentColorsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when a property of an object has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="M:SolidShineUi.FlatButton.ApplyColorScheme(SolidShineUi.ColorScheme,System.Boolean,System.Boolean)">
            <summary>
            Apply a color scheme to this control, and set some other optional appearance settings. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply</param>
            <param name="transparentBack">Set if the button should have no background when not focused or highlighted. This can also be achieved with the <c>TransparentBack</c> property.</param>
            <param name="useAccentColors">Set if accent colors should be used for this button, rather than the main color scheme colors.
            This can also be achieved with the <c>UseAccentColors</c> property.
            </param>
        </member>
        <member name="M:SolidShineUi.FlatButton.ApplyColorScheme(SolidShineUi.HighContrastOption,System.Boolean)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="hco">The high-contrast color scheme to apply.</param>
            <param name="transparentBack">Set if the button should have no background when not focused or highlighted. This can also be achieved with the <c>TransparentBack</c> property.</param>
        </member>
        <member name="P:SolidShineUi.FlatButton.BorderThickness">
            <summary>
            Get or set the thickness of the border around the button.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.BorderSelectionThickness">
            <summary>
            Get or set the thickness of the border around the button, while the button is in a selected (<c>IsSelected</c>) state.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.CornerRadius">
            <summary>
            Get or set the corner radius (or radii) to use for the button and its border. Can be used to create a rounded button.
            </summary>
        </member>
        <member name="E:SolidShineUi.FlatButton.RightClick">
            <summary>
            Raised when the user right-clicks on the button, via a mouse click or via the keyboard.
            </summary>
        </member>
        <member name="F:SolidShineUi.FlatButton.IsMouseDownProperty">
            <summary>
            Get if there is a mouse button currently being pressed, while the mouse cursor is over this control.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatButton.SetIsMouseDown(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Set the IsMouseDown property for a FlatButton.
            </summary>
            <param name="obj">The FlatButton to apply the property change to.</param>
            <param name="value">The new value to set for the property.</param>
        </member>
        <member name="M:SolidShineUi.FlatButton.GetIsMouseDown(System.Windows.DependencyObject)">
            <summary>
            Get the IsMouseDown property for a FlatButton.
            </summary>
            <param name="obj">The Flatbutton to get the property value from.</param>
        </member>
        <member name="M:SolidShineUi.FlatButton.OnIsSelectedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when a property of an object has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.FlatButton.IsSelected">
            <summary>
            Gets or sets whether this button is selected. This property (combined with <c>SelectOnClick</c>) allows the button to function like a ToggleButton.
            </summary>
            <remarks>
            A selected button will have a slightly different visual appearance to differentiate it as being selected. This will include, by default, the border being a bit thicker.
            This can be changed via the <see cref="P:SolidShineUi.FlatButton.BorderSelectionThickness"/> property. You can also directly edit the brushes used via the <see cref="P:SolidShineUi.FlatButton.SelectedBrush"/> and
            <see cref="P:SolidShineUi.FlatButton.BorderSelectedBrush"/> properties.
            </remarks>
        </member>
        <member name="P:SolidShineUi.FlatButton.SelectOnClick">
            <summary>
            Gets or sets whether the button should change its IsSelected property when a click is performed. With this enabled, this allows the button to take on the functionality of a ToggleButton.
            </summary>
            <remarks>
            While SelectOnClick is true, the button will toggle between <see cref="P:SolidShineUi.FlatButton.IsSelected"/> being true and false (similar to a ToggleButton). A selected button will, by default, have some visual
            differences to help make it look distinct from unselected buttons. The button's Click event will still be raised while this property is set to <c>true</c>, but the event occurs after the
            IsSelected property has already changed. While you could use the Click event to check when the button's IsSelected property is changed, it is better to use the IsSelectedChanged event,
            in case of situations where IsSelected is changed via methods other than clicking, such as programmatically or via WPF binding.
            </remarks>
        </member>
        <member name="M:SolidShineUi.FlatButton.DoClick">
            <summary>
            Perform a click programattically. The button responds the same way as if it was clicked by the user.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatButton.OnClick">
            <summary>
            Defines the actions the button performs when it is clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.IsDefault">
            <summary>
            Get or set if this button is the default button in the dialog or window it is located in. May not currently function correctly.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatButton.IsDefaulted">
            <summary>
            Specifies whether or not this button is the button that would be invoked when Enter is pressed.
            </summary>
        </member>
        <member name="T:SolidShineUi.FlatWindow">
            <summary>
            A WPF window that has a custom, flat style and additional functionality.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatWindow.#ctor">
            <summary>
            Create a new FlatWindow.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the Window.SourceInitialized event.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.HighContrastMode">
            <summary>
            Get if the window's color scheme is a high contrast theme (and thus, the window is displaying high-contrast colors).
            </summary>
        </member>
        <member name="E:SolidShineUi.FlatWindow.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatWindow.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.FlatWindow.ColorScheme">
            <summary>
            Get or set the color scheme to apply to the window. The color scheme can quickly apply a whole visual style to your control.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatWindow.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="M:SolidShineUi.FlatWindow.ApplyColorScheme(SolidShineUi.HighContrastOption)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="hco">The high-contrast color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.FlatWindow.CaptionDisplayType">
            <summary>
            Gets or sets the visibility of the caption buttons (close, maximize, minimize). The actions may still be available via other methods even if the buttons are hidden.
            </summary>
            <remarks>
            Use the <c>DisableMinimizeAction</c> and <c>DisableMaximizeAction</c> methods to further prevent the user from being able to minimize or maximize the window.
            The standard <c>ResizeMode</c> property works as well.
            </remarks>
        </member>
        <member name="P:SolidShineUi.FlatWindow.CaptionButtonPadding">
            <summary>
            Gets or sets the amount of padding to use with each of the caption buttons. A higher padding will make the buttons larger.
            </summary>
            <remarks>The default value is (9,7,9,7).</remarks>
        </member>
        <member name="P:SolidShineUi.FlatWindow.CaptionHeight">
            <summary>
            Get or set the height of the caption (title bar) area of the window. Default is 29.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.TopRightElement">
            <summary>
            Gets or sets the UI element to place in the top-right of the window, to the left of the caption buttons.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.TopLeftElement">
            <summary>
            Gets or sets the UI element to place in the top-left corner of the window.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.ShowTitle">
            <summary>
            Get or set if the <see cref="P:System.Windows.Window.Title"/> should be displayed at the top of the window.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.ShowIcon">
            <summary>
            Get or set if the <see cref="P:System.Windows.Window.Icon"/> should be displayed at the top-left of the window.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.ExcludeTopLeftElementFromChrome">
            <summary>
            Get or set if the top-left element should be considered part of the window chrome or not. Set to <c>true</c> to exclude it from the window chrome.
            </summary>
            <remarks>
            This changes the IsHitTestVisibleInChrome property for the top-left element. If set to true, the element can be interacted with.
            If set to false, the element cannot be interacted with, and clicking, dragging, etc. acts as if you're clicking on the window's title bar.
            </remarks>
        </member>
        <member name="P:SolidShineUi.FlatWindow.ExcludeTopRightElementFromChrome">
            <summary>
            Get or set if the top-right element should be considered part of the window chrome or not. Set to <c>true</c> to exclude it from the window chrome.
            </summary>
            <remarks>
            This changes the IsHitTestVisibleInChrome property for the top-right element. If set to true, the element can be interacted with.
            If set to false, the element cannot be interacted with, and clicking, dragging, etc. acts as if you're clicking on the window's title bar.
            </remarks>
        </member>
        <member name="P:SolidShineUi.FlatWindow.BorderThickness">
            <summary>
            Get or set the thickness of the border of the window. Setting the thickness to 0 means the border is not visible.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.SelectionBrush">
            <summary>
            Get or set the brush used when one of the caption buttons (in the top-right on non-RTL systems) is being clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.HighlightBrush">
            <summary>
            Get or set the brush used when one of the caption buttons (in the top-right on non-RTL systems) has focus or has the mouse over it.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.Background">
            <summary>
            Get or set the background brush to use for the caption area (title bar). Use <c>ContentBackground</c> for the content area of the window.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.CaptionButtonsBrush">
            <summary>
            Get or set the brush used for the icons of the caption buttons (in the top-right in non-RTL systems).
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.CaptionTextBrush">
            <summary>
            Get or set the brush used for the text in the caption area (title bar). This has no effect if <c>ShowTitle</c> is false.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.BorderBrush">
            <summary>
            Get or set the brush used for the border around the window.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.InactiveTextBrush">
            <summary>
            Get or set the brush used for the text in the caption area (title bar) when the window isn't focused/active. This has no effect if <c>ShowTitle</c> is false.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.InactiveBackground">
            <summary>
            Get or set the brush used for the caption area (title bar) when the window isn't focused/active. This does not change the color of the content area of the window.
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindow.ContentBackground">
            <summary>
            Get or set the brush used for the background of the content area of the window (where most content and controls are displayed).
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatWindow.DisableMaximizeAction">
            <summary>
            Calls the native Windows method to disable the Maximize action (via the right-click menu and the like). For <see cref="T:SolidShineUi.FlatWindow"/>, 
            you'll want to update the CaptionDisplayType to remove the physical button.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatWindow.DisableMinimizeAction">
            <summary>
            Calls the native Windows method to disable the Minimize action (via the right-click menu and the like). For <see cref="T:SolidShineUi.FlatWindow"/>, 
            you'll want to update the CaptionDisplayType to remove the physical button.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatWindow.DisableMaximizeAndMinimizeActions">
            <summary>
            Calls the native Windows method to disable the Minimize and Maximize actions (via the right-click menu and the like). For <see cref="T:SolidShineUi.FlatWindow"/>, 
            you'll want to update the CaptionDisplayType to remove the physical buttons.
            </summary>
        </member>
        <member name="M:SolidShineUi.FlatWindow.DisplaySystemMenu(System.Windows.Point)">
            <summary>
            Display the system menu for this window (i.e. the menu containing values like Move, Size, Minimize, and Close), at a specified point on the screen.
            </summary>
            <param name="p">The coordinates of the pixel at which to display this menu (relative to the screen).</param>
        </member>
        <member name="T:SolidShineUi.FlatWindowCommands">
            <summary>
            Contains a collection of commands that can be used with the <see cref="T:SolidShineUi.FlatWindow"/> class (and any classes that inherit from it).
            </summary>
        </member>
        <member name="P:SolidShineUi.FlatWindowCommands.CloseWindow">
            <summary>A WPF command that when executed, will close the specified window.</summary>
        </member>
        <member name="P:SolidShineUi.FlatWindowCommands.Minimize">
            <summary>A WPF command that when executed, will minimize the window (hide in the taskbar).</summary>
        </member>
        <member name="P:SolidShineUi.FlatWindowCommands.Maximize">
            <summary>A WPF command that when executed, will maximize the window (take up all space on the screen).</summary>
        </member>
        <member name="P:SolidShineUi.FlatWindowCommands.Restore">
            <summary>A WPF command that when executed, will restore the window to its state prior to being minimized or maximized.</summary>
        </member>
        <member name="P:SolidShineUi.FlatWindowCommands.DisplaySystemMenu">
            <summary>A WPF command that when executed, will display the window's system menu in the top-left corner of the window.</summary>
        </member>
        <member name="T:SolidShineUi.IntegerSpinner">
            <summary>
            A control for selecting a number, via typing in a number, an arithmetic expression, or using the up and down buttons. Only integer values are allowed.
            </summary>
            <summary>
            IntegerSpinner
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.PropertyChanged">
            <summary>
            Raised when the Value, MinValue, or MaxValue properties are changed. Used internally to trigger revalidating the value.
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.ValueChanged">
            <summary>
            Raised when the Value property is changed.
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.ValueValidated">
            <summary>
            Raised when the Value property is validated, and changed to a valid value if needed.
            </summary>
        </member>
        <member name="M:SolidShineUi.IntegerSpinner.#ctor">
            <summary>
            Create an IntegerSpinner.
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.IntegerSpinner.ColorSchemeProperty">
            <summary>
            A dependency property object backing the related ColorScheme property. See <see cref="P:SolidShineUi.IntegerSpinner.ColorScheme"/> for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.IntegerSpinner.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.ColorScheme">
            <summary>
            Get or set the color scheme used for this spinner. For easier color scheme management, bind this to the window or larger control you're using.
            </summary>
        </member>
        <member name="M:SolidShineUi.IntegerSpinner.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.ButtonBackground">
            <summary>
            Get or set the brush used for the background of the buttons of the spinner.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.DisabledBrush">
            <summary>
            Get or set the brush used for the background of the buttons when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.BorderBrush">
            <summary>
            Get or set the brush of the border around the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.HighlightBrush">
            <summary>
            Get or set the brush used when a button is highlighted (i.e. has a mouse over it or keyboard focus).
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.ClickBrush">
            <summary>
            Get or set the brush used when a button is being clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.BorderDisabledBrush">
            <summary>
            Get or set the brush used for the border around the control, while the control is disabled.
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.InternalValueChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="F:SolidShineUi.IntegerSpinner.ValueProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.Value">
            <summary>
            Get or set the value of the spinner.
            </summary>
        </member>
        <member name="F:SolidShineUi.IntegerSpinner.StepProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.Step">
            <summary>
             Get or set how much to change the value by when you press the up or down button.
            </summary>
        </member>
        <member name="F:SolidShineUi.IntegerSpinner.MinValueProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.MinValue">
            <summary>
             Get or set the minimum value allowed for this spinner (inclusive).
            </summary>
        </member>
        <member name="F:SolidShineUi.IntegerSpinner.MaxValueProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.MaxValue">
            <summary>
             Get or set the maximum value allowed for this spinner (inclusive).
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.InternalRepeatDelayChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.RepeatDelayChanged">
            <summary>
            Raised when the RepeatDelay property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.RepeatDelay">
            <summary>
            Get or set the delay period before starting the repeatedly stepping up or down while the button is held, in milliseconds. Default is 300 milliseconds.
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.InternalCornerRadiusChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.CornerRadiusChanged">
            <summary>
            Raised when the CornerRadius property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.CornerRadius">
            <summary>
            Get or set the corner radius to use around the corners of this control. Setting the corner radius to a value other than 0 displays rounded corners.
            </summary>
        </member>
        <member name="F:SolidShineUi.IntegerSpinner.AcceptExpressionsProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.AcceptExpressions">
            <summary>
            Get or set if the spinner should evaluate arithmetic expressions (such as "2+5") to accept as a value.
            </summary>
            <remarks>
            See the <see cref="T:SolidShineUi.ArithmeticParser"/> class for more info about how expressions are parsed.
            Note that AcceptExpressions is ignored (and expressions not accepted) while <see cref="P:SolidShineUi.IntegerSpinner.DisplayAsHex"/> is set to true.
            </remarks>
        </member>
        <member name="F:SolidShineUi.IntegerSpinner.ShowArrowsProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.InternalShowArrowsChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.ShowArrowsChanged">
            <summary>
            Raised when the ShowArrows property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.ShowArrows">
            <summary>
            Get or set whether the up and down arrow buttons are shown.
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.InternalDisplayAsHexChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.IntegerSpinner.DisplayAsHexChanged">
            <summary>
            Raised when the DisplayAsHex property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.DisplayAsHex">
            <summary>
            Get or set whether to show the value as a hexadecimal or decimal value. Note that while DisplayAsHex is set to true, <see cref="P:SolidShineUi.IntegerSpinner.AcceptExpressions"/> is ignored.
            </summary>
            <remarks>
            Certain situations, particularly involving computer representations of data or memory, may benefit more with displaying numbers as hexadecimals rather than decimals.
            With hexadecimals, the letters A-F are allowed along with 0-9, and the number "15" in decimal turns into "F" in hexadecimal. Please view online resources like
            Wikipedia for more details.
            </remarks>
        </member>
        <member name="F:SolidShineUi.IntegerSpinner.MinimumDigitCountProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.IntegerSpinner.MinimumDigitCount">
            <summary>
            Get or set the minimum number of digits to display in the spinner. A value of 0 or lower will display only the minimum needed for the number being displayed.
            </summary>
            <remarks>
            This modifies the number of digits being rendered via <see cref="M:System.Int32.ToString(System.String)"/>.
            Setting this to <c>4</c> and then setting the Value to <c>16</c> will render the text <c>0016</c> in the display. The stored value isn't affected.
            You should generally avoid setting this to numbers larger than 99, as larger numbers are only supported in newer versions of .NET.
            </remarks>
        </member>
        <member name="M:SolidShineUi.IntegerSpinner.ValidateValue">
            <summary>
            Validate the value and update the UI if needed.
            </summary>
        </member>
        <member name="M:SolidShineUi.IntegerSpinner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.ISelectableCollectionSource`1">
            <summary>
            Defines a generic interface for a collection where items within it can be selected.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
        </member>
        <member name="P:SolidShineUi.ISelectableCollectionSource`1.SelectedItems">
            <summary>
            Get a list of currently selected items.
            </summary>
        </member>
        <member name="M:SolidShineUi.ISelectableCollectionSource`1.AddToSelection(`0)">
            <summary>
            Add an item to the existing list of selected items.
            </summary>
            <param name="item">The item to add to the selection.</param>
        </member>
        <member name="M:SolidShineUi.ISelectableCollectionSource`1.Select(`0)">
            <summary>
            Select an item, replacing the current selection.
            </summary>
            <param name="item">The item to select.</param>
        </member>
        <member name="M:SolidShineUi.ISelectableCollectionSource`1.Deselect(`0)">
            <summary>
            Remove an item from the list of selected items.
            </summary>
            <param name="item">The item to remove from the selection.</param>
        </member>
        <member name="M:SolidShineUi.ISelectableCollectionSource`1.SelectAll">
            <summary>
            Select all items in the collection.
            </summary>
        </member>
        <member name="M:SolidShineUi.ISelectableCollectionSource`1.ClearSelection">
            <summary>
            Clear the list of selected items. No items will be selected.
            </summary>
        </member>
        <member name="M:SolidShineUi.ISelectableCollectionSource`1.IsSelected(`0)">
            <summary>
            Check if an item is currently selected. Only returns true if the item is in this
            collection, and is currently selected; otherwise, this always returns false.
            </summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is in this colelction and is selected; otherwise, false.</returns>
        </member>
        <member name="M:SolidShineUi.ISelectableCollectionSource`1.SelectRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Select a collection of items, replacing the current selection.
            Only items currently in the collection can be selected.
            </summary>
            <param name="items">The items to select.</param>
        </member>
        <member name="P:SolidShineUi.ISelectableCollectionSource`1.CanSelectMultiple">
            <summary>
            Get or set if multiple items can be selected in this collection.
            </summary>
            <remarks>
            Some implementers may not allow this value to be changed via a setter; if so, a <see cref="T:System.NotSupportedException"/> will be thrown.
            </remarks>
        </member>
        <member name="E:SolidShineUi.ISelectableCollectionSource`1.SelectionChanged">
            <summary>
            Raised when the selection is changed, including additions and removals.
            </summary>
        </member>
        <member name="T:SolidShineUi.CollectionSelectionChangedEventArgs">
            <summary>
            A non-generic version of SelectionChangedEventArgs. This can be more generally used in other situations, and implemented by ISelectableCollection.
            </summary>
        </member>
        <member name="M:SolidShineUi.CollectionSelectionChangedEventArgs.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Create a SelectionChangedEventArgs.
            </summary>
            <param name="removedItems">The list of items to be removed.</param>
            <param name="addedItems">The list of items to be added.</param>
        </member>
        <member name="P:SolidShineUi.CollectionSelectionChangedEventArgs.AddedItems">
            <summary>
            The list of items being added to the selection ("selected").
            </summary>
        </member>
        <member name="P:SolidShineUi.CollectionSelectionChangedEventArgs.RemovedItems">
            <summary>
            The list of items being removed from the selection ("deselected").
            </summary>
        </member>
        <member name="T:SolidShineUi.CollectionSelectionChangedEventArgs.SelectionChangedEventHandler">
            <summary>
            Represents a handler for the SelectionChanged event.
            </summary>
            <param name="sender">The source object of the event.</param>
            <param name="e">The event arguments, containing the list of items being added or removed from the selection.</param>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.ActionKeyAction">
            <summary>
            A key action that executes an <see cref="T:System.Action"/> delegate when activated.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.ActionKeyAction.SourceElement">
            <summary>
            Gets the UI element that this action is related to, if any.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.ActionKeyAction.#ctor(System.Action,System.String,System.Windows.UIElement)">
            <summary>
            Create a new ActionKeyAction.
            </summary>
            <param name="action">The action to execute when this key action is activated.</param>
            <param name="methodId">The unique ID of this key action.</param>
            <param name="sourceElement">The UI element, if any, this action is related to. For example, it could be a menu item or button that would alternatively trigger this action.</param>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.ActionKeyAction.ID">
            <summary>
            Get or set the unique ID associated with this key action.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.ActionKeyAction.Execute">
            <summary>
            Activate this key action.
            </summary>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.CommandKeyAction">
            <summary>
            A key action that executes a command when activated.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.CommandKeyAction.SourceElement">
            <summary>
            Gets the UI element that this action is related to, if any.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.CommandKeyAction.CommandParameter">
            <summary>
            Get the command parameter associated with this key action. When the command is executed, this parameter is also supplied. Note: this can be null.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.CommandKeyAction.CommandTarget">
            <summary>
            Get the command target to associated with this key action. When the command is executed, it will be executed in relation to this target. Note: this can be null.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.CommandKeyAction.#ctor(System.Windows.Input.ICommand,System.Object,System.Windows.IInputElement,System.String,System.Windows.UIElement)">
            <summary>
            Create a CommandKeyAction.
            </summary>
            <param name="command">The command to execute when this key action is activated.</param>
            <param name="commandParameter">The parameter to supply with this command. Set to null to not set a parameter.</param>
            <param name="commandTarget">The target of the command. Set to null to not set a target.</param>
            <param name="methodId">The unique ID to associate with this key action.</param>
            <param name="sourceItem">The UI element, if any, associated with this command. For example, it could be a menu item or button that would alternatively execute this command.</param>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.CommandKeyAction.#ctor(System.Windows.Input.ICommand,System.String,System.Windows.UIElement)">
            <summary>
            Create a CommandKeyAction.
            </summary>
            <param name="command">The command to execute when this key action is activated.</param>
            <param name="methodId">The unique ID to associate with this key action.</param>
            <param name="sourceItem">The UI element, if any, associated with this command. For example, it could be a menu item or button that would alternatively execute this command.</param>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.CommandKeyAction.ID">
            <summary>
            Get or set the unique ID associated with this key action.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.CommandKeyAction.Command">
            <summary>
            Get the command that will be executed when this key action is activated.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.CommandKeyAction.Execute">
            <summary>
            Activate this key action.
            </summary>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.IKeyAction">
            <summary>
            The interface which all key actions are based on.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.IKeyAction.ID">
            <summary>
            Get or set the unique ID associated with this key action.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.IKeyAction.Execute">
            <summary>
            Execute this key action.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.IKeyAction.SourceElement">
            <summary>
            Get the UI element associated with the key action's activator, if any.
            </summary>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.KeyActionList">
            <summary>
            A list of IKeyActions, used for loading a keyboard shortcuts settings file and associating the commands' IDs to their key actions. Also verifies that there are not multiple key actions with the same ID.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyActionList.Add(SolidShineUi.KeyboardShortcuts.IKeyAction)">
            <summary>
            Add an IKeyAction to the list. If an IKeyAction with the same ID is already on this list, this new IKeyAction is not added.
            </summary>
            <param name="action">The IKeyAction to add.</param>
            <returns>True if the item was added; false if the item was not added (an action is already on this list with the same ID).</returns>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyActionList.AddRange(System.Collections.Generic.IEnumerable{SolidShineUi.KeyboardShortcuts.IKeyAction})">
            <summary>
            Add a collection of IKeyAction items to this list. If an IKeyAction with the same ID is already on this list, the new IKeyAction is not added and is skipped.
            </summary>
            <param name="actions">The collection of IKeyAction items to add.</param>
            <returns>The collection of items that were successfully added to the list. Any items that are not on this list were not added, as an action is already on this list with the same ID.</returns>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyActionList.Insert(System.Int32,SolidShineUi.KeyboardShortcuts.IKeyAction)">
            <summary>
            Inserts an IKeyAction to the list at the specified index. If an IKeyAction with the same ID is already on this list, this new IKeyAction is not inserted.
            </summary>
            <param name="index">The zero-based index to insert the IKeyAction at.</param>
            <param name="action">The IKeyAction to add.</param>
            <returns>True if the item was added; false if the item was not added (an action is already on this list with the same ID).</returns>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyActionList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{SolidShineUi.KeyboardShortcuts.IKeyAction})">
            <summary>
            Inserts a collection of IKeyAction items to the list at the specified index. If an IKeyAction with the same ID is already on this list, the new IKeyAction is not inserted and is skipped.
            </summary>
            <param name="index">The zero-based index to insert the collection at.</param>
            <param name="actions">The collection of IKeyAction items to insert.</param>
            <returns>The collection of items that were successfully added to the list. Any items that are not on this list were not added, as an action is already on this list with the same ID.</returns>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyActionList.ContainsId(System.String)">
            <summary>
            Get if this list contains an IKeyAction with this ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyActionList.GetFromId(System.String)">
            <summary>
            Get an IKeyAction with a particular ID.
            </summary>
            <param name="id">The ID to get.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no item with this ID.</exception>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyActionList.Item(System.String)">
            <summary>
            Get an IKeyAction with a particular ID.
            </summary>
            <param name="id">The ID to get.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no item with this ID.</exception>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.KeyboardShortcutHandler">
            <summary>
            A helper class to manage keyboard shortcut support for a given WPF window. Connect this to a window to easily add and manage keyboard shortcuts.
            </summary>
            <remarks>
            This class listens to a Window's KeyDown and KeyUp events to detect when keyboard shortcuts are pressed and activate them. See online documentation for more info about keyboard shortcut support.
            </remarks>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyboardShortcutHandler.#ctor(System.Windows.Window)">
            <summary>
            Create a KeyboardShortcutHandler and connect it to a window.
            </summary>
            <param name="w">The window to connect to this KeyboardShortcutHandler.</param>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyboardShortcutHandler.Window">
            <summary>
            Get the window that this KeyboardShortcutHandler is connected to. When keys are pressed in this window, this will activate keyboard shortcuts.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyboardShortcutHandler.KeyRegistry">
            <summary>
            Get the KeyRegistry used by this KeyboardShortcutHandler. The KeyRegistry contains a list of all the shortcuts registered.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyboardShortcutHandler.LoadShortcutsFromList(System.Collections.Generic.List{SolidShineUi.KeyboardShortcuts.KeyboardShortcut})">
            <summary>
            Load in and register a list of keyboard shortcuts.
            </summary>
            <param name="ks">The list of shortcuts to load.</param>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyboardShortcutHandler.LoadShortcutsFromFile(System.String,SolidShineUi.KeyboardShortcuts.KeyActionList)">
            <summary>
            Load in and register keyboard shortcuts from a file. A KeyActionList is needed to map the shortcuts to their actions.
            </summary>
            <param name="file">The file to load from.</param>
            <param name="methodList">The list of actions available for keyboard shortcuts, to use for mapping.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file cannot be found.</exception>
            <remarks>
            If there is a shortcut in the file that references an action not in the <paramref name="methodList"/>, that shortcut is skipped.
            Also, if a shortcut in the file has the same keyboard combination and key as a shortcut already registed, that shortcut is skipped.
            </remarks>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyboardShortcutHandler.WriteShortcutsToFileAsync(System.String)">
            <summary>
            Write the currently registered keyboard shortcuts to a file, which can be loaded in later.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.KeyboardCombination">
            <summary>
            A list of all combinations of modifier keys being pressed.
            </summary>
        </member>
        <member name="F:SolidShineUi.KeyboardShortcuts.KeyboardCombination.None">
            <summary>
            No modifier keys pressed.
            </summary>
        </member>
        <member name="F:SolidShineUi.KeyboardShortcuts.KeyboardCombination.Ctrl">
            <summary>
            Ctrl modifier key being pressed.
            </summary>
        </member>
        <member name="F:SolidShineUi.KeyboardShortcuts.KeyboardCombination.Alt">
            <summary>
            Alt modifier key being pressed.
            </summary>
        </member>
        <member name="F:SolidShineUi.KeyboardShortcuts.KeyboardCombination.Shift">
            <summary>
            Shift modifier key being pressed.
            </summary>
        </member>
        <member name="F:SolidShineUi.KeyboardShortcuts.KeyboardCombination.AltShift">
            <summary>
            Alt and Shift modifier keys being pressed.
            </summary>
        </member>
        <member name="F:SolidShineUi.KeyboardShortcuts.KeyboardCombination.CtrlAlt">
            <summary>
            Ctrl and Alt modifier keys being pressed.
            </summary>
        </member>
        <member name="F:SolidShineUi.KeyboardShortcuts.KeyboardCombination.CtrlShift">
            <summary>
            Ctrl and Shift modifier keys being pressed.
            </summary>
        </member>
        <member name="F:SolidShineUi.KeyboardShortcuts.KeyboardCombination.CtrlAltShift">
            <summary>
            Ctrl, Shift, and Alt modifier keys being pressed.
            </summary>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.KeyboardShortcutsIo">
            <summary>
            A helper class to save or load keyboard shortcuts into files.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyboardShortcutsIo.LoadFromFile(System.String,SolidShineUi.KeyboardShortcuts.KeyActionList)">
            <summary>
            Load a list of keyboard shortcuts from a file. The list of available actions is also needed to map the shortcuts to these actions.
            </summary>
            <param name="file">The file to load from.</param>
            <param name="list">A list of actions available to be accessed via keyboard shortcuts.</param>
            <returns>A list of keyboard shortcuts, which can be loaded into a KeyRegistry.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file does not exist.</exception>
            <remarks>If there is a shortcut in this file that reference an action ID that isn't on the <paramref name="list"/>, then that shortcut is skipped.</remarks>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyboardShortcutsIo.WriteToFile(SolidShineUi.KeyboardShortcuts.KeyRegistry,System.String)">
            <summary>
            Write a list of keyboard shortcuts to a file.
            </summary>
            <param name="registry">They keyboard shortcut registry to read from.</param>
            <param name="file">The file to write to.</param>
            <returns>The filename of the file written to. This should match the filename passed in.</returns>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.KeyboardShortcut">
            <summary>
            Represents a single keyboard shortcut entry.
            </summary>
        </member>
        <member name="F:SolidShineUi.KeyboardShortcuts.KeyboardShortcut.UnmodifiedSafeKeys">
            <summary>
            Get a list of keys that are safe to use for keyboard shortcuts without having Ctrl or Alt pressed.
            Using keys other than these in a program that has text input may end up with conflicts or unintended issues as users try to type.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyboardShortcut.#ctor(SolidShineUi.KeyboardShortcuts.KeyboardCombination,System.Windows.Input.Key,SolidShineUi.KeyboardShortcuts.IKeyAction)">
            <summary>
            Create a keyboard shortcut entry.
            </summary>
            <param name="combination">The key combination needed, if any, for activating this shortcut.</param>
            <param name="key">The specific key that corresponds to this shortcut.</param>
            <param name="action">The action to perform when this shortcut is activated.</param>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyboardShortcut.Combination">
            <summary>
            The control key combination needed before activating this shortcut. This shortcut will not activate unless these keys are also held down.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyboardShortcut.Key">
            <summary>
            The specific key that, when pressed, triggers the shortcut.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyboardShortcut.KeyString">
            <summary>
            The string to display to the user, so they know which keys to press to activate the shortcut.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyboardShortcut.GenerateKeyString">
            <summary>
            Generate the string to display to the user, so they know which keys to press to activate the shortcut, such as "Ctrl+G" or "F12".
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyboardShortcut.Action">
            <summary>
            The action associated with this keyboard shortcut. When this shortcut is activated, this is the action that will occur.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyboardShortcut.MethodId">
            <summary>
            Get or set the ID associated with the action of the keyboard shortcut, which is used for mapping shortcuts to actions (for example while loading or saving files). This should match the ID in the Action property.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyboardShortcut.SourceElement">
            <summary>
            Get or set the element associated with this keyboard shortcut and action (such as a menu item if the action is associated with the command of a menu item). Having an element is not required.
            </summary>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.KeyboardShortcutEventArgs">
            <summary>
            The generic event arguments for keyboard shortcut related events in the KeyRegistry.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyboardShortcutEventArgs.KeyboardShortcut">
            <summary>
            The keyboard shortcut referenced in the event.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyboardShortcutEventArgs.#ctor(SolidShineUi.KeyboardShortcuts.KeyboardShortcut)">
            <summary>
            Create a KeyboardShortcutEventArgs.
            </summary>
            <param name="shortcut">The keyboard shortcut referenced in the event.</param>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.KeyRegistry">
            <summary>
            A class to hold and handle keyboard shortcuts, and determine which shortcut to use based upon key presses.
            </summary>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.KeyRegistry.KeyboardShortcutEventHandler">
            <summary>
            A delegate to be used with events regarding keyboard shortcuts.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="e">The event arguments associated with this event.</param>
        </member>
        <member name="E:SolidShineUi.KeyboardShortcuts.KeyRegistry.ShortcutRegistered">
            <summary>
            Raised when a shortcut is added (registered) to this KeyRegistry.
            </summary>
        </member>
        <member name="E:SolidShineUi.KeyboardShortcuts.KeyRegistry.ShortcutUnregistered">
            <summary>
            Raised when a shortcut is removed (unregistered) from this KeyRegistry.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.KeyRegistry.RegisteredShortcuts">
            <summary>
            A read-only list of all keyboard shortcuts registed in this registry. Use the RegisteryKeyShortcut and UnregisterKeyShortcut methods to add or remove shortcuts.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyRegistry.RegisterKeyShortcut(SolidShineUi.KeyboardShortcuts.KeyboardShortcut)">
            <summary>
            Register a keyboard shortcut with the registry.
            </summary>
            <param name="kc">The keyboard shortcut to register.</param>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyRegistry.RegisterKeyShortcut(SolidShineUi.KeyboardShortcuts.KeyboardCombination,System.Windows.Input.Key,SolidShineUi.KeyboardShortcuts.IKeyAction)">
            <summary>
            Register a keyboard shortcut with the registry.
            </summary>
            <param name="combination">The combination of modifier keys to press for this shortcut.</param>
            <param name="key">The specific key that activates this keyboard shortcut.</param>
            <param name="action">The action to perform when the keyboard shortcut is pressed.</param>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyRegistry.UnregisterKeyShortcut(SolidShineUi.KeyboardShortcuts.KeyboardShortcut)">
            <summary>
            Unregister (remove) a shortcut from this registry.
            </summary>
            <param name="ks">The keyboard shortcut to unregister.</param>
            <remarks>This overload of this method looks for a specific keyboard shortcut instance that is currently in the registry.
            To remove based upon the keys being pressed, use the other overload instead (<see cref="M:SolidShineUi.KeyboardShortcuts.KeyRegistry.UnregisterKeyShortcut(SolidShineUi.KeyboardShortcuts.KeyboardCombination,System.Windows.Input.Key)"/>).</remarks>
            <returns>Returns if the shortcut was able to be removed or not. Will return false if this registry does not contain this specific shortcut.</returns>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyRegistry.UnregisterKeyShortcut(SolidShineUi.KeyboardShortcuts.KeyboardCombination,System.Windows.Input.Key)">
            <summary>
            Unregister (remove) a shortcut from this registry.
            </summary>
            <param name="combination">The combination of modifier keys to be pressed for this shortcut.</param>
            <param name="key">The key to press to activate this shortcut.</param>
            <returns>True if the shortcut was found and removed; false if there is no shortcut with this particular key and modifier key combination.</returns>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyRegistry.GetShortcutsForMethod(System.String)">
            <summary>
            Get a list of keyboard shortcuts registered to a certain method.
            </summary>
            <param name="methodId">The name of the method. If you used <see cref="M:SolidShineUi.KeyboardShortcuts.RoutedEventKeyAction.CreateListFromMenu(SolidShineUi.Menu)"/> to fill from a menu, the name will be the name of the MenuItem itself.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyRegistry.GetActionForKey(SolidShineUi.KeyboardShortcuts.KeyboardCombination,System.Windows.Input.Key)">
            <summary>
            Get the IKeyAction associated with a certain keyboard shortcut.
            </summary>
            <param name="key">The key for this shortcut.</param>
            <param name="combination">The combination of modifier keys to have pressed for this shortcut.</param>
            <returns>A Tuple containing the IKeyAction associated with this shortcut, if there is one (null if there is not), and a friendly string that displays the keyboard combination to press (i.e. "Ctrl+Alt+V").</returns>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.KeyRegistry.GetActionForKey(System.Windows.Input.Key,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get the IKeyAction associated with a certain keyboard shortcut.
            </summary>
            <param name="key">The key for this shortcut.</param>
            <param name="shift">Set if the Shift key is part of this shortcut.</param>
            <param name="alt">Set if the Alt key is part of this shortcut.</param>
            <param name="ctrl">Set if the Ctrl key is part of this shortcut.</param>
            <returns>A Tuple containing the IKeyAction associated with this shortcut, if there is one (null if there is not), and a friendly string that displays the keyboard combination to press (i.e. "Ctrl+Alt+V").</returns>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.SubKeyRegistry">
            <summary>
            A key registry that has a master key registry that it syncs up with. Useful in scenarios where you want to have multiple layers of shortcuts, with only some layers being applicable at certain points.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.SubKeyRegistry.#ctor(SolidShineUi.KeyboardShortcuts.KeyRegistry)">
            <summary>
            Create a SubKeyRegistry.
            </summary>
            <param name="master">The master KeyRegistry to stay in sync with.</param>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.SubKeyRegistry.RegisterExistingShortcuts">
            <summary>
            Register all shortcuts into this SubKeyRegistry that are currently in the master KeyRegistry.
            </summary>
        </member>
        <member name="T:SolidShineUi.KeyboardShortcuts.RoutedEventKeyAction">
            <summary>
            A key action that executes a routed event when activated.
            </summary>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.RoutedEventKeyAction.SourceElement">
            <summary>
            Gets the UI element that this action is related to, if any.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.RoutedEventKeyAction.#ctor(System.Windows.RoutedEventHandler,System.String,System.Windows.UIElement)">
            <summary>
            Create a RoutedEventKeyAction.
            </summary>
            <param name="reh">The RoutedEventHandler to invoke when this key action is activated.</param>
            <param name="methodId">The unique ID to associate with this key action.</param>
            <param name="sourceElement">The UI element, if any, associated with this RoutedEventHandler. For example, it could be a menu item or button that would alternatively invoke this routed event handler.</param>
        </member>
        <member name="P:SolidShineUi.KeyboardShortcuts.RoutedEventKeyAction.ID">
            <summary>
            Get or set the unique ID associated with this key action.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.RoutedEventKeyAction.Execute">
            <summary>
            Activate this key action.
            </summary>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.RoutedEventKeyAction.CreateListFromMenu(SolidShineUi.Menu)">
            <summary>
            Create a list of key actions from all the menu items in a particular menu. Each menu item with a name and Click event handler will be added to this list.
            </summary>
            <param name="m">The menu to load from.</param>
            <remarks>No exceptions are thrown from this method; a blank list is returned if no menu items could be added. Each menu item should have a name (via the <c>Name</c> or <c>x:Name</c> properties).
            If multiple menu items do not have a name, then only the first one encountered will be added to the list.</remarks>
            <returns>A list of key actions created from the menu passed in.</returns>
        </member>
        <member name="M:SolidShineUi.KeyboardShortcuts.RoutedEventKeyAction.CreateFromMenuItem(System.Windows.Controls.MenuItem)">
            <summary>
            Generate a RoutedEventKeyAction using the Click event of a MenuItem. If the MenuItem doesn't have the Click event handled, an exception is thrown.
            </summary>
            <param name="mi">The menu item to use the Click event from.</param>
            <exception cref="T:System.MissingMethodException">Thrown if the MenuItem does not have any Click event handlers.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if there was an issue entering into the MenuItem via reflection. If this error occurs, please contact the library creator.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the MenuItem is null.</exception>
        </member>
        <member name="T:SolidShineUi.LinkTextBlock">
            <summary>
            A text block that has a Click event, thus looking and acting more like a generic hyperlink from a web page.
            </summary>
        </member>
        <member name="E:SolidShineUi.LinkTextBlock.Click">
            <summary>
            This event is raised when the control is clicked.
            </summary>
        </member>
        <member name="E:SolidShineUi.LinkTextBlock.InternalBrushChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="P:SolidShineUi.LinkTextBlock.TextBrush">
            <summary>
            Get or set the standard foreground brush for the text. This overwrites the Foreground property.
            </summary>
        </member>
        <member name="P:SolidShineUi.LinkTextBlock.HighlightBrush">
            <summary>
            Get or set the brush for when the control has mouseover or keyboard focus.
            </summary>
        </member>
        <member name="P:SolidShineUi.LinkTextBlock.DisabledBrush">
            <summary>
            Get or set the brush for when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.LinkTextBlock.AutoSetLinkFromText">
            <summary>
            Get or set if the LinkTextBlock should automatically create a link based upon the Text property. See remarks for more details.
            </summary>
            <remarks>
            When AutoSetLinkFromText is set to <c>true</c>, the LinkTextBlock attempts to open a file or URL based upon the value of the Text property when the user clicks on the control.
            For example, if this property is set to <c>true</c> and the Text property is set to <c>"https://microsoft.com"</c>, the LinkTextBlock will open "https://microsoft.com" when the control is clicked,
            even if a Click event handler is not attached. Note that for web links, the scheme/protocol should be present (i.e. "http", "https", "ftp", etc.).
            <para />
            Note that the Click event will still fire even if this property is set to <c>true</c>.
            <para/>
            If an error occurs while attempting to open the link, nothing happens. If a debugger is attached, the LinkTextBlock attempts to log a message to the debugger.
            </remarks>
        </member>
        <member name="P:SolidShineUi.LinkTextBlock.UnderlineOnHighlight">
            <summary>
            Get or set if the text should be underlined when the control has mouseover or keyboard focus.
            </summary>
        </member>
        <member name="M:SolidShineUi.LinkTextBlock.#ctor">
            <summary>
            Create a LinkTextBlock.
            </summary>
        </member>
        <member name="M:SolidShineUi.LinkTextBlock.#ctor(System.Windows.Documents.Inline)">
            <summary>
            Create a LinkTextBlock, with a <see cref="T:System.Windows.Documents.Inline"/> as the initial display content.
            </summary>
            <param name="inline">The object to be displayed as the initial content.</param>
        </member>
        <member name="P:SolidShineUi.LinkTextBlock.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this element is enabled in the user interface (UI).
            </summary>
        </member>
        <member name="T:SolidShineUi.LongSpinner">
            <summary>
            A control for selecting a number, via typing in a number, an arithmetic expression, or using the up and down buttons. Only Long values are allowed.
            </summary>
            <summary>
            LongSpinner
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.PropertyChanged">
            <summary>
            Raised when the Value, MinValue, or MaxValue properties are changed. Used internally to trigger revalidating the value.
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.ValueChanged">
            <summary>
            Raised when the Value property is changed.
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.ValueValidated">
            <summary>
            Raised when the Value property is validated, and changed to a valid value if needed.
            </summary>
        </member>
        <member name="M:SolidShineUi.LongSpinner.#ctor">
            <summary>
            Create an LongSpinner.
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.LongSpinner.ColorSchemeProperty">
            <summary>
            A dependency property object backing the related ColorScheme property. See <see cref="P:SolidShineUi.LongSpinner.ColorScheme"/> for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.LongSpinner.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.LongSpinner.ColorScheme">
            <summary>
            Get or set the color scheme used for this spinner. For easier color scheme management, bind this to the window or larger control you're using.
            </summary>
        </member>
        <member name="M:SolidShineUi.LongSpinner.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.LongSpinner.ButtonBackground">
            <summary>
            Get or set the brush used for the background of the buttons of the spinner.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.DisabledBrush">
            <summary>
            Get or set the brush used for the background of the buttons when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.BorderBrush">
            <summary>
            Get or set the brush of the border around the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.HighlightBrush">
            <summary>
            Get or set the brush used when a button is highlighted (i.e. has a mouse over it or keyboard focus).
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.ClickBrush">
            <summary>
            Get or set the brush used when a button is being clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.BorderDisabledBrush">
            <summary>
            Get or set the brush used for the border around the control, while the control is disabled.
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.internalValueChanged">
            <summary>
            internal event for handling a property changed. Please view the event that is not prefixed as "internal".
            </summary>
        </member>
        <member name="F:SolidShineUi.LongSpinner.ValueProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.Value">
            <summary>
            Get or set the value of the spinner.
            </summary>
        </member>
        <member name="F:SolidShineUi.LongSpinner.StepProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.Step">
            <summary>
             Get or set how much to change the value by when you press the up or down button.
            </summary>
        </member>
        <member name="F:SolidShineUi.LongSpinner.MinValueProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.MinValue">
            <summary>
             Get or set the minimum value allowed for this spinner (inclusive).
            </summary>
        </member>
        <member name="F:SolidShineUi.LongSpinner.MaxValueProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.MaxValue">
            <summary>
             Get or set the maximum value allowed for this spinner (inclusive).
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.internalRepeatDelayChanged">
            <summary>
            internal event for handling a property changed. Please view the event that is not prefixed as "internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.RepeatDelayChanged">
            <summary>
            Raised when the RepeatDelay property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.RepeatDelay">
            <summary>
            Get or set the delay period before starting the repeatedly stepping up or down while the button is held, in milliseconds. Default is 300 milliseconds.
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.internalCornerRadiusChanged">
            <summary>
            internal event for handling a property changed. Please view the event that is not prefixed as "internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.CornerRadiusChanged">
            <summary>
            Raised when the CornerRadius property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.CornerRadius">
            <summary>
            Get or set the corner radius to use around the corners of this control. Setting the corner radius to a value other than 0 displays rounded corners.
            </summary>
        </member>
        <member name="F:SolidShineUi.LongSpinner.AcceptExpressionsProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.AcceptExpressions">
            <summary>
            Get or set if the spinner should evaluate arithmetic expressions (such as "2+5") to accept as a value.
            </summary>
            <remarks>
            See the <see cref="T:SolidShineUi.ArithmeticParser"/> class for more info about how expressions are parsed.
            Note that AcceptExpressions is ignored (and expressions not accepted) while <see cref="P:SolidShineUi.LongSpinner.DisplayAsHex"/> is set to true.
            </remarks>
        </member>
        <member name="F:SolidShineUi.LongSpinner.ShowArrowsProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.internalShowArrowsChanged">
            <summary>
            internal event for handling a property changed. Please view the event that is not prefixed as "internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.ShowArrowsChanged">
            <summary>
            Raised when the ShowArrows property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.ShowArrows">
            <summary>
            Get or set whether the up and down arrow buttons are shown.
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.internalDisplayAsHexChanged">
            <summary>
            internal event for handling a property changed. Please view the event that is not prefixed as "internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.LongSpinner.DisplayAsHexChanged">
            <summary>
            Raised when the DisplayAsHex property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.DisplayAsHex">
            <summary>
            Get or set whether to show the value as a hexadecimal or decimal value. Note that while DisplayAsHex is set to true, <see cref="P:SolidShineUi.LongSpinner.AcceptExpressions"/> is ignored.
            </summary>
            <remarks>
            Certain situations, particularly involving computer representations of data or memory, may benefit more with displaying numbers as hexadecimals rather than decimals.
            With hexadecimals, the letters A-F are allowed along with 0-9, and the number "15" in decimal turns longo "F" in hexadecimal. Please view online resources like
            Wikipedia for more details.
            </remarks>
        </member>
        <member name="F:SolidShineUi.LongSpinner.MinimumDigitCountProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.LongSpinner.MinimumDigitCount">
            <summary>
            Get or set the minimum number of digits to display in the spinner. A value of 0 or lower will display only the minimum needed for the number being displayed.
            </summary>
            <remarks>
            This modifies the number of digits being rendered via <see cref="M:System.Int64.ToString(System.String)"/>.
            Setting this to <c>4</c> and then setting the Value to <c>16</c> will render the text <c>0016</c> in the display. The stored value isn't affected.
            You should generally avoid setting this to numbers larger than 99, as larger numbers are only supported in newer versions of .NET.
            </remarks>
        </member>
        <member name="M:SolidShineUi.LongSpinner.ValidateValue">
            <summary>
            Validate the value and update the UI if needed.
            </summary>
        </member>
        <member name="M:SolidShineUi.LongSpinner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.Menu">
            <summary>
            A menu control that can display and organize commands within various drop-down elements. This differs from the WPF menu with a visual style that matches other Solid Shine UI controls.
            </summary>
        </member>
        <member name="E:SolidShineUi.Menu.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.Menu.ColorScheme">
            <summary>
            Get or set the color scheme used for this control. The color scheme can quickly apply a whole visual style to your control.
            </summary>
        </member>
        <member name="M:SolidShineUi.Menu.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="M:SolidShineUi.Menu.ApplyColorScheme(SolidShineUi.HighContrastOption)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="hco">The high-contrast color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.Menu.MenuBackground">
            <summary>
            Get or set the brush used for the background of the menu's drop-down area. This is different from the Background brush, which set the background of the top menu bar.
            </summary>
        </member>
        <member name="P:SolidShineUi.Menu.DisabledBrush">
            <summary>
            Get or set the brush used for the foreground of menu items that are disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.Menu.BorderBrush">
            <summary>
            Get or set the brush used for the border of the menu's drop-down area.
            </summary>
        </member>
        <member name="P:SolidShineUi.Menu.HighlightBrush">
            <summary>
            Get or set the brush used for the top-level menu items in the menu bar, when the mouse is over them or they have keyboard focus.
            </summary>
        </member>
        <member name="P:SolidShineUi.Menu.HighlightSubitemBrush">
            <summary>
            Get or set the brush used for menu items that aren't top-level on the menu bar, when the mouse is over them or they have keyboard focus.
            </summary>
        </member>
        <member name="P:SolidShineUi.Menu.CheckedBrush">
            <summary>
            Get or set the brush to use for the check highlight for checked menu items.
            </summary>
        </member>
        <member name="T:SolidShineUi.MenuButton">
            <summary>
            A flat-styled button that displays a menu when it is clicked.
            </summary>
        </member>
        <member name="M:SolidShineUi.MenuButton.#ctor">
            <summary>
            Create a new MenuButton.
            </summary>
        </member>
        <member name="P:SolidShineUi.MenuButton.Menu">
            <summary>
            Get or set the menu that appears when the button is clicked.
            </summary>
        </member>
        <member name="F:SolidShineUi.MenuButton.MenuClosed">
            <summary>
            This event is raised when this MenuButtons's menu is closed.
            </summary>
        </member>
        <member name="P:SolidShineUi.MenuButton.MenuPlacement">
            <summary>
            Get or set the placement mode for the MenuButton's menu.
            </summary>
        </member>
        <member name="P:SolidShineUi.MenuButton.MenuPlacementRectangle">
            <summary>
            Get or set the placement rectangle for the MenuButton's menu. This sets the area relative to the button that the menu is positioned.
            </summary>
        </member>
        <member name="P:SolidShineUi.MenuButton.StaysOpen">
            <summary>
            Get or set if the menu should close automatically. Remember to set the <c>StaysOpenOnClick</c> property for child menu items as well.
            </summary>
        </member>
        <member name="P:SolidShineUi.MenuButton.ShowMenuArrow">
            <summary>
            Get or set if an arrow should be shown to the right of the button content to indicate the button as a menu button.
            </summary>
        </member>
        <member name="P:SolidShineUi.MenuButton.KeepMenuArrowOnRight">
            <summary>
            Get or set if the arrow should be kept to the right side of the button, even if the content of the button is left or center aligned.
            </summary>
        </member>
        <member name="M:SolidShineUi.MenuButton.ApplyColorScheme(SolidShineUi.ColorScheme,System.Boolean,System.Boolean)">
            <summary>
            Apply a color scheme to this control, and set some other optional appearance settings. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply</param>
            <param name="transparentBack">Set if the button should have no background when not focused or highlighted. This can also be achieved with the <c>TransparentBack</c> property.</param>
            <param name="useAccentColors">Set if accent colors should be used for this button, rather than the main color scheme colors.
            This can also be achieved with the <c>UseAccentColors</c> property.
            </param>
        </member>
        <member name="M:SolidShineUi.MenuButton.ApplyColorScheme(SolidShineUi.HighContrastOption,System.Boolean)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="hco">The high-contrast color scheme to apply.</param>
            <param name="transparentBack">Set if the button should have no background when not focused or highlighted. This can also be achieved with the <c>TransparentBack</c> property.</param>
        </member>
        <member name="M:SolidShineUi.MenuButton.MenuButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Internal method for opening up the menu when the button is clicked
            </summary>
        </member>
        <member name="T:SolidShineUi.MenuItemExtensions">
            <summary>
            Adds additional methods that can be used to hook into the menu item's IsEnabledChanged event.
            </summary>
        </member>
        <member name="M:SolidShineUi.MenuItemExtensions.AttachEnabledHandler(System.Windows.Controls.MenuItem,System.Windows.DependencyPropertyChangedEventHandler)">
            <summary>
            Attach a handler for the IsEnabledChanged event for a particular MenuItem.
            </summary>
            <param name="mi">The MenuItem to attach to.</param>
            <param name="eh">The event handler to use.</param>
            <remarks>When done listening to this event or when deconstructing or cleaning up the UI, call <c>DetachEnabledHandler</c> to detach this event handler.</remarks>
        </member>
        <member name="M:SolidShineUi.MenuItemExtensions.DetachEnabledHandler(System.Windows.Controls.MenuItem,System.Windows.DependencyPropertyChangedEventHandler)">
            <summary>
            Detach a handler for the IsEnabledChanged event for a particular MenuItem.
            </summary>
            <param name="mi">The MenuItem to detach from.</param>
            <param name="eh">The event handler to detach.</param>
        </member>
        <member name="T:SolidShineUi.NativeMethods">
            <summary>
            A small collection of methods to interact with native Windows libraries, used to modify window behavior or get file icons.
            </summary>
        </member>
        <member name="M:SolidShineUi.NativeMethods.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            Displays the window of a specified handle.
            </summary>
            <param name="hWnd">The handle of the window to show.</param>
            <param name="nCmdShow">A command associated with this action.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.SetForegroundWindow(System.IntPtr)">
            <summary>
            Moves a specified window to the foreground.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <returns></returns>
        </member>
        <member name="F:SolidShineUi.NativeMethods.GWL_STYLE">
            <summary>
            The standard style for a window.
            </summary>
        </member>
        <member name="F:SolidShineUi.NativeMethods.WS_MAXIMIZEBOX">
            <summary>
            The integer value that points to the maximize button in a window.
            </summary>
        </member>
        <member name="F:SolidShineUi.NativeMethods.WS_MINIMIZEBOX">
            <summary>
            The integer value that points to the minimize button in a window.
            </summary>
        </member>
        <member name="M:SolidShineUi.NativeMethods.GetWindowLong(System.IntPtr,System.Int32)">
            <summary>
            Get this window's long value, which can be used for further modification.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <param name="nIndex">The standard style of this window.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.SetWindowLong(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Set this window's long value, which is used to modify features and abilities of this window.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <param name="nIndex">The standard style of this window.</param>
            <param name="dwNewLong">The long to set for this window.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.HideMaximizeButton(System.Windows.Window)">
            <summary>
            Hide/disable the maximize button, so that the window cannot be maximized.
            </summary>
            <param name="w">The window to hide the button on.</param>
        </member>
        <member name="M:SolidShineUi.NativeMethods.HideMaximizeButton(System.IntPtr)">
            <summary>
            Hide/disable the maximize button, so that the window cannot be maximized.
            </summary>
            <param name="hwnd">The handle to the window.</param>
        </member>
        <member name="M:SolidShineUi.NativeMethods.HideMinimizeButton(System.Windows.Window)">
            <summary>
            Hide/disable the minimize button, so that the window cannot be minimized (hidden in taskbar).
            </summary>
            <param name="w">The window to hide the button on.</param>
        </member>
        <member name="M:SolidShineUi.NativeMethods.HideMinimizeButton(System.IntPtr)">
            <summary>
            Hide/disable the minimize button, so that the window cannot be minimized (hidden in taskbar).
            </summary>
            <param name="hwnd">The handle to the window.</param>
        </member>
        <member name="M:SolidShineUi.NativeMethods.HideMinimizeAndMaximizeButtons(System.Windows.Window)">
            <summary>
            Hide/disable the minimize and maximize buttons, so that the window cannot be maximized or minimized.
            </summary>
            <param name="w">The window to hide the buttons on.</param>
        </member>
        <member name="M:SolidShineUi.NativeMethods.HideMinimizeAndMaximizeButtons(System.IntPtr)">
            <summary>
            Hide/disable the minimize and maximize buttons, so that the window cannot be maximized or minimized.
            </summary>
            <param name="hwnd">The handle to the window.</param>
        </member>
        <member name="M:SolidShineUi.NativeMethods.DisableMaximizeAction(System.Windows.Window)">
            <summary>
            Calls the native Windows method to disable the Maximize action (via the right-click menu and the like). For <see cref="T:SolidShineUi.FlatWindow"/>, you'll want to update the CaptionDisplayType to remove the physical button.
            </summary>
        </member>
        <member name="M:SolidShineUi.NativeMethods.DisableMinimizeAction(System.Windows.Window)">
            <summary>
            Calls the native Windows method to disable the Minimize action (via the right-click menu and the like). For <see cref="T:SolidShineUi.FlatWindow"/>, you'll want to update the CaptionDisplayType to remove the physical button.
            </summary>
        </member>
        <member name="M:SolidShineUi.NativeMethods.DisableMinimizeAndMaximizeActions(System.Windows.Window)">
            <summary>
            Calls the native Windows method to disable the Minimize and Maximize actions (via the right-click menu and the like). For <see cref="T:SolidShineUi.FlatWindow"/>, you'll want to update the CaptionDisplayType to remove the physical buttons.
            </summary>
        </member>
        <member name="M:SolidShineUi.NativeMethods.GetSmallIconHandle(System.String)">
            <summary>
            Get a handle for a small (16x16) icon associated with a file.
            </summary>
            <param name="path">The file to get the icon for.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.GetLargeIconHandle(System.String)">
            <summary>
            Get a handle for a large (32x32) icon associated with a file.
            </summary>
            <param name="path">The file to get the icon for.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.GetSmallIcon(System.String)">
            <summary>
            Get an 16x16 image that is associated with a file.
            </summary>
            <param name="path">The file to get the icon for.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the icon cannot be created (such as there being no existing file in the given path)</exception>
        </member>
        <member name="M:SolidShineUi.NativeMethods.GetLargeIcon(System.String)">
            <summary>
            Get an 32x32 image that is associated with a file.
            </summary>
            <param name="path">The file to get the icon for.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the icon cannot be created (such as there being no existing file in the given path)</exception>
        </member>
        <member name="M:SolidShineUi.NativeMethods.GetDC(System.IntPtr)">
            <summary>
            Get a handle to the display context, either for a certain window or for the entire screen. This can be used to directly draw or get visual info for that particular context.
            </summary>
            <param name="hwnd">The pointer to the item you want the display context for. Use <c>IntPtr.Zero</c> for the entire screen, or a window handle for that window.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            Release the handle to the display context. Do this when you're done using the display context. Must be in the same thread that GetDC was called.
            </summary>
            <param name="hwnd"></param>
            <param name="hdc"></param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.GetPixel(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Get color info for a particular pixel in a display context.
            </summary>
            <param name="hdc">The handle of the display context.</param>
            <param name="nXPos">The X position of the pixel.</param>
            <param name="nYPos">The Y position of the pixel.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Get the color of a particular pixel on the screen.
            </summary>
            <param name="x">The X coordinate of the pixel.</param>
            <param name="y">The Y coordinate of the pixel.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.CreateRoundRectRgn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a rounded rectangular region.
            </summary>
            <param name="x1">The top-left corner's X coordinate.</param>
            <param name="y1">The top-left corner's Y coordinate.</param>
            <param name="x2">The bottom-right corner's X coordinate.</param>
            <param name="y2">The bottom-right corner's Y coordinate.</param>
            <param name="cx">The width of the ellipse used for rounded corners.</param>
            <param name="cy">The height of the ellipse used for rounded corners.</param>
            <returns>The handle of the created region.</returns>
            <remarks>The region should be deleted once you're done using it. However, if you're using this region in conjunction with <see cref="M:SolidShineUi.NativeMethods.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)"/>,
            the region doesn't need to be deleted as Windows will delete it for you when needed.</remarks>
        </member>
        <member name="M:SolidShineUi.NativeMethods.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Set the region (location, size) of a window, using the handle of a created region.
            </summary>
            <param name="hWnd">The handle of the window.</param>
            <param name="hRgn">The handle of the region.</param>
            <param name="redraw">Set if the window's redraw function should be called right after. If the window is visible, this typically should be "true".</param>
            <returns>Returns 0 if successful. If not successful, a different number is returned.</returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Send a message to a window.
            </summary>
            <param name="hWnd">The handle of the window to send the message to.</param>
            <param name="msgType">The type of message to send. See https://learn.microsoft.com/en-us/windows/win32/winmsg/about-messages-and-message-queues for a list of types.</param>
            <param name="wParam">Data, metadata, or other info to send with the message.</param>
            <param name="lParam">Additional data, metadata, or other info to send with the message.</param>
            <returns>A pointer to a result, the contents of which will depend upon the message being sent.</returns>
            <remarks>If the message could not be sent, then GetLastError will return 5 (Access denied).
            Windows using SendMessage to communicate with each other should first use RegisterWindowMessage to get a unique message ID to use.
            </remarks>
        </member>
        <member name="M:SolidShineUi.NativeMethods.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
            Get the system menu for a particular window (this is the menu that contains the standard window controls, like Maximize, Move, or Close).
            </summary>
            <param name="hWnd">The handle of the window to get the menu for.</param>
            <param name="bRevert">Set whether a brand-new system menu should be created, replacing the one currently used by the window.</param>
            <returns>The handle to the system menu. If a brand-new system menu was created, the handle will be null, and a new menu can instead be created.</returns>
        </member>
        <member name="M:SolidShineUi.NativeMethods.TrackPopupMenu(System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Display a menu on the screen, and return the index of the item that was selected from the menu.
            </summary>
            <param name="hMenu">The handle of the menu to display.</param>
            <param name="uFlags">Flags to determine how the menu should appear and behave. See https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-trackpopupmenu#parameters</param>
            <param name="x">The x (horizontal) coordinate of the pixel to display the menu at (relative to the screen).</param>
            <param name="y">The y (vertical) coordinate of the pixel to display the menu at (relative to the screen).</param>
            <param name="nReserved">Not currently used, please just enter 0.</param>
            <param name="hWnd">The handle of the window that owns the menu, and will receive updates from the menu.</param>
            <param name="prcRect">Not currently used, please just enter IntPtr.Zero.</param>
            <returns></returns>
        </member>
        <member name="T:SolidShineUi.PropertyList.Dialogs.CharInputDialog">
            <summary>
            A dialog for the user to select a char or Rune via their Unicode code point. Primarily designed for the <see cref="T:SolidShineUi.PropertyList.PropertyEditors.CharEditor"/>, but can be used independently as well.
            </summary>
            <summary>
            CharInputDialog
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.CharInputDialog.#ctor">
            <summary>
            Create a CharInputDialog.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.CharInputDialog.#ctor(SolidShineUi.ColorScheme)">
            <summary>
            Create a CharInputDialog with a color scheme.
            </summary>
            <param name="cs">The color scheme to use for the window.</param>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.CharInputDialog.#ctor(SolidShineUi.ColorScheme,System.Char)">
            <summary>
            Create a CharInputDialog with prefilled values, with a char being entered in.
            </summary>
            <param name="cs">The color scheme to use for the window.</param>
            <param name="value">The value to preload into this dialog. The user is able to change the value though.</param>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.CharInputDialog.#ctor(SolidShineUi.ColorScheme,System.Text.Rune)">
            <summary>
            Create a StringInputBox with prefilled values, with a Rune being entered in.
            </summary>
            <param name="cs">The color scheme to use for the window.</param>
            <param name="value">The value to preload into this dialog. The user is able to change the value though.</param>
            <remarks>Entering in a Rune value will put the dialog into "Rune mode", which can be used to enter in and display characters beyond what a single char can support.</remarks>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.CharInputDialog.EnterIntoRuneMode">
            <summary>
            Enable rune mode for this dialog, which will allow the display of characters beyond what a single char can support. This is meant to be used in situations where a Rune, not a char, is needed.
            </summary>
            <remarks>
            If you suppled a Rune in the constructor for this dialog, then the dialog is already in Rune mode.
            When using Rune mode, you should get the value entered in via using <see cref="P:SolidShineUi.PropertyList.Dialogs.CharInputDialog.ValueAsRune"/>.
            </remarks>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.CharInputDialog.ValueAsChar">
            <summary>
            Get the Unicode character selected in this dialog, as a char.
            </summary>
            <remarks>
            Note that chars are explicitly UTF-16. Many code points (especially multilingual, extended, or symbol/emoji characters) cannot be represented as a single UTF-16 char, and instead will require two.
            This dialog only returns one char, but you can check if it is such a char by using <see cref="M:System.Char.IsSurrogate(System.Char)"/>.
            
            If using .NET Core or .NET 5 or higher, you can use Runes instead.
            </remarks>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.CharInputDialog.ValueAsRune">
            <summary>
            Get the Unicode character selected in this dialog, as a Rune.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.CharInputDialog.DialogResult">
            <summary>
            Get the result of the dialog when it is closed. "False" refers to the user cancelling the operation, while "True" refers to the user confirming, by clicking "OK" or pressing the Enter key.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.CharInputDialog.EnterKeyConfirms">
            <summary>
            Get or set whether the Enter key can be used to confirm the dialog. If enabled, pressing down the Enter key will be treated as if the user pressed "OK".
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.CharInputDialog.EscapeKeyCancels">
            <summary>
            Get or set whether the Escape key can be used to cancel the dialog. If enabled, pressing down the Escape key will be treated as if the user pressed "Cancel".
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.CharInputDialog.Description">
            <summary>
            Get or set the description text to display above the text box. This text should describe what the user should enter into the text box.
            </summary>
            <remarks>Try to keep the description to about a sentence long. 
            Ideally, the overall design of the program should make it apparent what the user should enter into the text box without reading the description.</remarks>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.CharInputDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.Dialogs.ImageBrushEditorDialog">
            <summary>
            A dialog for editing <see cref="T:System.Windows.Media.ImageBrush"/> objects.
            </summary>
            <summary>
            ImageBrushEditorDialog
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.ImageBrushEditorDialog.#ctor">
            <summary>
            Create a ImageBrushEditorDialog.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.ImageBrushEditorDialog.#ctor(SolidShineUi.ColorScheme)">
            <summary>
            Create a ImageBrushEditorDialog, with the color scheme pre-defined.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.ImageBrushEditorDialog.DialogResult">
            <summary>Get or set the result the user selected for this dialog; <c>true</c> is "OK", <c>false</c> is "Cancel" or the window was closed without making a choice.</summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.ImageBrushEditorDialog.LoadImage(System.Windows.Media.ImageBrush)">
            <summary>
            Load in an ImageBrush into this dialog.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.ImageBrushEditorDialog.GetImageBrush">
            <summary>
            Get an ImageBrush that represents the current options in the dialog.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.ImageBrushEditorDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.Dialogs.LinearGradientEditorDialog">
            <summary>
            A dialog for creating and editing linear gradients, specifically <see cref="T:System.Windows.Media.LinearGradientBrush"/> objects.
            </summary>
            <summary>
            LinearGradientEditorDialog
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.LinearGradientEditorDialog.#ctor">
            <summary>
            Create a LinearGradientEditorDialog.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.LinearGradientEditorDialog.#ctor(SolidShineUi.ColorScheme)">
            <summary>
            Create a LinearGradientEditorDialog, with the color scheme pre-defined.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.LinearGradientEditorDialog.#ctor(System.Windows.Media.LinearGradientBrush)">
            <summary>
            Create a LinearGradientEditorDialog, with a linear gradient brush preloaded.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.LinearGradientEditorDialog.#ctor(SolidShineUi.ColorScheme,System.Windows.Media.LinearGradientBrush)">
            <summary>
            Create a LinearGradientEditorDialog, with the color scheme pre-defined and the linear gradient brush preloaded.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.LinearGradientEditorDialog.LoadGradient(System.Windows.Media.LinearGradientBrush)">
            <summary>
            Load in a <see cref="T:System.Windows.Media.LinearGradientBrush"/> into this dialog for viewing/editing.
            </summary>
            <param name="lgb">The LinearGradientBrush to load in.</param>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.LinearGradientEditorDialog.GetGradientBrush">
            <summary>
            Get a <see cref="T:System.Windows.Media.LinearGradientBrush"/> based upon the options selected in this dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.LinearGradientEditorDialog.DialogResult">
            <summary>Get or set the result the user selected for this dialog; <c>true</c> is "OK", <c>false</c> is "Cancel" or the window was closed without making a choice.</summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.LinearGradientEditorDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.Dialogs.ListEditorDialog">
            <summary>
            A dialog for viewing and editing the contents of a list or IEnumerable.
            </summary>
            <summary>
            ListEditorDialog
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.#ctor">
            <summary>
            Create a ListEditorDialog.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.baseType">
            <summary>the type of the items contained in the list (i.e. a <c>List&lt;string&gt;</c> has a baseType <c>string</c>)</summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.editorType">
            <summary>the type of the IPropertyEditor, if there is one, to use with this list</summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.parentList">
            <summary>the parent PropertyList control</summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.Description">
            <summary>
            Get or set the description text to display at the top of the dialog.
            This should describe the collection/list being viewed, and maybe some other general info like the type of the items in the collection and the total count of items.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.ListOfItemsLabel">
            <summary>
            Get or set the text in the "List of items:" label.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.EditItemLabel">
            <summary>
            Get or set the text in the "Edit current item:" label.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.EnumerableWarningTitleLabel">
            <summary>
            Get or set the text in the "Full Collection May Not Be Available" label, displayed at the top of the IEnumerable warning section.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.EnumerableWarningDescriptionLabel">
            <summary>
            Get or set the text in the description of the IEnumerable warning section.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.LoadCollectionLabel">
            <summary>
            Get or set the text of the "Load Collection" label.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.LoadEnumerable(System.Collections.IEnumerable,System.Type,System.Type)">
            <summary>
            Load in a list or IEnumerable to display in this dialog.
            </summary>
            <param name="items">The items to load into the dialog.</param>
            <param name="enumerableType">The type of items being contained in this IEnumerable.</param>
            <param name="editor">The editor type for the type of the items in the IEnumerable, if there is any</param>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.ListEditorDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.Dialogs.RadialGradientEditorDialog">
            <summary>
            A dialog for creating and editing radial gradients, specifically <see cref="T:System.Windows.Media.RadialGradientBrush"/> objects.
            </summary>
            <summary>
            RadialGradientEditorDialog
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.RadialGradientEditorDialog.#ctor">
            <summary>
            Create a LinearGradientEditorDialog.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.RadialGradientEditorDialog.#ctor(SolidShineUi.ColorScheme)">
            <summary>
            Create a LinearGradientEditorDialog, with the color scheme pre-defined.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.RadialGradientEditorDialog.#ctor(System.Windows.Media.RadialGradientBrush)">
            <summary>
            Create a LinearGradientEditorDialog, with a linear gradient brush preloaded.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.RadialGradientEditorDialog.#ctor(SolidShineUi.ColorScheme,System.Windows.Media.RadialGradientBrush)">
            <summary>
            Create a LinearGradientEditorDialog, with the color scheme pre-defined and the linear gradient brush preloaded.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.RadialGradientEditorDialog.LoadGradient(System.Windows.Media.RadialGradientBrush)">
            <summary>
            Load in a <see cref="T:System.Windows.Media.RadialGradientBrush"/> into this dialog for viewing/editing.
            </summary>
            <param name="rgb">The RadialGradientBrush to load in.</param>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.RadialGradientEditorDialog.GetGradientBrush">
            <summary>
            Get a <see cref="T:System.Windows.Media.RadialGradientBrush"/> based upon the options selected in this dialog.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.Dialogs.RadialGradientEditorDialog.DialogResult">
            <summary>Get or set the result the user selected for this dialog; <c>true</c> is "OK", <c>false</c> is "Cancel" or the window was closed without making a choice.</summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.Dialogs.RadialGradientEditorDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.IPropertyEditor">
            <summary>
            Represents the common interface that all property editor controls inherit from, to provide methods in regards to loading, editing, and setting properties.
            Classes that implement this interface should inherit from <see cref="T:System.Windows.Controls.Control"/> or <see cref="T:System.Windows.Controls.UserControl"/>.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.IPropertyEditor.ValidTypes">
            <summary>
            Get a list of all valid types that this editor supports editing.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.IPropertyEditor.EditorAllowsModifying">
            <summary>
            Get whether this editor control actually has the capability to edit the value of a property, not just viewing it.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.IPropertyEditor.IsPropertyWritable">
            <summary>
            Get or set if the property being loaded can actually be edited (writeable).
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.IPropertyEditor.GetFrameworkElement">
            <summary>
            Get the FrameworkElement for this IPropertyEditor control.
            </summary>
            <remarks>
            This is present due to how the WPF architecture was designed, and limitations with C# itself.
            Please simply return <c>this</c> in your code when implementing this interface.
            </remarks>
        </member>
        <member name="P:SolidShineUi.PropertyList.IPropertyEditor.ColorScheme">
            <summary>
            Set the ColorScheme, to set the visual appearance of the control.
            </summary>
            <remarks>
            This is a setter-only property in the interface as a getter is never needed. Implementers can add a getter for this property if needed.
            </remarks>
        </member>
        <member name="P:SolidShineUi.PropertyList.IPropertyEditor.ParentPropertyList">
            <summary>
            Set the parent PropertyList control for this IPropertyEditor. This allows the IPropertyEditor to connect to the PropertyList directly, to get info or set certain values.
            </summary>
        </member>
        <member name="E:SolidShineUi.PropertyList.IPropertyEditor.ValueChanged">
            <summary>
            Raised when the value is changed, by changing the data in this editor control.
            Handlers should then call <see cref="M:SolidShineUi.PropertyList.IPropertyEditor.GetValue"/> to then get the value to set the underlying property to.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.IPropertyEditor.LoadValue(System.Object,System.Type)">
            <summary>
            Load in the value of a property.
            </summary>
            <param name="value">The value to load.</param>
            <param name="type">The type of the property; this may not exactly match the type of the value itself, but the value's type will always implement this type.</param>
        </member>
        <member name="M:SolidShineUi.PropertyList.IPropertyEditor.GetValue">
            <summary>
            Get the value of the property, as set in this editor control.
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.ListEditorItem">
            <summary>
            An entry in a list or collection, for display in the <see cref="T:SolidShineUi.PropertyList.Dialogs.ListEditorDialog"/>, and use in a <see cref="T:SolidShineUi.SelectPanel"/>.
            </summary>
            <summary>
            ListEditorItem
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ListEditorItem.#ctor">
            <summary>
            Create a ListEditorItem.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ListEditorItem.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            When overridden by a derived class, this method is automatically called each time the color scheme is updated by the parent SelectPanel. Use this to update child controls.
            </summary>
            <param name="cs">The new color scheme.</param>
        </member>
        <member name="P:SolidShineUi.PropertyList.ListEditorItem.ItemIndex">
            <summary>
            Get or set the index of this item in the larger collection or list.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ListEditorItem.VisibleControls">
            <summary>
            Get or set the controls that visible for this ListEditorItem.
            </summary>
            <remarks>
            "None" should be used for a basic IEnumerable type, "RemoveOnly" should be used for an ICollection type, and "All" should be used for an IList type.
            </remarks>
        </member>
        <member name="E:SolidShineUi.PropertyList.ListEditorItem.InternalVisibleControlsChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.PropertyList.ListEditorItem.VisibleControlsChanged">
            <summary>
            Raised when the VisibleControls property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ListEditorItem.ItemValue">
            <summary>
            Get or set the value of the property shown.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ListEditorItem.PropertyEditorControl">
            <summary>
            Get or set the editor control to use to allow editing the value of this property.
            </summary>
        </member>
        <member name="E:SolidShineUi.PropertyList.ListEditorItem.PropertyEditorValueChanged">
            <summary>
            Raised when the value of this property is changed, by use of a <see cref="P:SolidShineUi.PropertyList.ListEditorItem.PropertyEditorControl"/>.
            </summary>
        </member>
        <member name="E:SolidShineUi.PropertyList.ListEditorItem.RequestRemove">
            <summary>
            Raised when the Remove button is clicked, indicating the user wants to remove this item from the list.
            </summary>
        </member>
        <member name="E:SolidShineUi.PropertyList.ListEditorItem.RequestMoveUp">
            <summary>
            Raised when the Move Up button is clicked, indicating the user wants to move this item up in the list.
            </summary>
        </member>
        <member name="E:SolidShineUi.PropertyList.ListEditorItem.RequestMoveDown">
            <summary>
            Raised when the Move Down button is clicked, indicating the user wants to move this item down in the list.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ListEditorItem.LoadItem(System.Object,System.Type,SolidShineUi.PropertyList.IPropertyEditor)">
            <summary>
            Load in a property to show in this PropertyEditorItem, with (if possible) a IPropertyEditor control to allow editing the property value.
            </summary>
            <param name="value">The value of the property, in regards to the object being observed in the parent <see cref="T:SolidShineUi.PropertyList.ExperimentalPropertyList"/>.</param>
            <param name="type">The type of the item being passed in.</param>
            <param name="editor">The IPropertyEditor control, if present, that is useable for editing the value of this property.</param>
        </member>
        <member name="M:SolidShineUi.PropertyList.ListEditorItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.ListEditorItemControls">
            <summary>
            Represents which controls are available for a ListEditorItem.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ListEditorItemControls.None">
            <summary>
            No controls are shown.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ListEditorItemControls.RemoveOnly">
            <summary>
            Only the "Remove" control is shown.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ListEditorItemControls.All">
            <summary>
            Both the "Remove" and movement controls are shown.
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditorItem">
            <summary>
            A control hosting a visual representation of an object's property, including the property's name, type, and (where possible) an editor control for editing the property.
            This is meant for use with the <see cref="T:SolidShineUi.PropertyList.ExperimentalPropertyList"/>, not generally for use directly by itself.
            </summary>
            <summary>
            PropertyEditorItem
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditorItem.#ctor">
            <summary>
            Create a new PropertyEditorItem
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.PropertyInfo">
            <summary>
            Get or set the PropertyInfo representing the property shown.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.PropertyValue">
            <summary>
            Get or set the value of the property shown.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.PropertyEditorControl">
            <summary>
            Get or set the editor control to use to allow editing the value of this property.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.IsReadOnly">
            <summary>
            Get if this property is read only, meaning it cannot be edited or changed.
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditorItem.PropertyEditorValueChangedEventHandler">
            <summary>
            A delegate to be used with events regarding the value of a property editor's property changing.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="e">The event arguments associated with this event.</param>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditorItem.PropertyEditorValueChanged">
            <summary>
            Raised when the value of this property is changed, by use of a <see cref="P:SolidShineUi.PropertyList.PropertyEditorItem.PropertyEditorControl"/>.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.DeclaringType">
            <summary>
            Get or set the type that actually declared the property shown.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.IsInherited">
            <summary>
            Get or set if this property is an inherited property (i.e. the <see cref="P:SolidShineUi.PropertyList.PropertyEditorItem.DeclaringType"/> doesn't match the type of the object that is being observed in the parent <see cref="T:SolidShineUi.PropertyList.ExperimentalPropertyList"/>).
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.PropertyName">
            <summary>
            Get or set the name of the property being shown.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.PropertyType">
            <summary>
            Get or set the type of the property being shown.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.PropertyTypeText">
            <summary>
            Get or set the type of the property being shown, in a more user-friendly textual format.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditorItem.LoadProperty(System.Reflection.PropertyInfo,System.Object,SolidShineUi.PropertyList.IPropertyEditor)">
            <summary>
            Load in a property to show in this PropertyEditorItem, with (if possible) a IPropertyEditor control to allow editing the property value.
            </summary>
            <param name="property">The information about this property being shown. This is used to fill most data in this control.</param>
            <param name="value">The value of the property, in regards to the object being observed in the parent <see cref="T:SolidShineUi.PropertyList.ExperimentalPropertyList"/>.</param>
            <param name="editor">The IPropertyEditor control, if present, that is useable for editing the value of this property.</param>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditorItem.ApplyPropertyValue(System.Object)">
            <summary>
            Set the value of this property, in regards to the target object.
            </summary>
            <param name="targetObject">The object to set the value of the property on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the target object is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the PropertyInfo is null. If this is null, a property cannot be set.</exception>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditorItem.UpdateColumnWidths(System.Windows.GridLength,System.Windows.GridLength,System.Windows.GridLength)">
            <summary>
            Update the widths of the internal columns in this control, to match the widths in some other location.
            </summary>
            <param name="namesCol">The width for the Name column.</param>
            <param name="typesCol">The width for the Type column.</param>
            <param name="valueCol">The width for the Value column.</param>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.ShowGridlines">
            <summary>
            Get or set if gridlines should be displayed in the editor entry. Showing the gridlines will make the editor appear more like the WinForms PropertyGrid control.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertyEditorItem.ShowGridlinesProperty">
            <summary>
            A depedency property that backs a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorItem.GridlineBrush">
            <summary>
            Get or set the brush to use for the gridlines. Use <see cref="P:SolidShineUi.PropertyList.PropertyEditorItem.ShowGridlines"/> to determine if the gridlines will be visible or not.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertyEditorItem.GridlineBrushProperty">
            <summary>
            A depedency property that backs a related property. See the related property for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditorItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor">
            <summary>
            A property editor for editing <see cref="T:System.Boolean"/> objects.
            </summary>
            <summary>
            BooleanEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.#ctor">
            <summary>
            Create a new BooleanEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.BooleanEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.BrushEditor">
            <summary>
            A property editor for editing <see cref="T:System.Windows.Media.Brush"/> objects.
            </summary>
            <summary>
            BrushEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.#ctor">
            <summary>
            Create a new BrushEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertyEditors.BrushEditor._propType">
            <summary>the type of the property itself, to determine what is allowed as brushes</summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertyEditors.BrushEditor._actualType">
            <summary>the type of the actual current value</summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertyEditors.BrushEditor._dataValue">
            <summary>the actual current value</summary>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.BrushEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.CharEditor">
            <summary>
            A proeprty editor for editing <see cref="T:System.Char"/> objects.
            </summary>
            <summary>
            CharEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.CharEditor.#ctor">
            <summary>Create a CharEditor.</summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.CharEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.CharEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.CharEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.CharEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.CharEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.CharEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.CharEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.CharEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.CharEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.CharEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.ColorEditor">
            <summary>
            A proeprty editor for editing <see cref="T:System.Windows.Media.Color"/> objects.
            </summary>
            <summary>
            ColorEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.#ctor">
            <summary>Create a ColorEditor.</summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ColorEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor">
            <summary>
            A property editor for editing <see cref="T:System.Windows.CornerRadius"/> objects.
            </summary>
            <summary>
            CornerRadiusEditor
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.CornerRadiusEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor">
            <summary>
            A property editor for <see cref="T:System.Decimal"/> objects.
            </summary>
            <summary>
            DecimalEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.#ctor">
            <summary>
            Create a new DecimalEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.DecimalEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor">
            <summary>
            A property editor for <see cref="T:System.Double"/> and <see cref="T:System.Single"/> objects.
            </summary>
            <summary>
            DoubleEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.#ctor">
            <summary>
            Create a new DoubleEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.DoubleEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.EnumEditor">
            <summary>
            A property editor for editing <see cref="T:System.Enum"/> objects.
            </summary>
            <summary>
            EnumEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.#ctor">
            <summary>
            Create an EnumEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor">
            <summary>
            An editor for viewing and editing lists
            </summary>
            <summary>
            EnumerableEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.#ctor">
            <summary>
            Create an EnumerableEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.OpenListDialog">
            <summary>
            Open the ListEditorDialog, with its contents being the list or collection of this property.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.EnumerableEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor">
            <summary>
            A property editor for editing <see cref="T:System.Windows.Media.FontFamily"/> objects.
            </summary>
            <summary>
            FontFamilyEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.#ctor">
            <summary>
            Create a FontFamilyEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontFamilyEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor">
            <summary>
            A property editor for <see cref="T:System.Windows.FontStyle"/> objects.
            </summary>
            <summary>
            FontStyleEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.#ctor">
            <summary>
            Create a FontStyleEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontStyleEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor">
            <summary>
            A property editor for <see cref="T:System.Windows.FontWeight"/> objects.
            </summary>
            <summary>
            FontWeightEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.#ctor">
            <summary>
            Create a FontWeightEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.FontWeightEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor">
            <summary>
            A proeprty editor for editing <see cref="T:System.Windows.GridLength"/> objects.
            </summary>
            <summary>
            GridLengthEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.#ctor">
            <summary>Create a GridLengthEditor.</summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.GridLengthEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.GuidEditor">
            <summary>
            A property editor for editing <see cref="T:System.Guid"/> editors.
            </summary>
            <summary>
            GuidEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.#ctor">
            <summary>
            Create a GuidEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.GuidEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor">
            <summary>
            A property editor for <see cref="T:System.Int32"/>, <see cref="T:System.Int16"/>, and <see cref="T:System.Byte"/> types.
            </summary>
            <summary>
            IntegerEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.#ctor">
            <summary>
            Create an IntegerEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.IntegerEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.ListEditor">
            <summary>
            An editor for viewing and editing lists
            </summary>
            <summary>
            ListEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ListEditor.#ctor">
            <summary>
            Create a ListEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ListEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ListEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ListEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ListEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ListEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ListEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.ListEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ListEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ListEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ListEditor.OpenListDialog">
            <summary>
            Open the ListEditorDialog, with the contents being the list of this property.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ListEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.LongEditor">
            <summary>
            A property editor for <see cref="T:System.Int64"/>, <see cref="T:System.UInt32"/>, and <see cref="T:System.UInt64"/> types.
            </summary>
            <summary>
            LongEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.LongEditor.#ctor">
            <summary>
            Create an IntegerEditor.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.LongEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.LongEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.LongEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.LongEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.LongEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.LongEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.LongEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.LongEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.LongEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.LongEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.PointEditor">
            <summary>
            A property editor for editing <see cref="T:System.Windows.Point"/> objects.
            </summary>
            <summary>
            PointEditor
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.PointEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.PointEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.PointEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.PointEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.PointEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.PointEditor.#ctor">
            <summary>
            Create a PointEditor.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.PointEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.PointEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.PointEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.PointEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.PointEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.SizeEditor">
            <summary>
            A property editor for editing <see cref="T:System.Windows.Size"/> objects.
            </summary>
            <summary>
            SizeEditor
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.#ctor">
            <summary>
            Create a SizeEditor.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.SizeEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.StringEditor">
            <summary>
            A proeprty editor for editing <see cref="T:System.String"/> objects.
            </summary>
            <summary>
            StringEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.StringEditor.#ctor">
            <summary>Create a StringEditor.</summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.StringEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.StringEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.StringEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.StringEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.StringEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.StringEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.StringEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.StringEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.StringEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.StringEditor.OpenAsList">
            <summary>
            Open the ListEditorDialog, with the contents being the list of this property.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.StringEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor">
            <summary>
            A property editor for editing <see cref="T:System.Windows.Thickness"/> objects.
            </summary>
            <summary>
            ThicknessEditor
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.ThicknessEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.UriEditor">
            <summary>
            A property editor for editing <see cref="T:System.Uri"/> objects.
            </summary>
            <summary>
            UriEditor
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.UriEditor.#ctor">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.UriEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.UriEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.UriEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.UriEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.UriEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.UriEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.UriEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.UriEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.UriEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.UriEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditors.VersionEditor">
            <summary>
            A property editor for editing <see cref="T:System.Version"/> objects.
            </summary>
            <summary>
            VersionEditor
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.ValidTypes">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.EditorAllowsModifying">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.IsPropertyWritable">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.ParentPropertyList">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.#ctor">
            <summary>
            Create a VersionEditor.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.GetFrameworkElement">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.LoadValue(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.GetValue">
            <inheritdoc/>
        </member>
        <member name="E:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.ValueChanged">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditors.VersionEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.ExperimentalPropertyList">
            <summary>
            A control that can display the properties and values of a .NET object, with support for live editing of many of them.
            </summary>
            <summary>
            ExperimentalPropertyList
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.#ctor">
            <summary>
            Create a PropertyList.
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.ExperimentalPropertyList.PropertyValueChangedEventHandler">
            <summary>
            A delegate to be used with events regarding the value of a property changing.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="e">The event arguments associated with this event.</param>
        </member>
        <member name="T:SolidShineUi.PropertyList.ExperimentalPropertyList.PropertyListObjectEventHandler">
            <summary>
            A delegate to be used with events regarding an object being loaded or accessed.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="e">The event arguments associated with this event.</param>
        </member>
        <member name="E:SolidShineUi.PropertyList.ExperimentalPropertyList.PropertyValueChanged">
            <summary>
            Raised when the value of a property has changed via a property editor. This refers to the properties of the object currently being observed by the PropertyList control.
            </summary>
        </member>
        <member name="E:SolidShineUi.PropertyList.ExperimentalPropertyList.LoadedObjectChanged">
            <summary>
            Raised when the currently loaded/observed object in the PropertyList control changes.
            </summary>
            <remarks>
            This is also raised when the ReloadObject 
            </remarks>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.Content">
            <summary>
            Get the internal contents of this PropertyList control.
            </summary>
            <remarks>
            To load in an object into the PropertyList, please use the <see cref="M:SolidShineUi.PropertyList.ExperimentalPropertyList.LoadObject(System.Object)"/> function instead.
            It is highly unrecommended to access and modify the internal contents of the PropertyList control in this way, but it is possible.
            </remarks>
        </member>
        <member name="E:SolidShineUi.PropertyList.ExperimentalPropertyList.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ColorScheme">
            <summary>
            Get or set the color scheme to apply to the control. The color scheme can quickly apply a whole visual style to your control.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.properties">
            <summary>a list of all the properties in the loaded object's type</summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList._baseObject">
            <summary>the object that's currently loaded</summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.GetCurrentlyLoadedObject">
            <summary>
            Get the object that is currently being observed in this PropertyList.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.ReloadObject">
            <summary>
            Reload the properties and values from the currently observed object.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.ReloadObject(System.Boolean)">
            <summary>
            Reload the properties and values from the currently observed object, with the option to reset filter and view settings if desired.
            </summary>
            <param name="resetViewSettings">Set if the filter and view settings should be reset when the object is reloaded.</param>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.Clear">
            <summary>
            Unload the currently observed object, so that nothing is observed.
            </summary>
            <remarks>
            This clears out the UI and resets internal properties; however, this does not need to be run before loading in another object.
            </remarks>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.NO_NAME">
            <summary>
            The string "No name", used for objects that don't have a Name property to get a name from.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.NOTHING_LOADED">
            <summary>
            The string "Nothing loaded", used when there is not an object loaded into this control.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.LoadObject(System.Object)">
            <summary>
            Set the object to observe. All properties of the observed object will be displayed in the ExperimentalPropertyList, alongside the values of these properties.
            </summary>
            <param name="o">The object to load and observe.</param>
            <remarks>
            Note that if the object has a property called "Name", that name will be displayed at the top of the ExperimentalPropertyList control.
            If this object doesn't have a Name property, or you want to set a different name, please use the <see cref="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ObjectDisplayName"/> property.
            </remarks>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ObjectDisplayName">
            <summary>
            Get or set the string used to name the object being observed. The PropertyList will try to set this automatically via looking at the Name property,
            or otherwise you can set a custom name to display.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ObjectDisplayNameProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.TypeLabel">
            <summary>
            Get or set the label to display next to the object's type at the top of the control.
            </summary>
            <remarks>
            You can hide the entire type label and display by setting <see cref="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowTypeDisplay"/> to false.
            </remarks>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.TypeLabelProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ViewMenuLabel">
            <summary>
            Get or set the label to display in the View menu in the toolbar.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ViewMenuLabelProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.NameHeaderLabel">
            <summary>
            Get or set the label to display in the column header for the Name column.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.NameHeaderLabelProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.TypeHeaderLabel">
            <summary>
            Get or set the label to display in the column header for the Type column.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.TypeHeaderLabelProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ValueHeaderLabel">
            <summary>
            Get or set the label to display in the column header for the Value column.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ValueHeaderLabelProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.FilterBoxToolTip">
            <summary>
            Get or set the label to display in a tool-tip when the Filter text box has focus or mouse over.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.FilterBoxToolTipProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.SortOption">
            <summary>
            Get or set how the list of properties are sorted in the PropertyList.
            </summary>
            <remarks>
            If this setting is changed, you will need to reload the object (<see cref="M:SolidShineUi.PropertyList.ExperimentalPropertyList.ReloadObject"/>) or load a new object to apply that change.
            </remarks>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.DisplayOptions">
            <summary>
            Get or set the settings for what properties should be displayed in the PropertyList.
            </summary>
            <remarks>
            When loading in an object, the attributes for each property in that object are looked at. If a property has an attribute that matches what a flag disallows,
            that property is not loaded. If this setting is changed, you will need to reload the object (<see cref="M:SolidShineUi.PropertyList.ExperimentalPropertyList.ReloadObject"/>) or load a new object to apply that change.
            </remarks>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowInheritedProperties">
            <summary>
            Get or set if inherited properties (properties not defined directly in the observed object's type) are visible in the PropertyList.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowReadOnlyProperties">
            <summary>
            Get or set if inherited properties (properties not defined directly in the observed object's type) are visible in the PropertyList.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.CheckPropertyDisplay(System.Reflection.PropertyInfo)">
            <summary>
            Check the property against the flags of <see cref="P:SolidShineUi.PropertyList.ExperimentalPropertyList.DisplayOptions"/>, and return if the property should be displayed.
            </summary>
            <param name="pi">The property to check.</param>
            <returns>True if the property should be displayed; false if the property has (or is lacking) the checked attributes and should be hidden.</returns>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.FilterProperties(System.String)">
            <summary>
            Change the text used to filter the list of properties. Applying a filter text will hide any properties that don't contain this text (or its type doesn't contain this text).
            </summary>
            <param name="filter">
            The filter text to apply. Use <c>null</c> or an empty string to not apply a filter. Start the string with "@" to only filter by property name only (not name or type).
            </param>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.RegisteredPropertyEditors">
            <summary>
            Get a list of editors currently registered for each property type.
            </summary>
            <remarks>
            The key of the dictionary is a property type. The corresponding value is the type of the editor that will handle viewing and editing that type.
            </remarks>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.RegisterEditor(System.Type,System.Type)">
            <summary>
            Register an editor for a certain property type. When the control loads an object with a property of this type, the registered editor will be used to view and edit it.
            </summary>
            <param name="type">The type to register the <paramref name="editor"/> for.</param>
            <param name="editor">The type of the IPropertyEditor control that will handle viewing and editing <paramref name="type"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown if the editor type does not inherit the IPropertyEditor interface.</exception>
            <remarks>If a different editor is already registered for a certain type, this will replace that registration and the control will use this editor instead.</remarks>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.UnregisterEditor(System.Type)">
            <summary>
            Unregister the editor for a certain type.
            </summary>
            <param name="type">The property type to unregister the editor of. (For example, enter in <c>typeof(string)</c>, not <c>typeof(StringEditor)</c>).</param>
            <returns>Returns true on success. Returns false if the editor couldn't be unregistered, or there was no editor registered to begin with.</returns>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.CreateEditorForType(System.Type)">
            <summary>
            Create a new IPropertyEditor object appropriate for the passed-in type. This is based upon what types are registered in this PropertyList control.
            </summary>
            <param name="propType">The type for which to get a IPropertyEditor for.</param>
            <returns></returns>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowNameDisplay">
            <summary>
            Get or set if the name display text is displayed at the top of the PropertyList control.
            </summary>
            <remarks>
            PropertyList tries to load the name of a control by looking at its <c>Name</c> property; otherwise, you can also custom set a name via the <see cref="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ObjectDisplayName"/> property.
            </remarks>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowNameDisplayProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowTypeDisplay">
            <summary>
            Get or set if the type display text should be visible at the top of the PropertyList control.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowTypeDisplayProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowFilterBox">
            <summary>
            Get or set if the Filter textbox should be visible at the top of the PropertyList control.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowFilterBoxProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowReloadButton">
            <summary>
            Get or set if the Reload button should be visible at the top of the PropertyList control.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowReloadButtonProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowViewMenu">
            <summary>
            Get or set if the View and Sort menu button should be visible at the top of the PropertyList control.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowViewMenuProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowGridlines">
            <summary>
            Get or set if gridlines are visible between the properties in the control.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowGridlinesProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.GridlineBrush">
            <summary>
            Get or set the brush of the gridlines in the control. Use <see cref="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ShowGridlines"/> to actually display the gridlines.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.GridlineBrushProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.HeaderBackground">
            <summary>
            Get or set the brush for the background of the column headers.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.HeaderBackgroundProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.HeaderForeground">
            <summary>
            Get or set the brush for the foreground of the column headers.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.HeaderForegroundProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ToolbarBackground">
            <summary>
            Get or set the brush for the background of the toolbar near the top of the control.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ToolbarBackgroundProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ButtonHighlightBrush">
            <summary>
            Get or set the brush for the buttons on the toolbar when they are highlighted (i.e. mouse over or keyboard focus).
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ButtonHighlightBrushProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ButtonClickBrush">
            <summary>
            Get or set the brush for the buttons on the toolbar when they are being clicked.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ButtonClickBrushProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.ButtonHighlightBorderBrush">
            <summary>
            Get or set the brush for the borders of the buttons on the toolbar, when the buttons are being highlighted or clicked. (The buttons display no border when not focused.)
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.ButtonHighlightBorderBrushProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.TopPanelBackground">
            <summary>
            Get or set the brush for the background of the top panel of the control (where the name and type are displayed).
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.TopPanelBackgroundProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.TopPanelForeground">
            <summary>
            Get or set the brush for the foreground of the top panel of the control (where the name and type are displayed).
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.TopPanelForegroundProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.ExperimentalPropertyList.HeaderDividerBrush">
            <summary>
            Get or set the brush for the dividers between the column headers.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.ExperimentalPropertyList.HeaderDividerBrushProperty">
            <summary>
            Identifies a dependency property for this control. Please see the related property for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.PrettifyPropertyType(System.Type,System.Boolean)">
            <summary>
            Get a slightly cleaned up and more human-readable name of a type.
            </summary>
            <param name="type">The type to get the name of.</param>
            <param name="fullName">Determine if the full name (including namespaces) should be returned or just the type's own name</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.PropertyList.ExperimentalPropertyList.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertySortOption">
            <summary>
            Represents the sorting method used for sorting properties in a PropertyList.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertySortOption.Name">
            <summary>
            Sorted alphabetically by property name
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertySortOption.Category">
            <summary>
            Sorted by category (as determined by a Category attribute being present)
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyListDisplayFlags">
            <summary>
            Represents what properties should be shown or hidden in a PropertyList, by checking the attributes set with the property.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertyListDisplayFlags.HidePropertyListHide">
            <summary>
            Hides properties that have the PropertyListHide attribute (<see cref="T:SolidShineUi.PropertyList.PropertyListHideAttribute"/>) set.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertyListDisplayFlags.HideBrowseableFalse">
            <summary>
            Hides properties that have the Browseable or EditorBrowseable attributes set (and set to false or Never).
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertyListDisplayFlags.HideObsolete">
            <summary>
            Hides properties that have the Obsolete attribute set.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertyListDisplayFlags.OnlyShowPropertyListShow">
            <summary>
            Only properties that have the PropertyListShow attribute (<see cref="T:SolidShineUi.PropertyList.PropertyListShowAttribute"/>) will be displayed. This overrides all other flags.
            </summary>
        </member>
        <member name="F:SolidShineUi.PropertyList.PropertyListDisplayFlags.ShowAll">
            <summary>
            Ignore attributes and display all properties in an object. This overrides all other flags.
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyListHideAttribute">
            <summary>
            An attribute that can be applied to properties; 
            when PropertyList loads an object, any properties in that object with this attribute are skipped.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyListHideAttribute.#ctor">
            <summary>
            Create a PropertyListHideAttribute.
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyListShowAttribute">
            <summary>
            An attribute that can be applied to properties; 
            if a PropertyList is set to only load properties with this attribute, all properties in an object are skipped unless they have this property.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyListShowAttribute.#ctor">
            <summary>
            Create a PropertyListShowAttribute.
            </summary>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyEditorValueChangedEventArgs">
            <summary>
            The event arguments for the PropertyEditorValueChanged event, which takes place when the value of a property is changed using a property editor control.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorValueChangedEventArgs.ChangeFailed">
            <summary>
            Get or set if the change to the property's value has failed. In cases where an exception occurred while attempting to set the value or something else unexpected happened and
            the new value could not be set, then set this value to <c>true</c> and then set the <see cref="P:SolidShineUi.PropertyList.PropertyEditorValueChangedEventArgs.FailedChangePropertyValue"/> to what the updated value actually is.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyEditorValueChangedEventArgs.FailedChangePropertyValue">
            <summary>
            Get or set what the value of the property is after a failure to change the property to the new value above.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyEditorValueChangedEventArgs.#ctor(System.Object,System.Object,System.String,System.Reflection.PropertyInfo)">
            <summary>
            Create a PropertyEditorValueChangedEventArgs.
            </summary>
            <param name="oldValue">The old value of the property being changed.</param>
            <param name="newValue">The new value of the property being changed.</param>
            <param name="propertyName">The name of the property being changed.</param>
            <param name="propertyInfo">The PropertyInfo representing the property being changed.</param>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyValueChangedEventArgs">
            <summary>
            The event arguments for the PropertyValueChanged event, which takes place when the value of a property is changed in a PropertyList.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyValueChangedEventArgs.NewValue">
            <summary>
            Get the new value to apply to this property.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyValueChangedEventArgs.OldValue">
            <summary>
            Get the old value of the property. Note that this may not always be set.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyValueChangedEventArgs.PropertyName">
            <summary>
            Get the name of the property being changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyValueChangedEventArgs.PropertyInfo">
            <summary>
            Get the PropertyInfo representing the property being changed.
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyValueChangedEventArgs.#ctor(System.Object,System.Object,System.String,System.Reflection.PropertyInfo)">
            <summary>
            Create a PropertyValueChangedEventArgs.
            </summary>
            <param name="oldValue">The old value of the property being changed.</param>
            <param name="newValue">The new value of the property being changed.</param>
            <param name="propertyName">The name of the property being changed.</param>
            <param name="propertyInfo">The PropertyInfo representing the property being changed.</param>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyValueChangedEventArgs.#ctor(SolidShineUi.PropertyList.PropertyValueChangedEventArgs)">
            <summary>
            Create a PropertyValueChangedEventArgs, by copying the values of an existing PropertyValueChangedEventArgs class. Note that this isn't a deep copy.
            </summary>
            <param name="args">The class to copy the values from.</param>
        </member>
        <member name="T:SolidShineUi.PropertyList.PropertyListObjectEventArgs">
            <summary>
            The event arguments for the LoadedObjectChanged event, when the loaded object changes in the PropertyList control.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyListObjectEventArgs.LoadedObject">
            <summary>
            The object that was loaded into the PropertyList control.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyListObjectEventArgs.LoadedObjectType">
            <summary>
            The determined type of the object that was loaded into the PropertyList control.
            </summary>
        </member>
        <member name="P:SolidShineUi.PropertyList.PropertyListObjectEventArgs.IsReload">
            <summary>
            Get if this event was triggered by reloading the current object, rather than 
            </summary>
        </member>
        <member name="M:SolidShineUi.PropertyList.PropertyListObjectEventArgs.#ctor(System.Object,System.Type,System.Boolean)">
            <summary>
            Create a new PropertyListObjectEventArgs.
            </summary>
            <param name="loadedObject">The object being loaded in</param>
            <param name="loadedType">the type of the object being loaded</param>
            <param name="isReload">Set if this loading action actually a reload</param>
        </member>
        <member name="T:SolidShineUi.RectConverter">
            <summary>
            A MultiValueConverter that takes 4 values and creates a Rect. This class can be used to get around the fact that a Rect cannot be used for XAML binding.
            </summary>
        </member>
        <member name="M:SolidShineUi.RectConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert 4 doubles to a Rect structure.
            </summary>
            <param name="values">The four doubles to use to measure the Rect's X, Y, Width, and Height values respectively.</param>
            <param name="targetType">Not used, always returns a <see cref="T:System.Windows.Rect"/></param>
            <param name="parameter">Not used</param>
            <param name="culture">Not used</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.RectConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a Rect into an array of doubles representing its X, Y, Width, and Height values respectively.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if the value passed in is not a Rect structure.</exception>
        </member>
        <member name="F:SolidShineUi.RectConverter.ZERO">
            <summary>
            A double defined as zero. Can be used if there is a value in your Rect that you do not want to set (via {x:Static} in XAML).
            </summary>
        </member>
        <member name="T:SolidShineUi.SelectableCollection`1">
            <summary>
            Represents a dynamic data collection, which provides notifications as items are added or removed, and which items can be marked as "selected".
            This is ideal for scenarios where you're working with a list or collection of objects, and want the ability to only affect any arbitrary subset of these objects.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.#ctor">
            <summary>
            Initializes a new SelectableCollection.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new SelectableCollection that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection to copy from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the collection is null.</exception>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new SelectableCollection that contains elements copied from the specified list.
            </summary>
            <param name="list">The list to copy from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the list is null.</exception>
        </member>
        <member name="T:SolidShineUi.SelectableCollection`1.ItemRemovingEventHandler">
            <summary>
            Represents a handler for the ItemRemoving event.
            </summary>
            <param name="sender">The source object of the event.</param>
            <param name="e">The event arguments, containing the item being removed and the ability to cancel the removal.</param>
        </member>
        <member name="E:SolidShineUi.SelectableCollection`1.ItemRemoving">
            <summary>
            Raised before an item is removed, to give the ability to cancel removing this item.
            </summary>
        </member>
        <member name="T:SolidShineUi.SelectableCollection`1.ItemAddingEventHandler">
            <summary>
            Represents a handler for the ItemAdding event.
            </summary>
            <param name="sender">The source object of the event.</param>
            <param name="e">The event arguments, containing the item being added and the ability to cancel the addition.</param>
        </member>
        <member name="E:SolidShineUi.SelectableCollection`1.ItemAdding">
            <summary>
            Raised before an item is added, to give the ability to cancel adding this item.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.Add(`0)">
            <summary>
            Add an item to the end of this collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Insert an item into this collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which to add the item.</param>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object in the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item is removed, otherwise <c>false</c>. It may be <c>false</c> if the item isn't actually in the collection or if the removal was cancelled via the ItemRemoving event.</returns>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified index of this collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns><c>true</c> if the item is removed, otherwise <c>false</c>. It will be <c>false</c> if the removal was cancelled via the ItemRemoving event.</returns>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Remove the item at the specified index of this collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns><c>true</c> if the item is removed, otherwise <c>false</c>. It will be <c>false</c> if the removal was cancelled via the ItemRemoving event.</returns>
        </member>
        <member name="P:SolidShineUi.SelectableCollection`1.SelectedItems">
            <summary>
            A collection of items that are currently selected (if no items are selected, the collection is empty). If <c>CanSelectMultiple</c> is false, this collection will only have 0 or 1 items.
            </summary>
            <remarks>To interact with the collection to add or remove items, use the methods of the SelectableCollection itself, such as Select, AddToSelection, Deselect, and ClearSelection.</remarks>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.Select(`0)">
            <summary>
            Select an item, replacing the current selection.
            </summary>
            <param name="item">The item to select.</param>
            <remarks>If <c>CanSelectMultiple</c> is true, use <see cref="M:SolidShineUi.SelectableCollection`1.AddToSelection(`0)"/> to add more items to the selected list,
            or <see cref="M:SolidShineUi.SelectableCollection`1.SelectRange(System.Collections.Generic.IEnumerable{`0})"/> to select multiple items at once.
            This function will always replace whatever is currently selected.</remarks>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.AddToSelection(`0)">
            <summary>
            Add an item to the existing list of selected items. If <c>CanSelectMultiple</c> is false, this item is only selected if nothing else is selected. Otherwise, nothing happens.
            </summary>
            <param name="item">The item to add.</param>
            <remarks>This function is a complement to <see cref="M:SolidShineUi.SelectableCollection`1.AddToOrReplaceSelection(`0)"/>. 
            <c>AddToSelection</c> should be used if preserving the existing selection is more important while <c>CanSelectMultiple</c> is false.
            <c>AddToOrReplaceSelection</c> should be used if selecting the item in the parameter is more important while <c>CanSelectMultiple</c> is false.
            While <c>CanSelectMultiple</c> is true, the two functions are identical.</remarks>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.AddToOrReplaceSelection(`0)">
            <summary>
            Add an item to the existing list of selected items. If <c>CanSelectMultiple</c> is false, this item is selected, replacing the previous selection.
            </summary>
            <param name="item">The item to add.</param>
            <remarks>This function is a complement to <see cref="M:SolidShineUi.SelectableCollection`1.AddToSelection(`0)"/>. 
            <c>AddToSelection</c> should be used if preserving the existing selection is more important while <c>CanSelectMultiple</c> is false.
            <c>AddToOrReplaceSelection</c> should be used if selecting the item in the parameter is more important while <c>CanSelectMultiple</c> is false.
            While <c>CanSelectMultiple</c> is true, the two functions are identical.</remarks>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.Deselect(`0)">
            <summary>
            Remove an item from the list of selected items.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.ClearSelection">
            <summary>
            Clear the list of selected items. No items will be selected.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.IsSelected(`0)">
            <summary>
            Check if an item is currently selected. Only returns true if the item is in this SelectableCollection and is selected; otherwise, this will return false.
            </summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is in this SelectableCollection and is selected; otherwise, false.</returns>
        </member>
        <member name="P:SolidShineUi.SelectableCollection`1.CanSelectMultiple">
            <summary>
            Get or set if multiple items can be selected in this SelectableCollection.
            </summary>
            <remarks>If CanSelectMultiple is set to false while there's currently more than 1 item selected, all items except the first are removed from the selection.</remarks>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.SelectRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Select a collection of items, replacing the current selection. If <c>CanSelectMultiple</c> is false, only the first item in the collection is selected. If the collection is empty, the selection is not changed.
            </summary>
            <param name="items">The items to select.</param>
            <remarks>This function will always replace whatever is currently selected EXCEPT in the situation that the <paramref name="items"/> parameter is an empty collection.
            If <c>CanSelectMultiple</c> is true, use <see cref="M:SolidShineUi.SelectableCollection`1.AddToSelection(`0)"/> to add to the existing list of selected items, rather than replacing it.</remarks>
        </member>
        <member name="M:SolidShineUi.SelectableCollection`1.SelectAll">
            <summary>
            Select all items in the collection. If <c>CanSelectMultiple</c> is false, only the first item in the collection is selected.
            </summary>
        </member>
        <member name="E:SolidShineUi.SelectableCollection`1.SelectionChanged">
            <summary>
            Raised when the selection is changed in any way, including additions, removals, and the selection being cleared.
            </summary>
        </member>
        <member name="T:SolidShineUi.ItemRemovingEventArgs`1">
            <summary>
            Event arguments for an ItemRemoving event. This is used for when an item is about to be removed.
            </summary>
            <typeparam name="T">Represents the type of item being removed.</typeparam>
        </member>
        <member name="M:SolidShineUi.ItemRemovingEventArgs`1.#ctor(`0)">
            <summary>
            Create an ItemRemovingEventArgs.
            </summary>
            <param name="item">The item being removed.</param>
        </member>
        <member name="P:SolidShineUi.ItemRemovingEventArgs`1.Item">
            <summary>
            The item being removed.
            </summary>
        </member>
        <member name="P:SolidShineUi.ItemRemovingEventArgs`1.Cancel">
            <summary>
            Get or set if the removal of this item should be cancelled. If true, the item will not be removed.
            </summary>
        </member>
        <member name="T:SolidShineUi.ItemAddingEventArgs`1">
            <summary>
            Event arguments for an ItemAdding event. This is used for when an item is about to be added.
            </summary>
            <typeparam name="T">Represents the type of item being added.</typeparam>
        </member>
        <member name="P:SolidShineUi.ItemAddingEventArgs`1.Item">
            <summary>
            The item being added.
            </summary>
        </member>
        <member name="P:SolidShineUi.ItemAddingEventArgs`1.Cancel">
            <summary>
            Get or set if the addition of this item should be cancelled. If true, the item will not be added.
            </summary>
        </member>
        <member name="M:SolidShineUi.ItemAddingEventArgs`1.#ctor(`0)">
            <summary>
            Create an ItemAddingEventArgs.
            </summary>
            <param name="item">The item being added.</param>
        </member>
        <member name="T:SolidShineUi.SelectionChangedEventArgs`1">
            <summary>
            Event arguments for when the current selection of a SelectableCollection is changed.
            </summary>
            <typeparam name="T">Represents the type of item in the collection.</typeparam>
        </member>
        <member name="M:SolidShineUi.SelectionChangedEventArgs`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            Create a SelectionChangedEventArgs.
            </summary>
            <param name="removedItems">A list of items being removed.</param>
            <param name="addedItems">A list of item being added.</param>
        </member>
        <member name="P:SolidShineUi.SelectionChangedEventArgs`1.AddedItems">
            <summary>
            The list of items being added to the selection ("selected").
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectionChangedEventArgs`1.RemovedItems">
            <summary>
            The list of items being removed from the selection ("deselected").
            </summary>
        </member>
        <member name="T:SolidShineUi.SelectableCollectionView`1">
            <summary>
            A type of CollectionView that operates as a SelectableCollection. This can be used as a SelectPanel's ItemsSource if <typeparamref name="T"/> derives from SelectableUserControl.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Create a SelectableCollectionView, that represents a view of the specified list.
            </summary>
            <param name="collection">The collection that is represented in this view.</param>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.#ctor(System.Collections.IList)">
            <summary>
            Create a SelectableCollectionView, that represents a view of the specified list.
            </summary>
            <param name="collection">The collection that is represented in this view.</param>
            <exception cref="T:System.ArgumentException">Thrown if collection is not a generic IList of type <typeparamref name="T"/> (<c>IList&lt;T&gt;</c>).</exception>
        </member>
        <member name="E:SolidShineUi.SelectableCollectionView`1.SelectionChanged">
            <summary>
            Raised when the list of selected items is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableCollectionView`1.SelectedItems">
            <summary>
            Get a list of currently selected items.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableCollectionView`1.CanSelectMultiple">
            <summary>
            Get if multiple items can be selected at once. This property cannot be changed or set to; trying to call the setter will raise a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">Raised if the setter for this property is called. This property is implemented as read-only here.</exception>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.AddToSelection(`0)">
            <summary>
            Add an item to the existing list of selected items.
            </summary>
            <param name="item">The item to select.</param>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.Select(`0)">
            <summary>
            Select an item, replacing the current list of selected items.
            </summary>
            <param name="item">The item to select.</param>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.Deselect(`0)">
            <summary>
            Remove an item from the list of selected items.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.SelectAll">
            <summary>
            Select all items in the base collection.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.ClearSelection">
            <summary>
            Clear the list of selected items. Nothing will be selected.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.IsSelected(`0)">
            <summary>
            Check if an item is currently in the list of selected items.
            </summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is currently in the list of selected items; otherwise, false.</returns>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.SelectRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Select a range of items, replacing the current selection list.
            </summary>
            <param name="items">The items to select.</param>
        </member>
        <member name="P:SolidShineUi.SelectableCollectionView`1.Item(System.Int32)">
            <summary>
            Get the item at the specified index in the underlying list.
            </summary>
            <param name="index">The index of the item.</param>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.IndexOf(`0)">
            <summary>
            Get the index of an item in this collection, or -1 if the index is unknown.
            </summary>
            <param name="item">The index of the item.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.Contains(`0)">
            <summary>
            Returns if this collection currently contains the specified item.
            </summary>
            <param name="item">The item to check.</param>
        </member>
        <member name="M:SolidShineUi.SelectableCollectionView`1.Remove(`0)">
            <summary>
            Remove an item from this collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="T:SolidShineUi.SelectableItem">
            <summary>
            A standard selectable control that can be used with a SelectPanel. This has a number of customization options out of the box,
            including being able to set left-aligned and right-aligned text, an image, and also indent the contents to mimic the appearance of a tree view.
            </summary>
            <summary>
            SelectableItem
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableItem.#ctor">
            <summary>
            Create a SelectableItem to use with a SelectPanel.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableItem.#ctor(System.String)">
            <summary>
            Create a SelectableItem to use with a SelectPanel, with the text preset.
            </summary>
            <param name="text">The text to display in the item.</param>
        </member>
        <member name="M:SolidShineUi.SelectableItem.#ctor(System.String,System.Windows.Media.ImageSource,System.Double)">
            <summary>
            Create a SelectableItem to use with a SelectPanel, with certain properties preset.
            </summary>
            <param name="text">The text to display in the item.</param>
            <param name="image">The image to display in the item. (If the image is wider than 16 pixels, you may need to update the <c>ImageWidth</c> property.) Set to <c>null</c> to not show an image.</param>
            <param name="indent">The left indent to apply to the item's content. The indent can be used to make an improvised tree view.</param>
        </member>
        <member name="M:SolidShineUi.SelectableItem.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.SelectableItem.Indent">
            <summary>
            Get or set the left indent to apply to the item's content. This can be used to make an improvised tree view.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.ShowCheckbox">
            <summary>
            Get or set whether a checkbox should be displayed on the item. Checkboxes can make it easy to select mutliple items.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.CheckboxState">
            <summary>
            Get or set the state of the checkbox. The checkbox is only shown if <see cref="P:SolidShineUi.SelectableItem.ShowCheckbox"/> is set to true.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.IsCheckboxChecked">
            <summary>
            Get or set if the checkbox is checked. The checkbox is only shown if <see cref="P:SolidShineUi.SelectableItem.ShowCheckbox"/> is set to true.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.MatchCheckboxValueToSelect">
            <summary>
            Get or set if the checkbox's value should be changed if this control is selected (and vice-versa). Default is true
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.ImageWidth">
            <summary>
            Get or set the width to afford to the image. By default, the width is set to 16, but larger images will require the width to be set higher.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.ShowImage">
            <summary>
            Get or set whether to display an image on the left side of the item. Set the image via the <c>ImageSource</c> property.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.ImageSource">
            <summary>
            Get or set the source for the image to show on the left side of the item. If set, the item automatically displays the image (unless <c>AutoShowImageOnSourceSet</c> is set to false).
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.AutoShowImageOnSourceSet">
            <summary>
            Get or set whether the <c>ShowImage</c> property should be updated when the <c>ImageSource</c> property is set. Default is true.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.Text">
            <summary>
            Get or set the text to display within the item. This text can be edited by setting <c>AllowTextEditing</c> to true, or by calling <see cref="M:SolidShineUi.SelectableItem.DisplayEditText"/>.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.TextColumnWidth">
            <summary>
            Get or set the width of the main text section of the control.
            This can be used to limit the width of the main text section, or make it as wide as needed for the full text to fit.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.TextTrimming">
            <summary>
            Get or set the text trimming behavior to use when the text overflows the visible area.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.RightText">
            <summary>
            Get or set the text to display on the far-right side of the item. This text cannot be edited directly by the user.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.RightFontFamily">
            <summary>
            Get or set the FontFamily to use for the text on the right side of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.RightFontSize">
            <summary>
            Get or set the font size to use for the text on the right side of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.RightFontWeight">
            <summary>
            Get or set the font weight to use for the text on the right side of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.RightFontStretch">
            <summary>
            Get or set the font stretch to use for the text on the right side of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.RightFontStyle">
            <summary>
            Get or set the FontStyle to use for the text on the right side of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.RightTextWidth">
            <summary>
            Get or set the width of the right text section of the control.
            This can be used to limit the width of the right text section, or make it as wide as needed for the right text to fit fully.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.TextUnderlineOnMouseOver">
            <summary>
            Get or set if the text should have an underline effect when the mouse is over the text. This is enabled by default when <c>AllowTextEditing</c> is set to "true", but otherwise is disabled.
            </summary>
        </member>
        <member name="E:SolidShineUi.SelectableItem.TextChanged">
            <summary>
            Raised when the Text property is changed, either via updating the property or via the the user's text editing view.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.SelectOnFocusTextEdit">
            <summary>
            Get or set whether all of the text should be selected when the text-editing text box recieves focus.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableItem.AllowTextEditing">
            <summary>
            Get or set whether the user should be allowed to edit the text in the Text property. If enabled, a text box will appear when the user clicks on the text.
            </summary>
            <remarks>While editing, pressing "Enter" will confirm the edit, while pressing "Escape" will cancel the operation.</remarks>
        </member>
        <member name="M:SolidShineUi.SelectableItem.DisplayEditText">
            <summary>
            Display the text editing view to the user. This is the same as the user clicking on the text while <c>AllowTextEditing</c> is set to true.
            </summary>
            <remarks>This method will activate the text editing view even if <c>AllowTextEditing</c> is set to false.</remarks>
        </member>
        <member name="M:SolidShineUi.SelectableItem.ConfirmEdit">
            <summary>
            Confirm the user's edit to the text, as changed via the text editing view. Also exits the text editing view. This can only be called when in the text editing view.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this item is not in the text editing view.</exception>
        </member>
        <member name="M:SolidShineUi.SelectableItem.CancelEdit">
            <summary>
            Cancel the user's edit to the text and exits the text editing view (if in the view). This can be called at any time.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.SelectableUserControl">
            <summary>
            The basic control that can be added into a SelectPanel. Extend this class to create your own UI elements to use with the SelectPanel.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableUserControl.#ctor">
            <summary>
            Create a SelectableUserControl.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableUserControl.ClickBrush">
            <summary>
            Get or set the brush to use for the background of this control while it is being clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableUserControl.Background">
            <summary>
            Get or set the brush to use for the background of this control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableUserControl.SelectedBrush">
            <summary>
            Get or set the brush to use for the background of this control while it is selected.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableUserControl.HighlightBrush">
            <summary>
            Get or set the brush to use for the background of this contol while it is highlighted (i.e. has a mouse over it, or has keyboard focus).
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableUserControl.UpdateBrushes">
            <summary>
            Make sure the control's visuals match the set brush properties. Call this if the parent's ColorScheme was changed.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableUserControl.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            When overridden by a derived class, this method is automatically called each time the color scheme is updated by the parent SelectPanel. Use this to update child controls.
            </summary>
            <param name="cs">The new color scheme.</param>
        </member>
        <member name="P:SolidShineUi.SelectableUserControl.CanSelect">
            <summary>
            Get or set if this control can be selected.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectableUserControl.IsSelected">
            <summary>
            Get or set if this control is currently selected.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectableUserControl.SetIsSelectedWithSource(System.Boolean,SolidShineUi.SelectionChangeTrigger,System.Object)">
            <summary>
            Set the <see cref="P:SolidShineUi.SelectableUserControl.IsSelected"/> value of this control, while also defining how the selection was changed.
            </summary>
            <param name="value">The value to set <see cref="P:SolidShineUi.SelectableUserControl.IsSelected"/> to.</param>
            <param name="triggerMethod">The source or method used to trigger the change in selection.</param>
            <param name="triggerSource">The object that triggered the change.</param>
        </member>
        <member name="E:SolidShineUi.SelectableUserControl.SelectionChanged">
            <summary>
            Raised if the IsSelected property is changed.
            </summary>
        </member>
        <member name="E:SolidShineUi.SelectableUserControl.CanSelectChanged">
            <summary>
            Raised if the CanSelect property is changed.
            </summary>
        </member>
        <member name="E:SolidShineUi.SelectableUserControl.Click">
            <summary>
            Raised when the control is clicked.
            </summary>
        </member>
        <member name="E:SolidShineUi.SelectableUserControl.RightClick">
            <summary>
            Raised when the control is right-clicked.
            </summary>
        </member>
        <member name="T:SolidShineUi.SelectableUserControl.ItemSelectionChangedEventHandler">
            <summary>
            Represents a handler for the SelectionChanged event.
            </summary>
            <param name="sender">The source object of the event.</param>
            <param name="e">The event arguments, containing information on the new IsSelected value and how the selection changed.</param>
        </member>
        <member name="T:SolidShineUi.ItemSelectionChangedEventArgs">
            <summary>
            The event arguments for the SelectionChanged event of the SelectableUserControl.
            </summary>
        </member>
        <member name="M:SolidShineUi.ItemSelectionChangedEventArgs.#ctor(System.Boolean,System.Boolean,SolidShineUi.SelectionChangeTrigger,System.Object)">
            <summary>
            Create a new ItemSelectionChangedEventArgs.
            </summary>
            <param name="oldValue">The old IsSelected value.</param>
            <param name="newValue">The new IsSelected value.</param>
            <param name="trigger">The trigger method that caused the value to be updated.</param>
            <param name="triggerSource">The source object that updated the value.</param>
        </member>
        <member name="P:SolidShineUi.ItemSelectionChangedEventArgs.OldValue">
            <summary>
            The old value of the IsSelected property.
            </summary>
        </member>
        <member name="P:SolidShineUi.ItemSelectionChangedEventArgs.NewValue">
            <summary>
            The new value of the IsSelected property.
            </summary>
        </member>
        <member name="P:SolidShineUi.ItemSelectionChangedEventArgs.TriggerMethod">
            <summary>
            The method that was used to update the value.
            </summary>
        </member>
        <member name="P:SolidShineUi.ItemSelectionChangedEventArgs.TriggerSource">
            <summary>
            The object that caused the update to occur, if available.
            </summary>
        </member>
        <member name="T:SolidShineUi.SelectionChangeTrigger">
            <summary>
            Indicates which method or source triggered the change in selection.
            </summary>
        </member>
        <member name="F:SolidShineUi.SelectionChangeTrigger.ControlClick">
            <summary>
            The selection was changed due to the control itself being clicked.
            </summary>
        </member>
        <member name="F:SolidShineUi.SelectionChangeTrigger.CheckBox">
            <summary>
            The selection was changed due to a checkbox in the control being clicked.
            </summary>
        </member>
        <member name="F:SolidShineUi.SelectionChangeTrigger.Parent">
            <summary>
            The selection was changed due to an action by the parent object containing the control.
            </summary>
        </member>
        <member name="F:SolidShineUi.SelectionChangeTrigger.CodeUnknown">
            <summary>
            The selection was changed via directly setting the value in code, or the method isn't strictly defined here.
            </summary>
        </member>
        <member name="T:SolidShineUi.SelectPanel">
            <summary>
            A ListBox-like control that can be used to select and interact with multiple items, with extra functionality and a visual style that matches the rest of the Solid Shine UI controls.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectPanel.#ctor">
            <summary>
            Create a new NewSelectPanel.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectPanel.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:SolidShineUi.SelectPanel.ItemsSource">
            <summary>
            Gets or sets a collection used to generate the content of this SelectPanel.
            </summary>
            <remarks>
            It is recommended to set this property to an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>, <see cref="T:SolidShineUi.SelectableCollection`1"/>, or <see cref="T:SolidShineUi.SelectableCollectionView`1"/>.
            If you use other IEnumerable types that do not also implement <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>, then this control's contents will not update automatically.
            If you do not use a SelectableCollection or SelectableCollectionView, you may also need to implement your own code for handling the selection state of the items
            in your collection.
            </remarks>
        </member>
        <member name="P:SolidShineUi.SelectPanel.Items">
            <summary>
            Get or set the list of items in this SelectPanel. This Items property can be used to add items, remove items, and also select items via the Select method.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.MultiSelect">
            <summary>
            Get or set if multiple items can be selected at once. If false, then only 1 item can be selected at a time.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectPanel.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.SelectPanel.ColorScheme">
            <summary>
            Get or set the color scheme to apply to the control. The color scheme can quickly apply a whole visual style to your control.
            </summary>
        </member>
        <member name="E:SolidShineUi.SelectPanel.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.SelectPanel.use_lbrdr">
            <summary>
            This field is not meant to be public. This will be hidden in a future release. Please use the UseLighterBorder property.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.UseLighterBorder">
            <summary>
            Use a lighter border color when applying color schemes. Note that this does not apply in high-contrast mode,
            nor does it apply if you are not using color schemes to set this control's appearance.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectPanel.ApplyColorScheme(SolidShineUi.ColorScheme,System.Boolean)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
            <param name="useLighterBorder">Set if a lighter border color should be used.</param>
        </member>
        <member name="E:SolidShineUi.SelectPanel.SelectionChanged">
            <summary>
            Raised when an item is selected or deselected in this list.
            </summary>
        </member>
        <member name="E:SolidShineUi.SelectPanel.ItemsAdded">
            <summary>
            Raised when an item is added to this list.
            </summary>
        </member>
        <member name="E:SolidShineUi.SelectPanel.ItemsRemoved">
            <summary>
            Raised when an item is removed from this list.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.HorizontalScrollBarVisibility">
            <summary>
            Get or set the appearance of the horizontal scroll bar for this control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.VerticalScrollBarVisibility">
            <summary>
            Get or set the appearance of the vertical scroll bar for this control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.Background">
            <summary>
            Get or set the brush used for the background of this control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.ClickBrush">
            <summary>
            Get or set the brush used when an item in this control is being clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.SelectedBrush">
            <summary>
            Get or set the brush used when an item in this control is selected.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.HighlightBrush">
            <summary>
            Get or set the brush used when an item in this control is highlighted (i.e. has the mouse over it or has keyboard focus).
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.DisabledBrush">
            <summary>
            Get or set the brush used for the background when this control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.BorderDisabledBrush">
            <summary>
            Get or set the brush used for the border when this control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.BorderBrush">
            <summary>
            Get or set the brush used for the border around this control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.BorderThickness">
            <summary>
            Get or set the thickness of the border around this control.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.CornerRadius">
            <summary>
            Get or set the corner radius (or radii) to use for the control's border. Setting the corners to 0 means there is no rounding; square corners are used.
            Any corners with a higher number will be rounded.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.Count">
            <summary>
            Gets the number of items in this SelectPanel.
            Note that this function will be removed in a future version. Please instead use <c>Items.Count</c>.
            </summary>
        </member>
        <member name="P:SolidShineUi.SelectPanel.SelectionCount">
            <summary>
            Gets the number of items that are currently selected.
            Note that this function will be removed in a future version. Please instead use <c>Items.SelectedItems.Count</c>.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectPanel.GetSelectedItemsOfType``1">
            <summary>
            Get a collection of items that have been selected, returned as a certain type (that inherits from SelectableUserControl).
            Note that this function will be removed in a future version. Please instead use <c>Items.SelectedItems.OfType</c> (Linq).
            </summary>
            <typeparam name="T">The type to return the selected items as. It must inherit from SelectableUserControl.</typeparam>
        </member>
        <member name="M:SolidShineUi.SelectPanel.SelectAll">
            <summary>
            Select all items in this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.SelectAll</c>.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectPanel.DeselectAll">
            <summary>
            Deselect all items in this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.ClearSelection</c>.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectPanel.AddItem(SolidShineUi.SelectableUserControl)">
            <summary>
            Add an item to this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.Add</c>.
            </summary>
            <param name="item">Item to be added.</param>
        </member>
        <member name="M:SolidShineUi.SelectPanel.AddItems(System.Collections.Generic.IEnumerable{SolidShineUi.SelectableUserControl})">
            <summary>
            Add a collection of items to this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.Add</c>.
            </summary>
            <param name="items">The items to be added.</param>
        </member>
        <member name="M:SolidShineUi.SelectPanel.InsertItem(System.Int32,SolidShineUi.SelectableUserControl)">
            <summary>
            Insert an item into this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.Insert</c>.
            </summary>
            <param name="index">The index to insert the item at.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:SolidShineUi.SelectPanel.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{SolidShineUi.SelectableUserControl})">
            <summary>
            Insert a collection of items into this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.Insert</c>.
            </summary>
            <param name="index">The index to insert the items at.</param>
            <param name="items">The items to insert.</param>
        </member>
        <member name="M:SolidShineUi.SelectPanel.GetItemsAsType``1">
            <summary>
            Get all items in the SelectPanel that match the specified type. Note that this function will be removed in a future version. Please instead use <c>Items.OfType</c> (Linq).
            </summary>
            <typeparam name="T">The type to filter the SelectPanel items for.</typeparam>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.SelectPanel.RemoveItem(SolidShineUi.SelectableUserControl)">
            <summary>
            Remove an item from this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.Remove</c>.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:SolidShineUi.SelectPanel.RemoveItems(System.Collections.Generic.IEnumerable{SolidShineUi.SelectableUserControl})">
            <summary>
            Remove multiple items from this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.Remove</c>.
            </summary>
            <param name="items">The items to be removed.</param>
        </member>
        <member name="M:SolidShineUi.SelectPanel.RemoveAt(System.Int32)">
            <summary>
            Remove an item at a specified index from this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.RemoveAt</c>.
            </summary>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:SolidShineUi.SelectPanel.RemoveSelectedItems">
            <summary>
            Remove the currently selected items from the list.
            </summary>
            <remarks>
            Note: unlike many other functions, this one is not being removed in a near future version.
            </remarks>
        </member>
        <member name="M:SolidShineUi.SelectPanel.IndexOf(SolidShineUi.SelectableUserControl)">
            <summary>
            Get the index of an item in this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.IndexOf</c>.
            </summary>
            <param name="item">The item to get the index of.</param>
        </member>
        <member name="M:SolidShineUi.SelectPanel.Get(System.Int32)">
            <summary>
            Get an item at a specified index in this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items[]</c>.
            </summary>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="P:SolidShineUi.SelectPanel.Item(System.Int32)">
            <summary>
            Get an item at a specified index in this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items[]</c>.
            </summary>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:SolidShineUi.SelectPanel.Clear">
            <summary>
            Clear all items in this SelectPanel. Note that this function will be removed in a future version. Please instead use <c>Items.Clear</c>.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectPanel.MoveSelectedItemsUp">
            <summary>
            Move the currently selected items up by one in the list.
            </summary>
        </member>
        <member name="M:SolidShineUi.SelectPanel.MoveSelectedItemsDown">
            <summary>
            Move the currently selected items down by one in the list.
            </summary>
            <remarks>
            This function does not operate if the ItemsSource is set to a different collection.
            </remarks>
        </member>
        <member name="M:SolidShineUi.SelectPanel.MoveItemUp(System.Int32)">
            <summary>
            Move an item in the SelectPanel up by one position in the list.
            </summary>
            <param name="index">The index of the item to move.</param>
            <remarks>
            If the index passed in is 0, then nothing is moved, as it's already at the top of the list.
            This function does not operate if the ItemsSource is set to a different collection.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index passed in is beyond the number of items in the collection.</exception>
        </member>
        <member name="M:SolidShineUi.SelectPanel.MoveItemDown(System.Int32)">
            <summary>
            Move an item in the SelectPanel down by one position in the list.
            </summary>
            <param name="index">The index of the item to move.</param>
            <remarks>
            If the index passed in is the last index in the collection, then nothing is moved, as it's already at the bottom of the list.
            This function does not operate if the ItemsSource is set to a different collection.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index passed in is beyond the number of items in the collection.</exception>
        </member>
        <member name="P:SolidShineUi.SelectPanel.AllowParentScrolling">
            <summary>
            Set whether the SelectPanel should allow its parent to scroll if the SelectPanel doesn't need to scroll. Note that enabling this may disable any child items from scrolling.
            </summary>
        </member>
        <member name="T:SolidShineUi.TabControl">
            <summary>
            A control that can house multiple controls under a number of tabs. Each tab has a title, icon, and close button (see <see cref="T:SolidShineUi.TabItem"/>).
            </summary>
        </member>
        <member name="M:SolidShineUi.TabControl.#ctor">
            <summary>
            Create a TabControl.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.SelectFirstTabOnLoad">
            <summary>
            Get or set if the first tab should be selected right away when the control is loaded. This property has no effect after the control is loaded.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.Items">
            <summary>
            Get or set the list of tabs in this TabControl. This Items property can be used to add tabs, remove tabs, and also select tabs via the Select method.
            </summary>
        </member>
        <member name="M:SolidShineUi.TabControl.PrepareCloseTab(SolidShineUi.TabItem)">
            <summary>
            Set up the process to close a tab. This function does not actually close the tab.
            </summary>
            <param name="tab">The tab to close.</param>
            <returns><c>true</c> if the tab is good to be closed (wasn't cancelled); <c>false</c> if it was cancelled.</returns>
        </member>
        <member name="T:SolidShineUi.TabControl.TabItemChangeEventHandler">
            <summary>
            A delegate to be used with events regarding the selected TabItem changing in a TabControl.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="e">The event arguments associated with this event.</param>
        </member>
        <member name="T:SolidShineUi.TabControl.TabItemClosingEventHandler">
            <summary>
            A delegate to be used with events regarding a TabItem being closed in a TabControl.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="e">The event arguments associated with this event.</param>
        </member>
        <member name="P:SolidShineUi.TabControl.SelectedTab">
            <summary>
            Get the tab currently selected. Use <c>Items.Select()</c> to select another tab.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.SelectedTabContent">
            <summary>
            Get the currently shown content in the main part of the control. This is the content of the currently selected tab.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabControl.SelectedTabProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabControl.SelectedTabContentProperty">
            <summary>
            A dependency property object backing a related property. See the related property for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.CurrentTab">
            <summary>
            Get the tab currently selected. Use <c>Items.Select()</c> to select another tab.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.TabChanged">
            <summary>
            Raised when the tab currently selected is changed.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.TabClosing">
            <summary>
            Raised when a tab is about to be closed, with the ability to cancel the action.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.TabClosed">
            <summary>
            Raised when a tab is closed.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.TabsCleared">
            <summary>
            Raised when all tabs are closed at once (via <c>Items.Clear()</c>).
            </summary>
        </member>
        <member name="M:SolidShineUi.TabControl.CloseTab(SolidShineUi.TabItem)">
            <summary>
            Close a specific tab in this TabControl.
            </summary>
            <param name="tab">The tab to close.</param>
            <remarks>
            If <paramref name="tab"/> is not in this TabControl, or if the tab closing is cancelled via the TabClosing event, then nothing will happen.
            This does not take the <paramref name="tab"/>'s <c>CanClose</c> property into account; the tab will be closed regardless.
            </remarks>
        </member>
        <member name="F:SolidShineUi.TabControl.CloseCurrentTab">
            <summary>A WPF command that when executed, will close the currently open tab.</summary>
        </member>
        <member name="F:SolidShineUi.TabControl.CloseSpecificTab">
            <summary>A WPF command that when executed, will close a specific tab on this TabControl.</summary>
        </member>
        <member name="F:SolidShineUi.TabControl.SwitchToTab">
            <summary>A WPF command that when executed, will select and display a specific tab on this TabControl.</summary>
        </member>
        <member name="M:SolidShineUi.TabControl.CanExecuteAlways(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            The command in question is always able to be executed, regardless of the state of the object.
            </summary>
        </member>
        <member name="M:SolidShineUi.TabControl.CanExecuteIfAnyTabSelected(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            The command in question is able to execute, if at least one tab is selected.
            </summary>
        </member>
        <member name="M:SolidShineUi.TabControl.CanExecuteIfTabPresent(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            The command in question is able to execute, if the tab specified in the command parameter is contained in this control.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.ShowTabsOnBottom">
            <summary>
            Get or set if the tab bar should be shown at the bottom of the control, rather than the top.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.InternalShowTabsOnBottomChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.ShowTabsOnBottomChanged">
            <summary>
            Raised when the ShowTabsOnBottom property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.HorizontalTabBarHeight">
            <summary>
            Get or set the height of the horizontal tab bar. The default value is 24.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.InternalHorizontalTabBarHeightChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.HorizontalTabBarHeightChanged">
            <summary>
            Raised when the HorizontalTabBarHeight property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.LeftTabBarElement">
            <summary>
            Get or set the element to display on the left side of the tab bar.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.RightTabBarElement">
            <summary>
            Get or set the element to display on the right side of the tab bar (to the left of the Tab List Menu).
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.ShowTabListMenu">
            <summary>
            Get or set if a tab list menu should be shown on the far-right edge of the control's tab bar, listing all the open tabs. This mimics a similar menu found in Visual Studio.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.InternalShowTabListMenuChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.ShowTabListMenuChanged">
            <summary>
            Raised when the ShowTabListMenu property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.TabMinWidth">
            <summary>
            Get or set the minimum width a tab should have in the tab bar. While tabs may be wider than this width, they will never be shorter than it.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.InternalTabMinWidthChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.TabMinWidthChanged">
            <summary>
            Raised when the TabMinWidth property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabControl.SelectedTabClosedAction">
            <summary>
            Get or set the action to take when the currently selected tab is closed.
            </summary>
            <remarks>
            Clearing the selection (via <c>Items.ClearSelection</c> or other methods) will trigger this action as well, meaning the TabControl will attempt to select another tab if
            this action is not <c>SelectNothing</c>. If you need to clear the selection, you'll need to set this property to <c>SelectNothing</c> first, clear the selection, and then reset
            this to whatever value you had previously (by default, the value is <c>SelectTabToLeft</c>).<para/>
            
            When a tab that isn't currently the selected tab is closed, that is not affected with this property.
            </remarks>
        </member>
        <member name="P:SolidShineUi.TabControl.AllowTabDragDrop">
            <summary>
            Get or set if tabs can be dragged and dropped.
            </summary>
            <remarks>
            Note that dragging and dropping tabs between TabControls is not currently supported.
            </remarks>
        </member>
        <member name="E:SolidShineUi.TabControl.InternalAllowTabDragDropChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabControl.AllowTabDragDropChanged">
            <summary>
            Raised when the AllowTabDragDrop property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabControl.ColorSchemeProperty">
            <summary>
            A dependency property object backing the related ColorScheme property. See <see cref="P:SolidShineUi.TabControl.ColorScheme"/> for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.TabControl.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.TabControl.ColorScheme">
            <summary>
            Get or set the color scheme to apply to the control. The color scheme can quickly apply a whole visual style to your control.
            </summary>
        </member>
        <member name="M:SolidShineUi.TabControl.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="M:SolidShineUi.TabControl.SetupTabDisplay(SolidShineUi.Utils.TabDisplayItem)">
            <summary>
            Set up a new TabDisplayItem that was added to this TabControl.
            This will set up the necessary event handlers and other properties to allow the TabDisplayItem to interact with the TabControl.
            </summary>
            <param name="tdi">The TabDisplayItem to set up.</param>
        </member>
        <member name="P:SolidShineUi.TabControl.ScrollButtonsVisible">
            <summary>
            Get if the scroll buttons are currently visible in the tab bar.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabControl.TabBarScrollCommand">
            <summary>
            A WPF command that when executed, will scroll the tab control's tab bar to the left or right.
            </summary>
        </member>
        <member name="T:SolidShineUi.TabItemClosingEventArgs">
            <summary>
            Event arguments for the TabClosing event in TabControl.
            </summary>
        </member>
        <member name="M:SolidShineUi.TabItemClosingEventArgs.#ctor(SolidShineUi.TabItem)">
            <summary>
            Create a TabItemClosingEventArgs.
            </summary>
            <param name="t">The tab item being closed.</param>
        </member>
        <member name="P:SolidShineUi.TabItemClosingEventArgs.TabItem">
            <summary>
            The TabItem being closed (and removed from the TabControl).
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItemClosingEventArgs.Cancel">
            <summary>
            Get or set if this operation should be cancelled. If <c>true</c>, this tab will not be closed and removed from the TabControl.
            </summary>
        </member>
        <member name="T:SolidShineUi.TabItemChangeEventArgs">
            <summary>
            Event arguments for the TabChanged event in TabControl.
            </summary>
        </member>
        <member name="M:SolidShineUi.TabItemChangeEventArgs.#ctor(SolidShineUi.TabItem)">
            <summary>
            Create a TabItemChangeEventArgs.
            </summary>
            <param name="t">The TabItem being changed to.</param>
        </member>
        <member name="P:SolidShineUi.TabItemChangeEventArgs.TabItem">
            <summary>
            The TabItem being changed to. This is the new TabItem being displayed.
            </summary>
        </member>
        <member name="T:SolidShineUi.SelectedTabCloseAction">
            <summary>
            References the action to take when the currently-selected tab is closed.
            </summary>
        </member>
        <member name="F:SolidShineUi.SelectedTabCloseAction.SelectNothing">
            <summary>Do not select anything; all tabs are deselected and nothing is shown.</summary>
        </member>
        <member name="F:SolidShineUi.SelectedTabCloseAction.SelectFirstTab">
            <summary>Select the first (leftmost) tab on the TabControl.</summary>
        </member>
        <member name="F:SolidShineUi.SelectedTabCloseAction.SelectLastTab">
            <summary>Select the last (rightmost) tab on the TabControl.</summary>
        </member>
        <member name="F:SolidShineUi.SelectedTabCloseAction.SelectTabToLeft">
            <summary>Select the tab to the left of the one being closed.</summary>
        </member>
        <member name="F:SolidShineUi.SelectedTabCloseAction.SelectTabToRight">
            <summary>Select the tab to the right of the one being closed.</summary>
        </member>
        <member name="T:SolidShineUi.TabItem">
            <summary>
            A tab that can be added onto a <see cref="T:SolidShineUi.TabControl"/>. Each tab has a title, icon, and close button by default.
            </summary>
        </member>
        <member name="M:SolidShineUi.TabItem.#ctor">
            <summary>
            Create a TabItem.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.TitleProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.Title">
            <summary>
             Get or set the title of this tab.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalTitleChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.TitleChanged">
            <summary>
            Raised when the Title property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.IsDirtyProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.IsDirty">
            <summary>
             Get or set if the tab is dirty.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalIsDirtyChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.IsDirtyChanged">
            <summary>
            Raised when the IsDirty property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.DisplayDirtyStateProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.DisplayDirtyState">
            <summary>
             Get or set if the tab should display the state of its IsDirty property. When set to true, an asterisk (*) will be added to the title when it is dirty.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalDisplayDirtyStateChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.DisplayDirtyStateChanged">
            <summary>
            Raised when the DisplayDirtyState property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.CanCloseProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.CanClose">
            <summary>
             Get or set if this tab can be closed via the UI (i.e. the close button).
            </summary>
            <remarks>
             This property does not prevent this tab being closed via other means, such as <see cref="M:SolidShineUi.TabItem.Close"/> or <see cref="M:SolidShineUi.SelectableCollection`1.Remove(`0)"/>.
             </remarks>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalCanCloseChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.CanCloseChanged">
            <summary>
            Raised when the CanClosed property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.ShowIconProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.ShowIcon">
            <summary>
             Get or set if an icon is shown for this tab. The icon section of the tab will be visible if this is true, even if there is no icon set.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalShowIconChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.ShowIconChanged">
            <summary>
            Raised when the ShowIcon property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.CanSelectProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.CanSelect">
            <summary>
             Get or set whether this tab can be selected via UI.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalCanSelectChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.CanSelectChanged">
            <summary>
            Raised when the CanSelect property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.IconProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.Icon">
            <summary>
             Get or set the icon to display with this tab.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalIconChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.IconChanged">
            <summary>
            Raised when the tab's icon is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.TabBackgroundProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.TabBackground">
            <summary>
             Get or set the brush displayed in the background of the tab. This will override the color of the TabControl itself, but transparency does allow the standard color to show through.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalTabBackgroundChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.TabBackgroundChanged">
            <summary>
            Raised when the tab's background is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.ContentProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.Content">
            <summary>
             Get or set the content to display when this tab is selected.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalContentChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.ContentChanged">
            <summary>
            Raised when the tab's content property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.PaddingProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.Padding">
            <summary>
             Get or set the padding (or space) applied around the tab's title and icon. (This does not set the padding for the content.)
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalPaddingChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.PaddingChanged">
            <summary>
            Raised when the Padding property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.VisibilityProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.Visibility">
            <summary>
             Get or set if this tab is visually displayed in the UI.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalVisibilityChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.VisibilityChanged">
            <summary>
            Raised when the tab's visibility property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.TabContextMenuProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.TabContextMenu">
            <summary>
            Get or set the menu that appears when you right-click on the tab in the TabControl.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.AllowDropProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.AllowDrop">
            <summary>
             Get or set if this tab can be used as a target in drag-and-drop operations.
            </summary>
            <remarks>
             Note that this only sets if this tab can recieve data dropped onto it in the tab bar. The elements inside the tab can set their own AllowDrop property if you want to drop items inside the tab's contents.
             This property does not need to be set to allow tab drag-and-drop on the TabControl (for rearranging tabs). Tab drag-and-drop is controlled via the <see cref="P:SolidShineUi.TabControl.AllowTabDragDrop"/> property.
             </remarks>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalAllowDropChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.AllowDropChanged">
            <summary>
            Raised when the AllowDrop property is changed.
            </summary>
        </member>
        <member name="M:SolidShineUi.TabItem.RaiseDragEvent(System.String,System.Windows.DragEventArgs)">
            <summary>
            Instructs the TabItem to raise a particular drag-and-drop event, used internally to support drag-and-drop in TabControls.
            </summary>
            <param name="ev">The name of the event to raise.</param>
            <param name="e">The DragEventArgs to include with the event.</param>
            <remarks>
            Due to how the WPF architecture is set up, routed events are not possible within the TabItem class, and thus regular .NET events are used instead.
            This method allows visual representations of a TabItem (such as TabDisplayItem) to handle drag and drop events and hand them off to the TabItem.
            Although the TabItem and TabDisplayItem in Solid Shine UI don't support being a drag source by themselves (excepting to drag and drop tabs within
            a TabControl), the GiveFeedback and QueryContinueDrag events are present as well, in case it is needed by classes that inherit TabItem.
            See <see cref="M:SolidShineUi.TabItem.RaiseGiveFeedbackEvent(System.Windows.GiveFeedbackEventArgs,System.Boolean)"/> and <see cref="M:SolidShineUi.TabItem.RaiseQueryContinueDragEvent(System.Windows.QueryContinueDragEventArgs,System.Boolean)"/>
            for methods for raising those events.
            </remarks>
        </member>
        <member name="M:SolidShineUi.TabItem.RaiseGiveFeedbackEvent(System.Windows.GiveFeedbackEventArgs,System.Boolean)">
            <summary>
            Invoke the GiveFeedback event for drag-and-drop.
            </summary>
            <param name="e">The GiveFeedbackEventArgs to pass to the event.</param>
            <param name="preview">Determine if the PreviewGiveFeedback event should be raised, rather than GiveFeedback.</param>
            <remarks>See the remarks for <see cref="M:SolidShineUi.TabItem.RaiseDragEvent(System.String,System.Windows.DragEventArgs)"/> for more information.</remarks>
        </member>
        <member name="M:SolidShineUi.TabItem.RaiseQueryContinueDragEvent(System.Windows.QueryContinueDragEventArgs,System.Boolean)">
            <summary>
            Invoke the QueryContinueDrag event for drag-and-drop.
            </summary>
            <param name="e">The QueryContinueDragEventArgs to pass to the event.</param>
            <param name="preview">Determine if the PreviewQueryContinueDrag event should be raised, rather than QueryContinueDrag.</param>
            <remarks>See the remarks for <see cref="M:SolidShineUi.TabItem.RaiseDragEvent(System.String,System.Windows.DragEventArgs)"/> for more information.</remarks>
        </member>
        <member name="E:SolidShineUi.TabItem.DragEnter">
            <summary>
            Raised when data is dragged into the TabItem.
            </summary>
            <remarks>
            This specifically is raised when data is dragged within a TabItem's visual representation (such as a TabDisplayItem).
            Note that this event is not raised when a tab is dragged over another tab.
            Due to how the WPF architecture is designed, this is not a routed event.
            </remarks>
        </member>
        <member name="E:SolidShineUi.TabItem.DragOver">
            <summary>
            Raised when data is dragged within this TabItem. This event is raised continuously while the data is over the tab.
            </summary>
            <remarks>
            This specifically is raised when data is dragged within a TabItem's visual representation (such as a TabDisplayItem).
            Note that this event is not raised when a tab is dragged over another tab.
            Due to how the WPF architecture is designed, this is not a routed event.
            </remarks>
        </member>
        <member name="E:SolidShineUi.TabItem.DragLeave">
            <summary>
            Raised when data is dragged out of this TabItem, and is not dropped.
            </summary>
            <remarks>
            This specifically is raised when data is dragged within a TabItem's visual representation (such as a TabDisplayItem).
            Note that this event is not raised when a tab is dragged over another tab.
            Due to how the WPF architecture is designed, this is not a routed event.
            </remarks>
        </member>
        <member name="E:SolidShineUi.TabItem.Drop">
            <summary>
            Raised when data is dropped within this TabItem.
            </summary>
            <remarks>
            This specifically is raised when data is dragged within a TabItem's visual representation (such as a TabDisplayItem).
            Note that this event is not raised when a tab is dragged over another tab.
            Due to how the WPF architecture is designed, this is not a routed event.
            </remarks>
        </member>
        <member name="E:SolidShineUi.TabItem.GiveFeedback">
            <summary>
            Raised while a drag-and-drop action is occurring, allowing feedback to be provided to the user and the drop target.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.QueryContinueDrag">
            <summary>
            Raised while a drag-and-drop action is occurring, allowing the drag-and-drop to be cancelled in certain situations.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.PreviewDragEnter">
            <summary>
            Raised when data is dragged into this TabItem. This is a tunneling version of the <see cref="E:SolidShineUi.TabItem.DragEnter"/> event.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.PreviewDragOver">
            <summary>
            Raised when data is dragged within this TabItem. This is a tunneling version of the <see cref="E:SolidShineUi.TabItem.DragOver"/> event.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.PreviewDragLeave">
            <summary>
            Raised when data is dragged out of this TabItem, without being dropped. This is a tunneling version of the <see cref="E:SolidShineUi.TabItem.DragLeave"/> event.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.PreviewDrop">
            <summary>
            Raised when data is dropped within this TabItem. This is a tunneling version of the <see cref="E:SolidShineUi.TabItem.Drop"/> event.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.PreviewGiveFeedback">
            <summary>
            Raised while a drag-and-drop action is occurring, allowing feedback to be provided to the user and the drop target.
            This is a tunneling version of the <see cref="E:SolidShineUi.TabItem.GiveFeedback"/> event.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.PreviewQueryContinueDrag">
            <summary>
            Raised while a drag-and-drop action is occurring, allowing the drag-and-drop to be cancelled in certain situations.
            This is a tunneling version of the <see cref="E:SolidShineUi.TabItem.QueryContinueDrag"/> event.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.ToolTipProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.ToolTip">
            <summary>
             Get or set the ToolTip to display when the mouse is hovering over this tab.
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalToolTipChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.ToolTipChanged">
            <summary>
            Raised when the tab's ToolTip property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.TabItem.ExtraTabElementProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.ExtraTabElement">
            <summary>
            Get or set the element to display on the right side of the tab, next to the Close button.
            </summary>
        </member>
        <member name="M:SolidShineUi.TabItem.Close">
            <summary>
            Close this tab (and remove it from the TabControl), if it is currently in a TabControl.
            </summary>
            <remarks>
            This function can be run regardless of the state of the <c>CanClose</c> property.
            </remarks>
        </member>
        <member name="M:SolidShineUi.TabItem.BringIntoView">
            <summary>
            Attempt to bring the current tab into view on the tab bar
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalTabClosing">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="E:SolidShineUi.TabItem.InternalBringIntoViewRequested">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="P:SolidShineUi.TabItem.IsVisible">
            <summary>
             Get or set if this tab is visible in the UI.
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.ColorListItemDisplay">
            <summary>
            Indicates what text data to display with a ColorListItem.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.ColorListItemDisplay.Hex">
            <summary>
            Display the HEX values.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.ColorListItemDisplay.Rgb">
            <summary>
            Display the RGB values.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.ColorListItemDisplay.Hsv">
            <summary>
            Display the HSV values.
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.ColorListItem">
            <summary>
            A SelectableUserControl that displays a color along with text representing that color. This can be used in a SelectPanel.
            </summary>
            <summary>
            ColorListItem
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.ColorListItem.#ctor">
            <summary>
            Create a ColorListItem.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.ColorListItem.#ctor(System.Windows.Media.Color)">
            <summary>
            Create a ColorListItem, with the Color property preset.
            </summary>
            <param name="col">The color to display in this ColorListItem.</param>
        </member>
        <member name="M:SolidShineUi.Utils.ColorListItem.#ctor(System.Windows.Media.Color,SolidShineUi.Utils.ColorListItemDisplay)">
            <summary>
            Create a ColorListItem, with the Color and DisplayMode properties preset.
            </summary>
            <param name="col">The color to display in this ColorListItem.</param>
            <param name="displayMode">The display mode to use for the text in the ColorListItem.</param>
        </member>
        <member name="P:SolidShineUi.Utils.ColorListItem.DisplayMode">
            <summary>
            Get or set the text to display with the color, such as RGB values or HEX values.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ColorListItem.Color">
            <summary>
            Get or set the color to display in the ColorListItem.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.ColorListItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.DoubleStringConverter">
            <summary>
            Converts a double into a string for display in XAML.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.DoubleStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a double into a string, with rounding possible by setting the <paramref name="parameter"/> value.
            </summary>
            <param name="value">The double object to convert</param>
            <param name="targetType">Not used, returned type will always be string</param>
            <param name="parameter">The number of decimals to use (integer)</param>
            <param name="culture">Not used</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.Utils.DoubleStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a string back into a double, by parsing the string.
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.FilePathToIconConverter">
            <summary>
            Converts a fully-qualified file path into a 16x16 icon for display in XAML.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.FilePathToIconConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a file's full path to a 16x16 <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> icon.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.FilePathToIconConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This is not implemented. Throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.FilePathToNameConverter">
            <summary>
            Convert a fully-qualified path to a file into just displaying the filename, for use in XAML.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.FilePathToNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a file's full path to only display the filename.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.FilePathToNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This is not implemented. Throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.GradientBar">
            <summary>
            Interaction logic for GradientBar.xaml
            </summary>
            <summary>
            GradientBar
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.GradientBar.#ctor">
            <summary>
            Create a new GradientBar.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.GradientBar.GradientStops">
            <summary>
            Get or set the list of gradient stops to display in this GradientBar.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.GradientBar.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.GradientBar.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.Utils.GradientBar.ColorScheme">
            <summary>
            Get or set the color scheme used for this control. The color scheme can quickly apply a whole visual style to your control.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.GradientBar.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="E:SolidShineUi.Utils.GradientBar.SelectionChanged">
            <summary>
            Raised when the SelectedGradientStop is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.GradientBar.SelectedGradientStop">
            <summary>
            Get the gradient stop that is currently selected, or returns <c>null</c> if no gradient stop is selected.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.GradientBar.GradientChanged">
            <summary>
            Raised when the SelectedGradientStop is changed.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.GradientBar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.GradientStopItem">
            <summary>
            Interaction logic for GradientStopItem.xaml
            </summary>
            <summary>
            GradientStopItem
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.GradientStopItem.#ctor">
            <summary>
            Create a GradientStopItem, with default property values.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.GradientStopItem.#ctor(System.Double,System.Windows.Media.Color)">
            <summary>
            Create a GradientStopItem, with preset property values.
            </summary>
            <param name="offset">The offset from the gradient's start point where this stop appears.</param>
            <param name="color">The color of this gradient stop.</param>
        </member>
        <member name="M:SolidShineUi.Utils.GradientStopItem.#ctor(System.Windows.Media.GradientStop)">
            <summary>
            Create a GradientStopItem, generated from a GradientStop.
            </summary>
            <param name="stop">The GradientStop to load property values from.</param>
        </member>
        <member name="P:SolidShineUi.Utils.GradientStopItem.GradientStop">
            <summary>
            Get or set the gradient stop for this GradientStopItem.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.GradientStopItem.Offset">
            <summary>
            Get or set the offset value for this gradient stop. The offset determines how far along the gradient this stop occurs.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.GradientStopItem.OffsetProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.GradientStopItem.Color">
            <summary>
            Get or set the color for this gradient stop.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.GradientStopItem.ColorProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.GradientStopItem.IsSelected">
            <summary>
            Get or set whether this gradient stop is selected for editing.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.GradientStopItem.IsSelectedProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.GradientStopItem.StopFill">
            <summary>
            Get or set the brush used for the background of the gradient stop glyph.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.GradientStopItem.StopSelectedFill">
            <summary>
            Get or set the brush used for the background of the stop glyph while it is selected
            (i.e. the <c>IsSelected</c> property is true).
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.GradientStopItem.Click">
            <summary>
            Raised when the check box is clicked.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.GradientStopItem.RightClick">
            <summary>
            Raised when the check box is right-clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.GradientStopItem.ClickOnPress">
            <summary>
            Gets or sets whether the Click event should be raised when the checkbox is pressed, rather than when it is released.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.GradientStopItem.PerformPress(System.Boolean)">
            <summary>
            Sets up the button to be clicked. This must be run before PerformClick.
            </summary>
            <param name="rightClick">Determine whether this should be treated as a right click (which usually invokes a context menu).</param>
        </member>
        <member name="M:SolidShineUi.Utils.GradientStopItem.PerformClick(System.Boolean)">
            <summary>
            If the button is prepared by PerformPress, perform the Click actions, including raising the Click event.
            </summary>
            <param name="rightClick">Determine whether this should be treated as a right click (which usually invokes a context menu).</param>
        </member>
        <member name="M:SolidShineUi.Utils.GradientStopItem.DoClick">
            <summary>
            Perform a click programattically. The checkbox responds the same way as if it was clicked by the user.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.GradientStopItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.IconLoader">
            <summary>
            Load an icon from SolidShineUi's internal icon list.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.IconLoader.ICON_BLACK">
            <summary>
            Black monochrome icon
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.IconLoader.ICON_COLOR">
            <summary>
            Multi-colored icon
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.IconLoader.ICON_WHITE">
            <summary>
            White monochrome icon
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.IconLoader.LoadIcon(System.String,System.String)">
            <summary>
            Load an icon from SolidShineUi's internal icon list.
            </summary>
            <param name="iconName">The name of the icon.</param>
            <param name="colorVariation">The color variation to use: <c>"Color"</c>, <c>"Black"</c>, or <c>"White"</c>.</param>
            <returns></returns>
        </member>
        <member name="M:SolidShineUi.Utils.IconLoader.LoadIcon(System.String,SolidShineUi.ColorScheme)">
            <summary>
            Load an icon from SolidShineUI's internal icon list, using the given ColorScheme to determine which variation to use.
            </summary>
            <param name="iconName">The name of the icon.</param>
            <param name="cs">The ColorScheme to use to determine which variation to use.</param>
            <returns></returns>
        </member>
        <member name="T:SolidShineUi.Utils.IconSizeConverter">
            <summary>
            Forces the selection of a given size from the ICO file/resource. 
            If the exact size does not exists, selects the closest smaller if possible otherwise closest higher resolution.
            If no parameter is given, the smallest frame available will be selected
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.IconSizeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SolidShineUi.Utils.IconSizeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Not implemented, throws a <see cref="T:System.NotImplementedException"/>.</summary>
        </member>
        <member name="T:SolidShineUi.Utils.ImageColorPicker">
            <summary>
            Image element with the ability to pick out a pixel color value.
            </summary>
            <remarks>
            Note that if this is used in a WPF project that isn't DPI-Aware, this control will perform weirdly on screens with a DPI value other than 100%.
            </remarks>
        </member>
        <member name="M:SolidShineUi.Utils.ImageColorPicker.#ctor">
            <summary>
            Create a ImageColorPicker.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.ImageColorPicker.SelectedColorChanged">
            <summary>
            Raised when the SelectedColor property is changed.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageColorPicker.SelectedColor">
            <summary>
            Get the color that is selected from the image.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageColorPicker.SelectedPosition">
            <summary>
            Get the position that is selected from the image. This position is relative to the control itself.
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.ImageTextListItem">
            <summary>
            A basic control that can be displayed in a SelectPanel, with the ability to set its title, icon, and also display a Remove button.
            </summary>
            <summary>
            ImageTextListItem
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.ImageTextListItem.#ctor">
            <summary>
            Create an ImageTextListItem.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.ImageTextListItem.RequestRemove">
            <summary>
            Raised when the control requested to be removed, such as when the Remove button is clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.Title">
            <summary>
            Get or set the title or text to display within the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.CanRemove">
            <summary>
            Get or set if this item can be removed. If true, the Remove button is visible; if false, the Remove button is hidden.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.ShowIcon">
            <summary>
            Get or set if the icon on the left side of the control should be visible.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.Icon">
            <summary>
            Get or set the icon displayed on the left side of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.ButtonBackground">
            <summary>
            Get or set the brush used for the background of the Remove button in the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.ButtonHighlightBrush">
            <summary>
            Get or set the brush used for the Remove button when it is highlighted (i.e. has mouse over it, or has keyboard focus).
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.ButtonClickBrush">
            <summary>
            Get or set the brush used for the Remove button when it is being clicked.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.ButtonBackgroundDisabledBrush">
            <summary>
            Get or set the brush used for the background of the Remove button when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.ButtonBorderDisabledBrush">
            <summary>
            Get or set the brush used for the border of the Remove button when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.Command">
            <summary>
            Get or set the command that is executed when the Remove button is pressed.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.CommandParameter">
            <summary>
            Get or set the parameter sent with the command when it is executed.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.CommandTarget">
            <summary>
            Get or set the target of the command.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ImageTextListItem.ButtonToolTip">
            <summary>
            Get or set the tooltip to display with the Remove button.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.ImageTextListItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.LimitableStringCollection">
            <summary>
            A string collection where a limit can be applied to the number of items allowed. This collection can be observed via the CollectionChanged event.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.LimitableStringCollection.#ctor">
            <summary>
            Create a LimitableStringCollection.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.LimitableStringCollection.#ctor(System.Int32)">
            <summary>
            Create a LimitableStringCollection, with a max limit of items preset.
            </summary>
            <param name="maxCount">The maximum number of items allowed in this collection.</param>
        </member>
        <member name="E:SolidShineUi.Utils.LimitableStringCollection.ItemAdding">
            <summary>
            Raised prior to an item being added to this collection, with the ability to cancel adding the item.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.LimitableStringCollection.MaxCount">
            <summary>
            Get or set the maximum number of items allowed for this collection. If the maximum count is less than 0, then the collection is allowed to grow to any size without a limit.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.LimitableStringCollection.Add(System.String)">
            <summary>
            Adds an object to the end of this collection.
            </summary>
            <param name="item">The item to add.</param>
            <remarks>
            If the LimitableStringCollection's ItemAdding event is handled, it is possible that the addition of this item could be cancelled.
            If the item being added would bring the count over the maximum count of items allowed (via <see cref="P:SolidShineUi.Utils.LimitableStringCollection.MaxCount"/>), then this item
            replaces the last item already in the collection (with the last item being removed before this item is added in).
            </remarks>
        </member>
        <member name="M:SolidShineUi.Utils.LimitableStringCollection.Insert(System.Int32,System.String)">
            <summary>
            Insert an object into the collection at the specified index.
            </summary>
            <param name="item">The item to add.</param>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <remarks>
            If the LimitableStringCollection's ItemAdding event is handled, it is possible that the insertion of this item could be cancelled.
            If the item being inserted would bring the count over the maximum count of items allowed (via <see cref="P:SolidShineUi.Utils.LimitableStringCollection.MaxCount"/>), then this item
            is inserted after the current last item in the collection is removed.
            </remarks>
        </member>
        <member name="T:SolidShineUi.Utils.ItemAddingStringEventArgs">
            <summary>
            The event arguments for the ItemAdding event of the LimitableStringCollection.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ItemAddingStringEventArgs.Item">
            <summary>
            Get the item about to be added.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.ItemAddingStringEventArgs.Cancel">
            <summary>
            Get or set whether the addition of this item should be cancelled. By default, this is set to <c>false</c>, as in "do not cancel".
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.ItemAddingStringEventArgs.#ctor(System.String)">
            <summary>
            Create an ItemAddingStringEventArgs.
            </summary>
            <param name="item">The item about to be added.</param>
        </member>
        <member name="T:SolidShineUi.Utils.MultilineStringInputDialog">
            <summary>
            A dialog for the user to enter in a string (in response to a message or prompt).
            </summary>
            <summary>
            MultilineStringInputDialog
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.MultilineStringInputDialog.#ctor">
            <summary>
            Create a StringInputDialog with nothing preset.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.MultilineStringInputDialog.#ctor(SolidShineUi.ColorScheme)">
            <summary>
            Create a StringInputDialog with a color scheme.
            </summary>
            <param name="cs">The color scheme to use for the window.</param>
        </member>
        <member name="M:SolidShineUi.Utils.MultilineStringInputDialog.#ctor(SolidShineUi.ColorScheme,System.String,System.String,System.String)">
            <summary>
            Create a StringInputBox with prefilled values.
            </summary>
            <param name="cs">The color scheme to use for the window.</param>
            <param name="title">The title of the window.</param>
            <param name="desc">The description to give to the user.</param>
            <param name="value">The value to place in the text box. By default, the text box is empty.</param>
        </member>
        <member name="P:SolidShineUi.Utils.MultilineStringInputDialog.Value">
            <summary>
            Get or set the text value of the input dialog's text box.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.MultilineStringInputDialog.DialogResult">
            <summary>
            Get the result of the dialog when it is closed. "False" refers to the user cancelling the operation, while "True" refers to the user confirming, by clicking "OK" or pressing the Enter key.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.MultilineStringInputDialog.EnterKeyConfirms">
            <summary>
            Get or set whether the Enter key can be used to confirm the dialog. If enabled, pressing down the Enter key will be treated as if the user pressed "OK".
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.MultilineStringInputDialog.EscapeKeyCancels">
            <summary>
            Get or set whether the Escape key can be used to cancel the dialog. If enabled, pressing down the Escape key will be treated as if the user pressed "Cancel".
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.MultilineStringInputDialog.SelectTextOnFocus">
            <summary>
            Get or set whether all of the text in the text box should be selected when the text box receives focus.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.MultilineStringInputDialog.Description">
            <summary>
            Get or set the description text to display above the text box. This text should describe what the user should enter into the text box.
            </summary>
            <remarks>Try to keep the description to about a sentence long. 
            Ideally, the overall design of the program should make it apparent what the user should enter into the text box without reading the description.</remarks>
        </member>
        <member name="M:SolidShineUi.Utils.MultilineStringInputDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.RelativePositionSelect">
            <summary>
            A control to visually select a value between 0.0 and 1.0 in both the X (width) and Y (height) axes.
            </summary>
            <summary>
            RelativePositionSelect
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.RelativePositionSelect.#ctor">
            <summary>
            Create a RelativePositionSelect.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.RelativePositionSelect.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.RelativePositionSelect.ColorSchemeProperty">
            <summary>
            A dependency property object backing the related ColorScheme property. See <see cref="P:SolidShineUi.Utils.RelativePositionSelect.ColorScheme"/> for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.RelativePositionSelect.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.ColorScheme">
            <summary>
            Get or set the color scheme used for this RelativePositionSelect. For easier color scheme management, bind this to the window or larger control you're using.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.RelativePositionSelect.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.ControlBackground">
            <summary>
            Get or set the brush used for the background of the RelativePositionSelect's box.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.SelectorBrush">
            <summary>
            Get or set the brush used for the selector ellipse in the RelativePositionSelect.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.BackgroundDisabledBrush">
            <summary>
            Get or set the brush to use for the background of the RelativePositionSelect's box when it is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.BorderDisabledBrush">
            <summary>
            Get or set the brush to use for the border of the cotnrol, while the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.SelectorDisabledBrush">
            <summary>
            Get or set the brush used for the check mark when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.BorderBrush">
            <summary>
            Get or set the brush used for the border of the RelativePositionSelect's box.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.SnapLineBrush">
            <summary>
            Get or set the brush used for the snap point lines.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.KeyboardFocusHighlight">
            <summary>
            Get or set the brush used for the outline when the control is keyboard focused.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.RelativePositionSelect.OnSnapLineBrushChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when a property of an object has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="M:SolidShineUi.Utils.RelativePositionSelect.UpdateSnapLineBrush">
            <summary>
            Updates the visuals of the snap lines in the control to match the SnapLineBrush property.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.RelativePositionSelect.OnKeyboardFocusHighlightBrushChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when a property of an object has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="M:SolidShineUi.Utils.RelativePositionSelect.UpdateKeyboardFocusHighlightBrush">
            <summary>
            An internal method to use for updating the brush when this control has keyboard focus.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.SnapToSnapLines">
            <summary>
            Get or set if the selector should snap to the snap lines within the control.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.RelativePositionSelect.SnapToSnapLinesProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.SnapDistance">
            <summary>
            The distance, in pixels, within which the selector should snap to the nearest snap line.
            The larger the distance, the further the selector can be away from a snap line before it snaps to the line.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.RelativePositionSelect.SnapDistanceProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.HorizontalSnapPoints">
            <summary>
            Get or set the list of snap points that are displayed along the horizontal (X) axis of the control.
            <c>0.0</c> represents the far left of the control, and <c>1.0</c> represents the far right of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.VerticalSnapPoints">
            <summary>
            Get or set the list of snap points that are displayed along the vertical (Y) axis of the control.
            <c>0.0</c> represents the far top of the control, and <c>1.0</c> represents the far bottom of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.KeyMoveStep">
            <summary>
            Get or set the amount the selector is moved each time an arrow key is pressed (while the control is focused).
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.RelativePositionSelect.KeyMoveStepProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.SelectorSize">
            <summary>
            Get or set the size of the selector. The larger the selector, the easier it will be to see and also to click and drag, but also harder to visualize a particular value.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.SelectedPoint">
            <summary>
            Get or set the selected point, on both the X and Y axes.
            This is how far the selector is from the top-left corner of the control, on a relative scale from <c>0.0</c> to <c>1.0</c> in both axes.
            </summary>
            <remarks>
            When setting this property, the event SelectedPositionChanged will fire twice: once after the width (X) is changed, and once after the height (Y) is changed.
            </remarks>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.SelectedWidth">
            <summary>
            Get or set the selected value on the horizontal (X) axis.
            This is how far from the left edge of the control that the selector is, on a relative scale from <c>0.0</c> to <c>1.0</c>.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.RelativePositionSelect.SelectedHeight">
            <summary>
            Get or set the selected value on the vertical (Y) axis.
            This is how far from the top of the control that the selector is, on a relative scale from <c>0.0</c> to <c>1.0</c>.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.RelativePositionSelect.SelectedPositionChanged">
            <summary>
            Raised when either the SelectedHeight or SelectedWidth properties change (i.e., when the selector was moved).
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.RelativePositionSelect.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.StreamExtensions">
            <summary>
            Extension methods for Streams. This file is not utilized in SolidShineUi at all, and will be removed in a future version.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.StreamExtensions.ReadAsciiString(System.IO.Stream,System.Int32)">
            <summary>
            Reads a ASCII string of the specified length.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <param name="length">The number of characters in the string.</param>
            <returns>The string read from the stream.</returns>
        </member>
        <member name="M:SolidShineUi.Utils.StreamExtensions.ReadStringBigEndian(System.IO.Stream,System.Int32)">
            <summary>
            Reads a unicode string of the specified length in big-endian format.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <param name="length">The number of characters in the string.</param>
            <returns>The string read from the stream.</returns>
        </member>
        <member name="M:SolidShineUi.Utils.StreamExtensions.ReadStringBigEndian(System.IO.Stream)">
            <summary>
            Reads a unicode string from the current stream in big-endian format. The string is prefixed with the length.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <returns>The string read from the stream.</returns>
        </member>
        <member name="M:SolidShineUi.Utils.StreamExtensions.ReadUInt16BigEndian(System.IO.Stream)">
            <summary>
            Reads a 2-byte unsigned integer from the current stream using big-endian encoding and advances the position of the stream by two bytes.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <returns>A 2-byte unsigned integer read from the source stream.</returns>
        </member>
        <member name="M:SolidShineUi.Utils.StreamExtensions.ReadUInt32BigEndian(System.IO.Stream)">
            <summary>
            Reads a 4-byte unsigned integer from the current stream using big-endian encoding and advances the position of the stream by four bytes.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <returns>A 4-byte unsigned integer read from the source stream.</returns>
        </member>
        <member name="T:SolidShineUi.Utils.TabDisplayItem">
            <summary>
            A visual rendering of a <see cref="T:SolidShineUi.TabItem" />, to display in a <see cref="T:SolidShineUi.TabControl"/>.
            </summary>
            <summary>
            TabDisplayItem
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TabDisplayItem.#ctor">
            <summary>
            Create a TabDisplayItem.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TabDisplayItem.#ctor(SolidShineUi.TabItem)">
            <summary>
            Create a TabDisplayItem.
            </summary>
            <param name="tab">The base TabItem that this TabDisplayItem represents.</param>
        </member>
        <member name="E:SolidShineUi.Utils.TabDisplayItem.RequestClose">
            <summary>
            Raised when the Close button is clicked, and this tab wants to be closed.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.TabDisplayItem.RightClick">
            <summary>
            Raised when the control is right-clicked.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.TabDisplayItem.Click">
            <summary>
            Raised when the control is clicked.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.TabDisplayItem.TabItemDrop">
            <summary>
            Raised when a TabItem is dropped onto this TabDisplayItem. Used as part of the TabControl's drag-and-drop system.
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.TabDisplayItem.TabItemDropEventHandler">
            <summary>
            A delegate to be used with events regarding dropping a TabItem into a TabControl.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="e">The event arguments associated with this event.</param>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.HighlightBrush">
            <summary>
            Get or set the brush for the background while this TabDisplayItem is highlighted (i.e. the mouse is over it, or it has keyboard focus).
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.BorderHighlightBrush">
            <summary>
            Get or set the brush for the border while this TabDisplayItem is highlighted (i.e. the mouse is over it, or it had keyboard focus).
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.BorderBrush">
            <summary>
            Get or set the brush for the border of this control.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabDisplayItem.TabBackgroundProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.TabBackground">
            <summary>
            Get or set the brush used for the custom background of this tab. Taken from <see cref="P:SolidShineUi.TabItem.TabBackground"/>.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.TabDisplayItem.InternalTabBackgroundChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabDisplayItem.CanSelectProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.CanSelect">
            <summary>
            Get or set if the tab can be selected.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabDisplayItem.IsDirtyProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.IsDirty">
            <summary>
            Get or set if this tab is dirty. This can be used to visually indicate, for example, unsaved changes in the tab's contents. 
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabDisplayItem.IsSelectedProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.IsSelected">
            <summary>
            Get or set if this tab is selected. A selected tab will have visual differences to show that it is selected.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.TabDisplayItem.InternalIsSelectedChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabDisplayItem.TabItemProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.TabItem">
            <summary>
            The TabItem that this TabDisplayItem is representing. It is not advisable to change this property after the control is loaded; instead, just create a new TabDisplayItem.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.TabDisplayItem.InternalTabItemChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabDisplayItem.ShowTabsOnBottomProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.ShowTabsOnBottom">
            <summary>
            Get or set if the parent tab control has its ShowTabsOnBottom property set.
            </summary>
            <remarks>
            This setting is used as there are some visual differences, depending upon if the tab list is on the top or bottom of the tab control.
            </remarks>
        </member>
        <member name="E:SolidShineUi.Utils.TabDisplayItem.InternalShowTabsOnBottomChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabDisplayItem.ParentTabControlProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.ParentTabControl">
            <summary>
            Get or set the parent TabControl item that holds this tab item.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.TabDisplayItem.InternalParentChanged">
            <summary>
            Internal event for handling a property changed. Please view the event that is not prefixed as "Internal".
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabDisplayItem.ColorSchemeProperty">
            <summary>
            A dependency property object backing the related ColorScheme property. See <see cref="P:SolidShineUi.Utils.TabDisplayItem.ColorScheme"/> for more details.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TabDisplayItem.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.ColorScheme">
            <summary>
            Get or set the color scheme to apply to the window.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TabDisplayItem.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.AllowDragDrop">
            <summary>
            Get or set if the tab can be dragged and dropped.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabDisplayItem.AllowDataDragDrop">
            <summary>
            Get or set if data can be dropped onto this TabDisplayItem.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TabDisplayItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.TabItemDropEventArgs">
            <summary>
            Event arguments for a TabItem being dropped onto a TabControl. Primarily used internally.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TabItemDropEventArgs.#ctor(SolidShineUi.TabItem,SolidShineUi.TabItem,System.Boolean)">
            <summary>
            Create a TabItemDropEventArgs.
            </summary>
            <param name="sourceTabItem">The tab item that triggered the event.</param>
            <param name="droppedTabItem">The tab item to be dropped.</param>
            <param name="before">Determine whether to drop the <paramref name="droppedTabItem"/> before or after the <paramref name="sourceTabItem"/>.</param>
        </member>
        <member name="P:SolidShineUi.Utils.TabItemDropEventArgs.SourceTabItem">
            <summary>
            Get the TabItem that triggered the TabItemDrop event.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabItemDropEventArgs.DroppedTabItem">
            <summary>
            Get the TabItem that is being dropped.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabItemDropEventArgs.Before">
            <summary>
            Get whether the dropped TabItem should be put before or after the source TabItem. (Please use <see cref="P:SolidShineUi.Utils.TabItemDropEventArgs.PlaceBefore"/> instead, as this property will be removed in the future.)
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TabItemDropEventArgs.PlaceBefore">
            <summary>
            Get whether the dropped TabItem should be put before or after the source TabItem.
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.TabScrollCommandAction">
            <summary>
            Represents the scrolling action to take when executing the TabScroll command.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabScrollCommandAction.Left">
            <summary>
            Scroll to the left a set amount.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabScrollCommandAction.Right">
            <summary>
            Scroll to the right a set amount.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabScrollCommandAction.Home">
            <summary>
            Scroll to the very left end.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TabScrollCommandAction.End">
            <summary>
            Scroll to the very right end.
            </summary>
        </member>
        <member name="T:SolidShineUi.Utils.TwoPositionsSelect">
            <summary>
            A control to visually select two values between 0.0 and 1.0 in both the X (width) and Y (height) axes.
            </summary>
            <summary>
            TwoPositionsSelect
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TwoPositionsSelect.#ctor">
            <summary>
            Create a TwoPositionsSelect.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.TwoPositionsSelect.ColorSchemeChanged">
            <summary>
            Raised when the ColorScheme property is changed.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TwoPositionsSelect.OnColorSchemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when the ColorScheme property has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.ColorScheme">
            <summary>
            Get or set the color scheme used for this TwoPositionsSelect. For easier color scheme management, bind this to the window or larger control you're using.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TwoPositionsSelect.ApplyColorScheme(SolidShineUi.ColorScheme)">
            <summary>
            Apply a color scheme to this control. The color scheme can quickly apply a whole visual style to the control.
            </summary>
            <param name="cs">The color scheme to apply.</param>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.ControlBackground">
            <summary>
            Get or set the brush used for the background of the TwoPositionsSelect's box.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.SelectorBrush">
            <summary>
            Get or set the brush used for the selector ellipses in the TwoPositionsSelect.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.BackgroundDisabledBrush">
            <summary>
            Get or set the brush to use for the background of the TwoPositionsSelect's box when it is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.BorderDisabledBrush">
            <summary>
            Get or set the brush to use for the border of the cotnrol, while the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.SelectorDisabledBrush">
            <summary>
            Get or set the brush used for the check mark when the control is disabled.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.BorderBrush">
            <summary>
            Get or set the brush used for the border of the TwoPositionsSelect's box.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.SnapLineBrush">
            <summary>
            Get or set the brush used for the snap point lines.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.KeyboardFocusHighlight">
            <summary>
            Get or set the brush used for the outline when the control is keyboard focused.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TwoPositionsSelect.OnSnapLineBrushChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when a property of an object has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="M:SolidShineUi.Utils.TwoPositionsSelect.UpdateSnapLineBrush">
            <summary>
            Updates the visuals of the snap lines in the control to match the SnapLineBrush property.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TwoPositionsSelect.OnKeyboardFocusHighlightBrushChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Perform an action when a property of an object has changed. Primarily used internally.
            </summary>
            <param name="d">The object containing the property that changed.</param>
            <param name="e">Event arguments about the property change.</param>
        </member>
        <member name="M:SolidShineUi.Utils.TwoPositionsSelect.UpdateKeyboardFocusHighlightBrush">
            <summary>
            An internal method to use for updating the brush when this control has keyboard focus.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.SnapToSnapLines">
            <summary>
            Get or set if the selector should snap to the snap lines within the control.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TwoPositionsSelect.SnapToSnapLinesProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.SnapDistance">
            <summary>
            The distance, in pixels, within which the selector should snap to the nearest snap line.
            The larger the distance, the further the selector can be away from a snap line before it snaps to the line.
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TwoPositionsSelect.SnapDistanceProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.HorizontalSnapPoints">
            <summary>
            Get or set the list of snap points that are displayed along the horizontal (X) axis of the control.
            <c>0.0</c> represents the far left of the control, and <c>1.0</c> represents the far right of the control.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.VerticalSnapPoints">
            <summary>
            Get or set the list of snap points that are displayed along the vertical (Y) axis of the control.
            <c>0.0</c> represents the far top of the control, and <c>1.0</c> represents the far bottom of the control.
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TwoPositionsSelect.SetSelectorFocus(System.Nullable{System.Boolean})">
            <summary>
            Set which selector is receiving key and mouse focus. <c>false</c> for selector 1, <c>true</c> for selector 2, and <c>null</c> for neither.
            </summary>
            <param name="focusValue">Value indicating which selector should have focus: <c>false</c> for selector 1, <c>true</c> for selector 2, and <c>null</c> for neither</param>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.SelectorSize">
            <summary>
            Get or set the size of the selector. The larger the selector, the easier it will be to see and also to click and drag, but also harder to visualize a particular value.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.KeyMoveStep">
            <summary>
            Get or set the amount the selector is moved each time an arrow key is pressed (while the control is focused).
            </summary>
        </member>
        <member name="F:SolidShineUi.Utils.TwoPositionsSelect.KeyMoveStepProperty">
            <summary>
            A dependency property object backing the related property. See the property itself for more details.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.SelectedWidth1">
            <summary>
            Get or set the first selected value on the horizontal (X) axis.
            This is how far from the left edge of the control that the selector is, on a relative scale from <c>0.0</c> to <c>1.0</c>.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.SelectedHeight1">
            <summary>
            Get or set the first selected value on the vertical (Y) axis.
            This is how far from the top of the control that the selector is, on a relative scale from <c>0.0</c> to <c>1.0</c>.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.SelectedWidth2">
            <summary>
            Get or set the second selected value on the horizontal (X) axis.
            This is how far from the left edge of the control that the selector is, on a relative scale from <c>0.0</c> to <c>1.0</c>.
            </summary>
        </member>
        <member name="P:SolidShineUi.Utils.TwoPositionsSelect.SelectedHeight2">
            <summary>
            Get or set the second selected value on the vertical (Y) axis.
            This is how far from the top of the control that the selector is, on a relative scale from <c>0.0</c> to <c>1.0</c>.
            </summary>
        </member>
        <member name="E:SolidShineUi.Utils.TwoPositionsSelect.SelectedPositionChanged">
            <summary>
            Raised when any of the SelectedHeight or SelectedWidth properties change (i.e., when the selector was moved).
            </summary>
        </member>
        <member name="M:SolidShineUi.Utils.TwoPositionsSelect.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SolidShineUi.WildcardMatch">
            <summary>
            A class that can match a string against a given target string with wildcards (i.e. "d*g" can match "dig" or "dog" or "ding"). 
            </summary>
        </member>
        <member name="M:SolidShineUi.WildcardMatch.MatchesWildcard(System.String,System.String)">
            <summary>
            Match a string against a given target string with wildcards ("*" and "?" are supported). See Remarks for more details.
            </summary>
            <param name="text">The string to test.</param>
            <param name="wildcardString">The string to match against, containing the wildcards.</param>
            <returns>True if it can be matched; false if they cannot be.</returns>
            <remarks>
            This function can match a string against a wildcard string.
            Wildcards are used, for example, in Windows's file dialogs for file filters, as well as other places in Windows or MS-DOS where one or more files can be interacted with.
            Supported wildcard characters are "*", which matches any number of characters, and "?", which matches just one character.
            (For example, "d*g" will match both "dig" and "ding", where as "d?g" will only match "dig", and not "ding" or "dg".)
            Regex (regular expressions) is a lot more powerful than what wildcards alone can provide, but regex strings can also be a lot more complicated to decipher.
            <para/>
            This class was written by H.A. Sullivan.
            </remarks>
        </member>
        <member name="M:SolidShineUi.WildcardMatch.MatchesWildcard(System.String,System.String,System.Boolean)">
            <summary>
            Match a string against a given target string with wildcards ("*" and "?" are supported). See Remarks for details.
            </summary>
            <param name="text">The string to test.</param>
            <param name="wildcardString">The string to match against, containing the wildcards.</param>
            <param name="ignoreCase">Set if letter casing is ignored while matching.</param>
            <returns>True if it can be matched; false if they cannot be.</returns>
            <remarks>
            This function can match a string against a wildcard string.
            Wildcards are used, for example, in Windows's file dialogs for file filters, as well as other places in Windows or MS-DOS where one or more files can be interacted with.
            Supported wildcard characters are "*", which matches any number of characters, and "?", which matches just one character.
            (For example, "d*g" will match both "dig" and "ding", where as "d?g" will only match "dig", and not "ding" or "dg".)
            Regex (regular expressions) is a lot more powerful than what wildcards alone can provide, but regex strings can also be a lot more complicated to decipher.
            <para/>
            This class was written by H.A. Sullivan.
            </remarks>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
